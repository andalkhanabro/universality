#!/usr/bin/env python

__doc__ = "a quick corner plot"
__usage__ = "overlay_samples [--options] label,samples1.csv label,samples2.csv column1 [column2 column3...]"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os
import numpy as np

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt

import corner

from optparse import OptionParser

### non-standard libraries
from universality import utils

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__doc__)

parser.add_option('-v', '--verbose', default=False, action='store_true')

parser.add_option('', '--logcolumn', default=[], type='string', action='append',
    help='convert the values read in for this column to natural log. \
Can be repeated to specify multiple columns. \
DEFAULT=[]')

parser.add_option('', '--range', nargs=3, default=[], action='append', type='string',
    help='specify the ranges used in corner.corner (eg.: "--range column minimum maximum"). \
Can specify ranges for multiple columns by repeating this option. \
DEFAULT will use the minimum and maximum observed sample points.')

parser.add_option('', '--weight1-column', default=None, type='string',
    help='if provided, thie numerical values from this column will be used as weights in the KDE')
parser.add_option('', '--weight1-column-is-log', default=False, action='store_true',
    help='if supplied, interpret the values in weight_column as log(weight), meaning we exponentiate them before using them in the KDE')

parser.add_option('', '--weight2-column', default=None, type='string',
    help='if provided, thie numerical values from this column will be used as weights in the KDE')
parser.add_option('', '--weight2-column-is-log', default=False, action='store_true',
    help='if supplied, interpret the values in weight_column as log(weight), meaning we exponentiate them before using them in the KDE')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

opts, args = parser.parse_args()
assert len(args)>2, 'please supply at least 2 input argument\n%s'%__usage__
label1, in1path = args[0].split(',')
label2, in2path = args[1].split(',')
columns = args[2:]
Ncol = len(columns)

if opts.tag:
    opts.tag = "_"+opts.tag

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

rangesdict = dict((column,(float(_min), float(_max))) for column, _min, _max in opts.range)

#-------------------------------------------------

### read in data from csv
if opts.verbose:
    print('reading samples from: '+in1path)
data1, columns = utils.load(in1path, columns, logcolumns=opts.logcolumn)

ranges1 = []
for i, col in enumerate(columns):
    if rangesdict.has_key(col):
        ranges1.append(rangesdict[col])
    else:
        ranges1.append((np.min(data1[:,i]), np.max(data1[:,i])))

if opts.weight1_column!=None:
    if opts.verbose:
        print('reading in non-trivial weights from: '+in1path)
    weights1, _ = utils.load(in1path, [opts.weight1_column])
    weights1 = weights1.reshape((len(weights1)))

    if opts.weight1_column_is_log:
        weights1 = np.exp(weights1-np.max(weights1))
    weights1 /= np.sum(weights1)

else:
    N = len(data1)
    weights1 = np.ones(N, dtype='float')/N

### read in data from csv
if opts.verbose:
    print('reading samples from: '+in2path)
data2, columns = utils.load(in2path, columns, logcolumns=opts.logcolumn)

ranges2 = []
for i, col in enumerate(columns):
    if rangesdict.has_key(col):
        ranges2.append(rangesdict[col])
    else:
        ranges2.append((np.min(data2[:,i]), np.max(data2[:,i])))

if opts.weight2_column!=None:
    if opts.verbose:
        print('reading in non-trivial weights from: '+in2path)
    weights2, _ = utils.load(in2path, [opts.weight2_column])
    weights2 = weights2.reshape((len(weights2)))

    if opts.weight2_column_is_log:
        weights2 = np.exp(weights2-np.max(weights2))
    weights2 /= np.sum(weights2)

else:
    N = len(data2)
    weights2 = np.ones(N, dtype='float')/N

#------------------------

if opts.verbose:
    print('plotting')

labels = ['$%s$'%c for c in columns]

fig = corner.corner(
    data1,
    labels=labels,
    range=ranges1,
    weights=weights1,
    color='b',
)

corner.corner(
    data2,
    labels=labels,
    range=ranges2,
    weights=weights2,
    color='r',
    fig=fig,
)

fig.text(0.75, 0.75, label1, ha='center', va='center', color='b')
fig.text(0.75, 0.65, label2, ha='center', va='center', color='r')

figname = os.path.join(opts.output_dir, 'overlay_samples%s.png'%opts.tag)
if opts.verbose:
    print('saving: '+figname)
fig.savefig(figname)
plt.close(fig)
