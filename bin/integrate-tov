#!/usr/bin/env python

"""a script to integrate the TOV equations given an EoS to compute a sequence of macroscopic parameters
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality.tov import sequences
from universality.utils import (io, utils)

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('eospath', type=str)
parser.add_argument('central_pressurec2_range', nargs=2, type=float)

parser.add_argument('--pressurec2-column', default=sequences.DEFAULT_PRESSUREC2_COLUMN, type=str)
parser.add_argument('--energy_densityc2-column', default=sequences.DEFAULT_ENERGY_DENSITYC2_COLUMN, type=str)
parser.add_argument('--baryon_density-column', default=sequences.DEFAULT_BARYON_DENSITY_COLUMN, type=str)
parser.add_argument('--cs2c2-column', default=None, type=str)

parser.add_argument('--central-baryon-density-range', nargs=2, type=float, default=None,
    help='If specified, limits the stellar sequence to within this range of central baryon_density.')
parser.add_argument('--central-energy-densityc2-range', nargs=2, type=float, default=None,
    help='If specified, limits the stellar sequence to within this range of central energy_densityc2')

parser.add_argument('--central-eos-column', default=[], type=str, action='append',
    help='record the values of these eos columns at the center of each stellar model')
parser.add_argument('--central-column-template', default=sequences.DEFAULT_CENTRAL_COLUMN_TEMPLATE, type=str,
    help='the template used to define column names associated with eos columns')

parser.add_argument('--formalism', default=sequences.DEFAULT_FORMALISM, type=str,
    help='must be one of: %s. DEFAULT=%s'%(', '.join(sequences.KNOWN_FORMALISMS), sequences.DEFAULT_FORMALISM))

parser.add_argument('--min-num-models', default=sequences.DEFAULT_MIN_NUM_MODELS, type=int)
parser.add_argument('--interpolator-rtol', default=sequences.DEFAULT_INTERPOLATOR_RTOL, type=float)
parser.add_argument('--integration-rtol', default=sequences.DEFAULT_INTEGRATION_RTOL, type=float)

parser.add_argument('--outpath', default=None, type=str)

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('-V', '--Verbose', default=False, action='store_true')

args = parser.parse_args()

assert args.formalism in sequences.KNOWN_FORMALISMS, '--formalism=%s not understood; must be one of %s'%(args.formalism, ', '.join(sequences.KNOWN_FORMALISMS))

if args.outpath is None:
    args.outpath = args.eospath + '-macro'

min_central_pressurec2, max_central_pressurec2 = args.central_pressurec2_range

args.verbose |= args.Verbose

#-------------------------------------------------

### load EoS data from disk
if args.verbose:
    print('loading EoS data from: '+args.eospath)
cols = [args.pressurec2_column, args.energy_densityc2_column, args.baryon_density_column]
if args.cs2c2_column is not None:
    cols.append(args.cs2c2_column)

data, cols = io.load(args.eospath, cols+args.central_eos_column) ### NOTE: this will not produce duplicated columns

pressurec2 = data[:,cols.index(args.pressurec2_column)]
energy_densityc2 = data[:,cols.index(args.energy_densityc2_column)]
baryon_density = data[:, cols.index(args.baryon_density_column)]

if args.cs2c2_column is not None:
    cs2c2 = data[:,cols.index(args.cs2c2_column)]
else:
    cs2c2 = utils.num_dfdx(energy_densityc2, pressurec2)

### sanity check that our integration range is compatible with the EoS data available
max_pressurec2 = np.max(pressurec2)
if max_central_pressurec2 > max_pressurec2:
    if args.verbose:
        print('limitting central_pressurec2 <= %.6e based on EoS data\'s range'%max_pressurec2)
    max_central_pressurec2 = max_pressurec2

min_pressurec2 = np.min(pressurec2)
if min_central_pressurec2 < min_pressurec2:
    if args.verbose:
        print('limitting central_pressurec2 >= %.6e based on EoS data\'s range'%min_pressurec2)
    min_central_pressurec2 = min_pressurec2

### additionally check whether we're obeying the requested bounds on central baryon and energy densities
if args.central_baryon_density_range is not None:
    min_baryon_density, max_baryon_density = args.central_baryon_density_range

    # check minimum
    min_pc2 = np.interp(min_baryon_density, baryon_density, pressurec2)
    if min_pc2 > min_central_pressurec2:
        if args.verbose:
            print('limitting central_pressurec2 >= %.6e based on min_baryon_density = %.6e'%(min_pc2, min_baryon_density))
        min_central_pressurec2 = min_pc2

    # check maximum
    max_pc2 = np.interp(max_baryon_density, baryon_density, pressurec2)
    if max_pc2 < max_central_pressurec2:
        if args.verbose:
            print('limitting central_pressurec2 <= %.6e based on max_baryon_density = %.6e'%(max_pc2, max_baryon_density))
        max_central_pressurec2 = max_pc2

if args.central_energy_densityc2_range is not None:
    min_energy_densityc2, max_energy_densityc2 = args.central_energy_densityc2_range

    # check minimum
    min_pc2 = np.interp(min_energy_densityc2, energy_densityc2, pressurec2)
    if min_pc2 > min_central_pressurec2:
        if args.verbose:
            print('limitting central_pressurec2 >= %.6e based on min_energy_densityc2 = %.6e'%(min_pc2, min_energy_densityc2))
        min_central_pressurec2 = min_pc2

    # check maximum
    max_pc2 = np.interp(max_baryon_density, energy_densityc2, pressurec2)
    if max_pc2 < max_central_pressurec2:
        if args.verbose:
            print('limitting central_pressurec2 <= %.6e based on max_energy_densityc2 = %.6e'%(max_pc2, max_energy_densityc2))
        max_central_pressurec2 = max_pc2

### FIXME? add a sanity check that sound speed never vanishes (or becomes too small?)

### now compute the stellar sequence
if args.verbose:
    print('solving for sequence of stellar models with formalism=%s'%args.formalism)
central_pressurec2, macro, macro_cols = sequences.stellar_sequence(
    min_central_pressurec2,
    max_central_pressurec2,
    (pressurec2, energy_densityc2, baryon_density, cs2c2),
    min_num_models=args.min_num_models,
    interpolator_rtol=args.interpolator_rtol,
    integration_rtol=args.integration_rtol,
    formalism=args.formalism,
    verbose=args.Verbose,
)

if args.verbose:
    print('    evaluated %d stellar models'%len(central_pressurec2))

sequence, columns = sequences.append_central_values(
    central_pressurec2,
    pressurec2,
    data,
    cols,
    macro,
    macro_cols,
    central_eos_column=args.central_eos_column,
    central_column_template=args.central_column_template,
    verbose=args.verbose,
)

### write the output
if args.verbose:
    print('writing stellar sequence to: '+args.outpath)
io.write(args.outpath, sequence, columns)
