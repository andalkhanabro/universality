#!/usr/bin/env python

"""generate samples from a set of EOS (a process)
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os
import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality.utils import io
from universality.properties import samples

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

# required arguments
rgroup = parser.add_argument_group('required arguments')
rgroup.add_argument('inpath', type=str)
rgroup.add_argument('outpath', type=str)

rgroup.add_argument('reference', type=str,
    help='the reference column')
rgroup.add_argument('columns', nargs='+', type=str,
    help='columns to extract')

rgroup.add_argument('-r', '--reference-value', default=[], type=float, action='append',
    help='the reference values at which we extract values from the EOS parameters. \
DEFAULT=[]')
rgroup.add_argument('-R', '--reference-value-column', default=[], type=str, action='append',
    help='look up the reference value from this column in the input data')

rgroup.add_argument('--nearest-neighbor', default=False, action='store_true',
    help='if supplied, we take the nearest neighbor when looking up the sample instead of interpolation (which may fail if the curve is not monotonic)')

rgroup.add_argument('-c', '--copy-column', default=[], type=str, action='append',
    help='copy over the values from this column')

# verbosity arguments
vgroup = parser.add_argument_group('verbosity arguments')
vgroup.add_argument('-v', '--verbose', default=False, action='store_true')
vgroup.add_argument('-V', '--Verbose', default=False, action='store_true')

# samples arguments
sgroup = parser.add_argument_group('samples-specific argument')
sgroup.add_argument('--max-num-samples', default=io.DEFAULT_MAX_NUM_SAMPLES, type=int)

# lookup arguments
lgroup = parser.add_argument_group('look-up arguments')
lgroup.add_argument('--eos-column', default='EoS', type=str)
lgroup.add_argument('--eos-dir', default='.', type=str)
lgroup.add_argument('--eos-num-per-dir', default=1000, type=int,
    help='the number of samples per directory')
lgroup.add_argument('--eos-basename', default='draw-foo-%d.csv', type=str,
    help='a string into which the EOS number can be substituted when building filenames.')

args = parser.parse_args()

if (not args.reference_value) and (not args.reference_value_column):
    raise RuntimeError('must supply at least one --reference-value or --reference-value-column')

### finish parsing
Ncol = len(args.columns)
Nref = len(args.reference_value)+len(args.reference_value_column)
Nkeep = len(args.copy_column)
args.reference_value.sort()

if os.path.dirname(args.outpath) and (not os.path.exists(os.path.dirname(args.outpath))):
    os.makedirs(os.path.dirname(args.outpath))

args.verbose |= args.Verbose

#-------------------------------------------------

if args.verbose:
    print('reading samples from: '+args.inpath)
data, _ = io.load(args.inpath, [args.eos_column]+args.copy_column+args.reference_value_column, max_num_samples=args.max_num_samples)

ind = 1+Nkeep
ref = data[:,ind:] ### the columns from which we extract refernce values
keep = data[:,:ind+1] ### the stuff we want to transfer over to the final file
data = data[:,0]
N = len(data)

#------------------------

if args.verbose:
    print('extacting data at reference values')

ans = np.empty((N, Nkeep+Nref*Ncol), dtype=float)
ans[:,:Nkeep+1] = keep ### fill in existing data

path_template = os.path.join(args.eos_dir, 'DRAWmod%d'%args.eos_num_per_dir+'-%(moddraw)06d', args.eos_basename)

ans[:,Nkeep+1:] = samples.process2samples(
    data,
    path_template,
    args.eos_num_per_dir,
    args.reference,
    args.columns,
    static_x_test=args.reference_value,
    dynamic_x_test=ref,
    verbose=args.Verbose,
    nearest_neighbor=args.nearest_neighbor,
)

### set up output columns
outcols = [args.eos_column] + args.copy_columns
outcols += samples.output_columns(args.columns, args.reference, reference_values=args.reference_value, reference_value_columns=args.reference_value_column)

#------------------------

if args.verbose:
    print('writing samples to: '+args.outpath)
io.write(args.outpath, ans, outcols)
