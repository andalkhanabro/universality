#!/usr/bin/env python

__doc__ = "generate samples from a set of EOS (a process)"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os
import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality import utils
from universality import plot

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

# required arguments
rgroup = parser.add_argument_group('required arguments')
rgroup.add_argument('inpath', type=str)
rgroup.add_argument('outpath', type=str)

rgroup.add_argument('reference', type=str,
    help='the reference column')
rgroup.add_argument('columns', nargs='+', type=str,
    help='columns to extract')

rgroup.add_argument('-r', '--reference-value', required=True, default=[], type=float, action='append',
    help='the reference values at which we extract values from the EOS parameters. \
DEFAULT=[]')

rgroup.add_argument('-c', '--copy-column', default=[], type=str, action='append',
    help='copy over the values from this column')

# verbosity arguments
vgroup = parser.add_argument_group('verbosity arguments')
vgroup.add_argument('-v', '--verbose', default=False, action='store_true')
vgroup.add_argument('-V', '--Verbose', default=False, action='store_true')

# samples arguments
sgroup = parser.add_argument_group('samples-specific argument')
sgroup.add_argument('--max-num-samples', default=utils.DEFAULT_MAX_NUM_SAMPLES, type=int)

# lookup arguments
lgroup = parser.add_argument_group('look-up arguments')
lgroup.add_argument('--eos-column', default='EoS', type=str)
lgroup.add_argument('--eos-dir', default='.', type=str)
lgroup.add_argument('--eos-num-per-dir', default=1000, type=int,
    help='the number of samples per directory')
lgroup.add_argument('--eos-basename', default='draw-foo-%d.csv', type=str,
    help='a string into which the EOS number can be substituted when building filenames.')

args = parser.parse_args()

### finish parsing
Ncol = len(args.columns)
Nref = len(args.reference_value)
Nkeep = len(args.copy_column)
args.reference_value.sort()

if os.path.dirname(args.outpath) and (not os.path.exists(os.path.dirname(args.outpath))):
    os.makedirs(os.path.dirname(args.outpath))

args.verbose |= args.Verbose

#-------------------------------------------------

if args.verbose:
    print('reading samples from: '+args.inpath)
data, _ = utils.load(args.inpath, [args.eos_column]+args.copy_column, max_num_samples=args.max_num_samples)
keep = data[:,1:] ### the stuff we want to transfer over to the final file
data = data[:,0]
N = len(data)

#------------------------

if args.verbose:
    print('extacting data at reference values')

ans = np.empty((N, Nkeep+Nref*Ncol), dtype=float)
ans[:,:Nkeep] = keep ### fill in existing data

loadcolumns = [args.reference]+args.columns
refind = loadcolumns.index(args.reference)
path_template = os.path.join(args.eos_dir, 'DRAWmod%d'%args.eos_num_per_dir+'-%(moddraw)06d', args.eos_basename)

for i, eos in enumerate(data):
    path = path_template%{'moddraw':eos//args.eos_num_per_dir, 'draw':eos}
    if args.Verbose:
        print('    '+path)
    d, c = utils.load(path, loadcolumns)

    for j, column in enumerate(c[1:]):
        ans[i,Nkeep+j*Nref:Nkeep+(j+1)*Nref] = np.interp(args.reference_value, d[:,refind], d[:,loadcolumns.index(column)])

col_template = '%s(%s=%s)'
outcols = [col for col in args.copy_column]
for column in args.columns:
    outcols += [col_template%(column, args.reference, val) for val in args.reference_value]

#------------------------

if args.verbose:
    print('writing samples to: '+args.outpath)
np.savetxt(args.outpath, ans, comments='', delimiter=',', header=','.join(outcols))
