#!/usr/bin/env python

__doc__ = "a script that computes the prior weight based on a set of samples (and a few known priors), adding them to a CSV file so they can be properly accounted for within KDEs developed within, e.g., weigh-samples"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality import utils
from universality import priors

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('prior', type=str,
    help='the prior to be computed. Must be one of: %s'%(', '.join(priors.KNOWN_PRIORS)))
parser.add_argument('source', type=str,
    help='the CSV file for which the prior will be calculated for each sample')
parser.add_argument('output', default=None, type=str, 
    help='if not specified, will overwrite the source file')

parser.add_argument('-p', '--hyperparam', default=[], nargs=2, type=str, action='append',
    help='the value of hyperparamters. eg, "--hyperparam exp 2" for pareto distribution')
parser.add_argument('-c', '--column-name', default=[], nargs=2, type=str, action='append',
    help='a map from the column name in the CSV to the paramter we expted. eg, "--column-name param column"')

parser.add_argument('-v', '--verbose', default=False, action='store_true')

args = parser.parse_args()

if args.output is None:
    args.output = args.source

kwargs = dict()
kwargs.update(dict((p, float(v)) for p, v in args.hyperparam)) ### include any specified hyperparams
kwargs.update(dict(args.column_name)) ### include name mapping

#-------------------------------------------------

if args.verbose:
    print('reading source samples from: '+args.source)
data, columns = utils.load(args.source) ### read in all columns as-is

if args.verbose:
    print('computing prior weights with prior='+args.prior)
logweights = priors.logprior(args.prior, data, **kwargs)

if args.verbose:
    print('writing output samples to: '+args.output)

template = ','.join('%.9e' for _ in xrange(len(columns)+1))
with open(args.output, 'w') as file_obj:
    print >> file_obj, ','.join(columns+['logprior'])
    for sample, logweight in zip(data, logweights):
        print >> file_obj, template%tuple(list(sample)+[logweight])
