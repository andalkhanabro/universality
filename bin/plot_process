#!/usr/bin/env python

__doc__ = "generate plots of processes from CSV files which refer to EOS tables (other csv files)"
__usage__ = "plot_process [--options] samples.csv y-column x-column x-min x-max"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os
import numpy as np

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt

from optparse import OptionParser

### non-standard libraries
from universality import utils

#-------------------------------------------------

def quantile(x, quantiles, weights=None):
    if weights is None:
        return np.percentile(x, np.array(quantiles)*100)

    else:
        order = x.argsort()
        x = x[order]
        csum = np.cumsum(weights[order])
        return np.array([x[[csum<=q]][-1] for q in quantiles])

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__doc__)

parser.add_option('-v', '--verbose', default=False, action='store_true')

parser.add_option('', '--num-points', default=101, type='int',
    help='the number of interpolation points used when plotting')

parser.add_option('', '--logcolumn', default=[], type='string', action='append',
    help='convert the values read in for this column to natural log. \
Can be repeated to specify multiple columns. \
DEFAULT=[]')

parser.add_option('', '--eos-column', default='eos', type='string')
parser.add_option('', '--eos-dir', default='.', type='string')

parser.add_option('', '--weight-column', default=None, type='string',
    help='if provided, thie numerical values from this column will be used as weights in the KDE')
parser.add_option('', '--weight-column-is-log', default=False, action='store_true',
    help='if supplied, interpret the values in weight_column as log(weight), meaning we exponentiate them before using them in the KDE')

parser.add_option('', '--quantile', default=[], type='float', action='append',
    help='plot these quantiles. We plot the quantile specified along with 1-quantile. \
DEFAULT=[0.1]')
parser.add_option('', '--alpha', default=0.25, type='float', 
    help='DEFAULT=0.25')

parser.add_option('', '--ymin', default=None, type='float')
parser.add_option('', '--ymax', default=None, type='float')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

opts, args = parser.parse_args()
assert len(args)==5, 'please supply exactly 6 input argument\n%s'%__usage__
inpath, ycolumn, xcolumn, xmin, xmax = args
xmax = float(xmax)
xmin = float(xmin)

if opts.tag:
    opts.tag = "_"+opts.tag

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

if not opts.quantile:
    opts.quantile = [0.1]
opts.quantile.sort()

quantiles = []
for q in opts.quantile:
    quantiles += [q, (1-q)]

#-------------------------------------------------

if opts.verbose:
    print('reading samples from: '+inpath)
data, _ = utils.load(inpath, [opts.eos_column])
data = data[:,0]
N = len(data)

if opts.weight_column!=None:
    if opts.verbose:
        print('reading in non-trivial weights from: '+inpath)
    weights, _ = utils.load(inpath, [opts.weight_column])
    weights = weights.reshape((len(weights)))

    if opts.weight_column_is_log:
        weights = np.exp(weights-np.max(weights))
    weights /= np.sum(weights)

else:
    weights = np.ones(N, dtype='float')/N

#-----------------------

if opts.verbose:
    print('computing confidence intervals from %d samples'%len(data))
if xcolumn in opts.logcolumn:
    x_test = np.logspace(np.log10(xmin), np.log10(xmax), opts.num_points)
else:
    x_test = np.linspace(xmin, xmax, opts.num_points)

y_test = np.empty((N, opts.num_points), dtype='float')
for i, (eos, weight) in enumerate(zip(data, weights)): ### iterate over samples and compute weighted moments
    path = os.path.join(opts.eos_dir, 'draw_foo-%d.csv'%eos)
    if opts.verbose:
        print('    '+path)
    d, c = utils.load(path, [xcolumn, ycolumn])

    y_test[i] = np.interp(x_test, d[:,0], d[:,1])

### compute the quantiles
y = np.empty((len(quantiles), opts.num_points), dtype='float')
y_median = np.empty_like(x_test, dtype='float')
for i in xrange(opts.num_points):
    y[:,i] = quantile(y_test[:,i], quantiles, weights=weights)     ### compute quantiles
    y_median[i] = quantile(y_test[:,i], [0.5], weights=weights)[0] ### compute median

#------------------------

if opts.verbose:
    print('plotting')

fig = plt.figure()
ax = fig.gca()

for i in xrange(len(opts.quantile)): ### fill between pairs of quantiles
    ax.fill_between(x_test, y[2*i,:], y[2*i+1,:], alpha=opts.alpha, color='k')

ax.plot(x_test, y_median, color='k', alpha=1.0) ### plot the median

if xcolumn in opts.logcolumn:
    ax.set_xscale('log')

if ycolumn in opts.logcolumn:
    ax.set_yscale('log')

ax.grid(True, which='both')

ax.set_xlabel(xcolumn)
ax.set_ylabel(ycolumn)

ax.set_xlim(xmin=xmin, xmax=xmax)
if opts.ymin!=None:
    ax.set_ylim(ymin=opts.ymin)
if opts.ymax!=None:
    ax.set_ylim(ymax=opts.ymax)

figname = os.path.join(opts.output_dir, 'plot_process%s.png'%opts.tag)
if opts.verbose:
    print('saving: '+figname)
fig.savefig(figname)
plt.close(fig)
