#!/usr/bin/env python

__doc__ = "generate plots of processes from CSV files which refer to EOS tables (other csv files)"
__usage__ = "plot_process [--options] samples.csv y-column x-column x-min x-max"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os
import numpy as np

from collections import defaultdict

from optparse import OptionParser

### non-standard libraries
from universality import utils
from universality import plot

#-------------------------------------------------

def quantile(x, quantiles, weights=None):
    if weights is None:
        return np.percentile(x, np.array(quantiles)*100)

    else:
        order = x.argsort()
        x = x[order]
        csum = np.cumsum(weights[order])
        return np.array([x[[csum<=q]][-1] for q in quantiles])

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__doc__)

parser.add_option('-v', '--verbose', default=False, action='store_true')
parser.add_option('-V', '--Verbose', default=False, action='store_true')

parser.add_option('', '--num-points', default=101, type='int',
    help='the number of interpolation points used when plotting')

parser.add_option('', '--logcolumn', default=[], type='string', action='append',
    help='plot the corresponding column on a log scale. \
Can be repeated to specify multiple columns. \
DEFAULT=[]')

parser.add_option('', '--eos-column', default='eos', type='string')
parser.add_option('', '--eos-dir', default='.', type='string')
parser.add_option('', '--eos-basename', default='draw_foo-%d.csv', type='string',
    help='a string into which the EOS number can be substituted when building filenames. \
DEFAULT=draw_foo-%d.csv')

parser.add_option('--max-num-samples', default=utils.DEFAULT_MAX_NUM_SAMPLES, type='int')
parser.add_option('', '--weight-column', default=None, type='string',
    help='if provided, thie numerical values from this column will be used as weights in the KDE')
parser.add_option('', '--weight-column-is-log', default=False, action='store_true',
    help='if supplied, interpret the values in weight_column as log(weight), meaning we exponentiate them before using them in the KDE')

parser.add_option('', '--quantile', default=[], type='float', action='append',
    help='plot these quantiles. We plot the quantile specified along with 1-quantile. \
DEFAULT=[0.1]')
parser.add_option('', '--alpha', default=0.25, type='float', 
    help='DEFAULT=0.25')

parser.add_option('', '--ymin', default=None, type='float')
parser.add_option('', '--ymax', default=None, type='float')
parser.add_option('', '--res-ymin', default=None, type='float')
parser.add_option('', '--res-ymax', default=None, type='float')

parser.add_option('--x-label', default=None, type='string',
    help='override column name as the label')
parser.add_option('--y-label', default=None, type='string',
    help='override column name as the label')

parser.add_option('--reference', default=[], type='string', action='append',
    help='path to a reference EOS that will be plotted on top of the process. Can be repeated to specify multiple reference curves. \
The columns must be the same as those supplied in the input arguments. \
DEFAULT=[]')
parser.add_option('--reference-color', default=None, type='string')

parser.add_option('--signpost', nargs=2, default=[], type='string', action='append',
    help='add markers (vertical/horizontal lines) to denote specific values. e.g.: "baryon_density 2.7e14". Can be repeated')
parser.add_option('--signpost-color', default=plot.DEFAULT_TRUTH_COLOR, type='string')

parser.add_option('--residuals', default=False, action='store_true',
    help='if True, plot the residuals between the median of the process and the reference curves. Cannot be supplied simultanesoulsy with --ratios')
parser.add_option('--ratios', default=False, action='store_true',
    help='if supplied, plot the ratio of the values instead of the difference (--residuals). Cannot be supplied simulaneously with --residuals')

parser.add_option('--include-neff', default=False, action='store_true',
    help='include an estimate of the effective number of samples as a title')

parser.add_option('--figwidth', default=plot.DEFAULT_FIGWIDTH, type='float')
parser.add_option('--figheight', default=plot.DEFAULT_FIGHEIGHT, type='float')
parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')
parser.add_option('--figtype', default=[], type='string', action='append')
parser.add_option('--dpi', default=plot.DEFAULT_DPI, type='float')

opts, args = parser.parse_args()
assert len(args)==5, 'please supply exactly 5 input argument\n%s'%__usage__
inpath, ycolumn, xcolumn, xmin, xmax = args
xmax = float(xmax)
xmin = float(xmin)

if opts.residuals and opts.ratios:
    raise ValueError('please only supply either --residuals or --ratios')

if opts.tag:
    opts.tag = "_"+opts.tag

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

if not opts.figtype:
    opts.figtype = plot.DEFAULT_FIGTYPES

if not opts.quantile:
    opts.quantile = [0.1]
opts.quantile.sort()

quantiles = []
for q in opts.quantile:
    quantiles += [q, (1-q)]

signposts = defaultdict(list)
for key, value in opts.signpost:
    signposts[key].append(float(value))

opts.verbose |= opts.Verbose

#-------------------------------------------------

if opts.verbose:
    print('reading samples from: '+inpath)
data, _ = utils.load(inpath, [opts.eos_column], max_num_samples=opts.max_num_samples)

if opts.weight_column!=None:
    if opts.verbose:
        print('reading in non-trivial weights from: '+inpath)
    weights, _ = utils.load(inpath, [opts.weight_column], max_num_samples=opts.max_num_samples)
    weights = weights.reshape((len(weights)))

    if opts.weight_column_is_log:
        weights = np.exp(weights-np.max(weights))
    weights /= np.sum(weights)

else:
    N = len(data)
    weights = np.ones(N, dtype='float')/N

### prune samples to get rid of vanishing weights
data, weights = utils.prune(data, [(-np.infty, +np.infty)], weights=weights)
data = data[:,0]
N = len(data)

#-----------------------

if opts.verbose:
    print('computing confidence intervals from %d samples'%len(data))
if xcolumn in opts.logcolumn:
    x_test = np.logspace(np.log10(xmin), np.log10(xmax), opts.num_points)
else:
    x_test = np.linspace(xmin, xmax, opts.num_points)

y_test = np.empty((N, opts.num_points), dtype='float')
for i, (eos, weight) in enumerate(zip(data, weights)): ### iterate over samples and compute weighted moments
    path = os.path.join(opts.eos_dir, opts.eos_basename%eos)
    if opts.Verbose:
        print('    '+path)
    d, c = utils.load(path, [xcolumn, ycolumn])

    y_test[i] = np.interp(x_test, d[:,0], d[:,1])

### compute the quantiles
y = np.empty((len(quantiles), opts.num_points), dtype='float')
y_median = np.empty_like(x_test, dtype='float')
for i in xrange(opts.num_points):
    y[:,i] = quantile(y_test[:,i], quantiles, weights=weights)     ### compute quantiles
    y_median[i] = quantile(y_test[:,i], [0.5], weights=weights)[0] ### compute median

#------------------------

reference = []
if opts.reference:
    for path in opts.reference:
        if opts.verbose:
            print('reading reference curve from: '+path)
        reference.append(utils.load(path, [xcolumn, ycolumn])[0]) ### just grab the data, not the column names

#------------------------

if opts.verbose:
    print('plotting')

# set up figure object
fig = plot.plt.figure(figsize=(opts.figwidth, opts.figheight))
if opts.residuals or opts.ratios:
    ax = fig.add_axes(plot.MAIN_AXES_POSITION)
    ax_res = fig.add_axes(plot.RESIDUAL_AXES_POSITION)
else:
    ax = fig.gca()

if opts.residuals or opts.ratios:
    if len(reference)==1: ### use the one reference curve a the baseline
        y_reference = np.interp(x_test, reference[0][:,0], reference[0][:,1])
        y_reference_label = 'reference'
    else:
        y_reference = y_median
        y_reference_label = 'median'

# add quantiles
for i in xrange(len(opts.quantile)): ### fill between pairs of quantiles
    ax.fill_between(x_test, y[2*i,:], y[2*i+1,:], alpha=opts.alpha, color='k')
    if opts.residuals:
        ax_res.fill_between(x_test, y[2*i,:]-y_reference, y[2*i+1,:]-y_reference, alpha=opts.alpha, color='k')
    elif opts.ratios:
        ax_res.fill_between(x_test, y[2*i,:]/y_reference, y[2*i+1,:]/y_reference, alpha=opts.alpha, color='k')

# add median
ax.plot(x_test, y_median, color='k', alpha=1.0) ### plot the median
if opts.residuals:
    ax_res.plot(x_test, y_median-y_reference, color='k', alpha=1.0)
elif opts.ratios:
    ax_res.plot(x_test, y_median/y_reference, color='k', alpha=1.0)

# add reference curves
for curve in reference:
    x = curve[:,0]
    y = curve[:,1]
    if opts.reference_color:
        color = ax.plot(x, y, color=opts.reference_color)[0].get_color()
    else:
        color = ax.plot(x, y)[0].get_color()

    if opts.residuals:
        ax_res.plot(x_test, np.interp(x_test, x, y)-y_reference, color=color)
    elif opts.ratios:
        ax_res.plot(x_test, np.interp(x_test, x, y)/y_reference, color=color)

# scaling, etc
if xcolumn in opts.logcolumn:
    ax.set_xscale('log')

if ycolumn in opts.logcolumn:
    ax.set_yscale('log')
    if opts.ratios:
        ax_res.set_yscale('log')

ax.grid(True, which='both')
if opts.residuals or opts.ratios:
    ax_res.grid(True, which='both')

# set limits
ax.set_xlim(xmin=xmin, xmax=xmax)
if opts.residuals or opts.ratios:
    ax_res.set_xscale(ax.get_xscale())
    ax_res.set_xlim(ax.get_xlim())

if opts.ymin!=None:
    ax.set_ylim(ymin=opts.ymin)
if opts.ymax!=None:
    ax.set_ylim(ymax=opts.ymax)

if opts.residuals or opts.ratios:
    if opts.res_ymin!=None:
        ax_res.set_ylim(ymin=opts.res_ymin)
    if opts.res_ymax!=None:
        ax_res.set_ylim(ymax=opts.res_ymax)

# add signposts
ylim = ax.get_ylim()
for value in signposts[xcolumn]:
    ax.plot([value]*2, ylim, color=opts.signpost_color)
ax.set_ylim(ylim)

xlim = ax.get_xlim()
for value in signposts[ycolumn]:
    ax.plot(xlim, [value]*2, color=opts.signpost_color)
ax.set_xlim(xlim)

if opts.residuals or opts.ratios:
    ylim = ax_res.get_ylim()
    for value in signposts[xcolumn]:
        ax_res.plot([value]*2, ylim, color=opts.signpost_color)
    ax_res.set_ylim(ylim)

    xlim = ax_res.get_xlim()
    for value in signposts[ycolumn]:
        x = np.linspace(xlim[0], xlim[1], opts.num_points)
        if opts.residuals:
            y = value-np.ones_like(y-median)
        else: 
            y = value/np.ones_like(y_median)
        ax_res.plot(x, y, color=opts.signpost_color)
    ax_res.set_xlim(xlim)

# add labels
if opts.include_neff:
    ax.set_title("$N_\mathrm{eff} = %.1f$"%utils.neff(weights))

ax.set_ylabel(opts.y_label if opts.y_label is not None else ycolumn)
if opts.residuals or opts.ratios:
    plot.plt.setp(ax.get_xticklabels(), visible=False)
    ax_res.set_xlabel(opts.x_label if opts.x_label is not None else xcolumn)
    if opts.residuals:
        ax_res.set_ylabel('%s - %s'%(opts.y_label if opts.y_label is not None else ycolumn, y_reference_label))
    if opts.ratios:
        ax_res.set_ylabel('%s/%s'%(opts.y_label if opts.y_label is not None else ycolumn, y_reference_label))
else:
    ax.set_xlabel(opts.x_label if opts.x_label is not None else xcolumn)

# save
plot.save('plot_process%s'%opts.tag, fig, directory=opts.output_dir, figtypes=opts.figtype, dpi=opts.dpi, verbose=opts.verbose)
plot.plt.close(fig)
