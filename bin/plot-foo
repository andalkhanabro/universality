#!/usr/bin/env python

__doc__ = "a script that plots the result of gpr_foo"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os
import pickle

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality import utils
from universality import gaussianprocess as gp
from universality import plot

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

### required options
rgroup = parser.add_argument_group('required arguments')
rgroup.add_argument('xcolumn', type=str)
rgroup.add_argument('ycolumn', type=str)
rgroup.add_argument('pklpath', type=str)
rgroup.add_argument('eospaths', nargs='+', type=str)

### verbosity options
vgroup = parser.add_argument_group('verbosity options')
vgroup.add_argument('-v', '--verbose', default=False, action='store_true')

### data pre-conditioning
pgroup = parser.add_argument_group('pre-conditioning options')
pgroup.add_argument('--log-x', default=False, action='store_true',
    help='fit using log(x_column) instead of x_column')
pgroup.add_argument('--log-y', default=False, action='store_true',
    help='fit using log(y_column) instead of y_column')

pgroup.add_argument('--poly-degree', default=None, type=int,
    help='the order of the polynomial fit used to model data before plotting. \
This essentially serves as the "mean" of the fit about which the GP models variations. \
DEFAULT=No fit applied')

pgroup.add_argument('--min-x', default=None, type=float,
    help='only plot data above this value.')
pgroup.add_argument('--max-x', default=None, type=float,
    help='only plot data below this value.')

pgroup.add_argument('--min-y', default=None, type=float,
    help='only plot data above this value.')
pgroup.add_argument('--max-y', default=None, type=float,
    help='only plot data below this value.')

### output formatting
ogroup = parser.add_argument_group('output options')
ogroup.add_argument('-o', '--output-dir', default='.', type=str)
ogroup.add_argument('-t', '--tag', default='', type=str)
ogroup.add_argument('--figtype', default=[], type=str, action='append')
ogroup.add_argument('--dpi', default=plot.DEFAULT_DPI, type=float)

args = parser.parse_args()

xcol, ycol = columns = args.xcolumn, args.ycolumn

if not os.path.exists(args.output_dir):
    os.makedirs(args.output_dir)

if args.tag:
    args.tag = "_"+args.tag

if not args.figtype:
    args.figtype = plot.DEFAULT_FIGTYPES

#-------------------------------------------------

### set up figure
fig = plot.plt.figure()
ax = fig.gca()

#------------------------

### read in process from pkl
if args.verbose:
    print('reading process from: '+args.pklpath)
with open(args.pklpath, 'r') as file_obj:
    labels = pickle.load(file_obj)
    Xtest = pickle.load(file_obj)
    mean = pickle.load(file_obj)
    cov = pickle.load(file_obj)
    std = np.diag(cov)**0.5

# sanity check data for consistency
if args.log_x:
    assert labels[0] == 'log'+xcol
else:
    assert labels[0] == xcol

if args.log_y:
    assert labels[1] == 'log'+ycol
else:
    assert labels[1] == ycol

# precondition data if needed
if args.poly_degree!=None:
    poly = np.polyfit(Xtest, mean, args.poly_degree)
    mean_fit = np.zeros_like(mean, dtype='float')
    for i in xrange(args.poly_degree+1):
        mean_fit += poly[-1-i]*Xtest**i
else:
    mean_fit = np.zeros_like(mean)

# actually plot the process
if args.verbose:
    print('plotting process')
ax.fill_between(Xtest, mean-std-mean_fit, mean+std-mean_fit, color='k', alpha=0.25)
ax.plot(Xtest, mean-mean_fit, color='k')

#------------------------

### read in EOS data
for path in args.eospaths:
    if args.verbose:
        print('reading: '+path)
    data, _ = utils.load(path, columns)
    x = data[:,0]
    y = data[:,1]

    truth = np.ones_like(x, dtype=bool)
    if args.min_x!=None:
        truth *= args.min_x<=x    
    if args.max_x!=None:
        truth *= x<=args.max_x
    if args.min_y!=None:
        truth *= args.min_y<=y
    if args.max_y!=None:
        truth *= y<=args.max_y

    if np.any(truth):
        x = x[truth]
        y = y[truth]
    else:
        if args.verbose:
            print('    no data found within requested bounds! skipping this eos')
        continue ### skip this eos

    ### transform data as needed
    if args.verbose:
        print('precondidtioning data')

    # take logs of data if requested
    if args.log_x:
        x = np.log(x)
    if args.log_y:
        y = np.log(y)

    if args.poly_degree!=None:
        y_fit = np.zeros_like(y, dtype='float')
        for i in xrange(args.poly_degree+1):
            y_fit += poly[-1-i]*x**i
    else:
        y_fit = np.zeros_like(y)

    # actually plot the data
    ax.plot(x, y-y_fit, '.-', label=os.path.basename(path)[:-4])

#------------------------

### decorate 
ax.set_xlabel(labels[0])
if args.poly_degree!=None:
    ax.set_ylabel(labels[1]+' - poly(%d)'%args.poly_degree)
else:
    ax.set_ylabel(labels[1])

ax.grid(True, which='both')

if args.min_x!=None:
    ax.set_xlim(xmin=np.log(args.min_x) if args.log_x else args.min_x)
if args.max_x!=None:
    ax.set_xlim(xmax=np.log(args.max_x) if args.log_x else args.max_x)
if args.min_y!=None:
    ax.set_ylim(ymin=np.log(args.min_y) if args.log_y else args.min_y)
if args.max_y!=None:
    ax.set_ylim(ymax=np.log(args.max_y) if args.log_y else args.max_y)

#ax.legend(loc='best')

### save
plot.save('plot_foo-%s-%s%s'%tuple(labels+[args.tag]), fig, directory=args.output_dir, figtypes=args.figtype, dpi=args.dpi, verbose=args.verbose)
plot.plt.close(fig)
