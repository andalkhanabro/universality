#!/usr/bin/env python

__doc__ = "a script that plots the result of gpr_*"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os
import pickle

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality import utils
from universality import gaussianprocess as gp
from universality import plot

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

### required options
rgroup = parser.add_argument_group('required arguments')
rgroup.add_argument('hdf5path', type=str)

### verbosity options
vgroup = parser.add_argument_group('verbosity options')
vgroup.add_argument('-v', '--verbose', default=False, action='store_true')

### reference options
dgroup = parser.add_argument_group('reference arguments')
dgroup.add_argument('--csvpaths', nargs='+', type=str)
dgroup.add_argument('--xcolumn', type=str, default=None)
dgroup.add_argument('--ycolumn', type=str, default=None)
dgroup.add_argument('--logcolumn', default=[], type=str, action='append')

### plotting arguments
pgroup = parser.add_argument_group('plotting arguments')
pgroup.add_argument('--level', default=[], type=float, action='append',
    help='the confidence level to use when plotting marginal uncertainty. \
Can be repeated to specify more than one confidence level.')

pgroup.add_argument('--figwidth', default=plot.DEFAULT_FIGWIDTH, type=float)
pgroup.add_argument('--figheight', default=plot.DEFAULT_FIGHEIGHT, type=float)

pgroup.add_argument('--xlabel', default=None, type=str,
    help='if supplied, will override what is in the hdf5 model')
pgroup.add_argument('--ylabel', default=None, type=str,
    help='if supplied, will override what is in the hdf5 model')

pgroup.add_argument('--min-x', default=None, type=float,
    help='only plot data above this value.')
pgroup.add_argument('--max-x', default=None, type=float,
    help='only plot data below this value.')

pgroup.add_argument('--min-y', default=None, type=float,
    help='only plot data above this value.')
pgroup.add_argument('--max-y', default=None, type=float,
    help='only plot data below this value.')

### output formatting
ogroup = parser.add_argument_group('output options')
ogroup.add_argument('-o', '--output-dir', default='.', type=str)
ogroup.add_argument('-t', '--tag', default='', type=str)
ogroup.add_argument('--figtype', default=[], type=str, action='append')
ogroup.add_argument('--dpi', default=plot.DEFAULT_DPI, type=float)

args = parser.parse_args()

if args.csvpaths:
    assert args.xcolumn is not None, 'must supply --xcolumn with csvpaths'
    assert args.ycolumn is not None, 'must supply --ycolumn with csvpaths'
    columns = args.xcolumn, args.ycolumn

if not os.path.exists(args.output_dir):
    os.makedirs(args.output_dir)

if args.tag:
    args.tag = "_"+args.tag

if not args.figtype:
    args.figtype = plot.DEFAULT_FIGTYPES

if not args.level:
    args.level = plot.DEFAULT_LEVELS

#-------------------------------------------------

### read in process from pkl
if args.verbose:
    print('reading process from: '+args.hdf5path)
model = gp.hdf5load(args.hdf5path)

# actually plot the process
if args.verbose:
    print('plotting process')
figtup = plot.overlay_model(
    model,
    levels=args.level,
    xlabel=args.xlabel,
    ylabel=args.ylabel,
    figwidth=args.figwidth,
    figheight=args.figheight,
)

#------------------------

### read in CSV data
if args.csvpaths:
    curves = []
    for path in args.csvpaths:
        if args.verbose:
            print('loading csv from: '+path)
        data, _ = utils.load(path, columns)
        x = data[:,0]
        y = data[:,1]

        # take logs of data if requested
        if args.log_x:
            x = np.log(x)
        if args.log_y:
            y = np.log(y)

        curves.append((x, y, os.path.basename(path)[:-4]))

    # actually plot the curves
    if args.verbose:
        print('plotting csv data')
    figtup = plot.overlay(curves, figtup=figtup, xlabel=args.xlabel, ylabel=args.ylabel)

#------------------------

### decorate 
fig = figtup[0]
fig.suptitle(os.path.basename(args.hdf5path)[:-5])

for ax in figtup[1:]:
    ax.grid(True, which='both')

    if args.min_x!=None:
        ax.set_xlim(xmin=np.log(args.min_x) if args.log_x else args.min_x)
    if args.max_x!=None:
        ax.set_xlim(xmax=np.log(args.max_x) if args.log_x else args.max_x)

ax = figtup[1]
if args.min_y!=None:
    ax.set_ylim(ymin=np.log(args.min_y) if args.log_y else args.min_y)
if args.max_y!=None:
    ax.set_ylim(ymax=np.log(args.max_y) if args.log_y else args.max_y)

if args.csvpaths:
    ax.legend(loc='best')

### save
plot.save('plot_gpr%s'%args.tag, fig, directory=args.output_dir, figtypes=args.figtype, dpi=args.dpi, verbose=args.verbose)
plot.plt.close(fig)
