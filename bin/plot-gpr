#!/usr/bin/env python

__doc__ = "a script that plots the result of gpr_*"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os
import pickle

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality import utils
from universality import gaussianprocess as gp
from universality import plot

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

### required options
rgroup = parser.add_argument_group('required arguments')
rgroup.add_argument('label,hdf5path', type=str, nargs='+')

### verbosity options
vgroup = parser.add_argument_group('verbosity options')
vgroup.add_argument('-v', '--verbose', default=False, action='store_true')

### reference options
dgroup = parser.add_argument_group('reference arguments')
dgroup.add_argument('--csvpaths', nargs='+', type=str)
dgroup.add_argument('--xcolumn', type=str, default=None)
dgroup.add_argument('--ycolumn', type=str, default=None)
dgroup.add_argument('--logcolumn', default=[], type=str, action='append')

### plotting arguments
pgroup = parser.add_argument_group('plotting arguments')
pgroup.add_argument('--level', default=[], type=float, action='append',
    help='the confidence level to use when plotting marginal uncertainty. \
Can be repeated to specify more than one confidence level.')

pgroup.add_argument('--gpr-color', default=[], nargs=2, type=str, action='append',
    help='specify the color for each gpr. Can be repeated to specify separate colors for each hdf5path. eg, "--gpr-color label b"')
pgroup.add_argument('--gpr-alpha', default=[], nargs=2, type=str, action='append',
    help='specify the alpha for each gpr. Can be repeated to specify separate colors for each hdf5path. eg, "--gpr-alpha label 0.5"')

pgroup.add_argument('--csv-color', default=plot.DEFAULT_COLOR2, type=str)
pgroup.add_argument('--csv-alpha', default=plot.DEFAULT_ALPHA, type=float)

pgroup.add_argument('--figwidth', default=plot.DEFAULT_FIGWIDTH, type=float)
pgroup.add_argument('--figheight', default=plot.DEFAULT_FIGHEIGHT, type=float)

pgroup.add_argument('--xlabel', default=None, type=str,
    help='if supplied, will override what is in the hdf5 model')
pgroup.add_argument('--ylabel', default=None, type=str,
    help='if supplied, will override what is in the hdf5 model')

pgroup.add_argument('--min-x', default=None, type=float,
    help='only plot data above this value.')
pgroup.add_argument('--max-x', default=None, type=float,
    help='only plot data below this value.')

pgroup.add_argument('--min-y', default=None, type=float,
    help='only plot data above this value.')
pgroup.add_argument('--max-y', default=None, type=float,
    help='only plot data below this value.')

pgroup.add_argument('--title', default=None, type=str,
    help='include this string as the title of the plot')
pgroup.add_argument('--grid', default=False, action='store_true')
pgroup.add_argument('--legend', default=False, action='store_true')

### output formatting
ogroup = parser.add_argument_group('output options')
ogroup.add_argument('-o', '--output-dir', default='.', type=str)
ogroup.add_argument('-t', '--tag', default='', type=str)
ogroup.add_argument('--figtype', default=[], type=str, action='append')
ogroup.add_argument('--dpi', default=plot.DEFAULT_DPI, type=float)

args = parser.parse_args()

if args.csvpaths:
    assert args.xcolumn is not None, 'must supply --xcolumn with csvpaths'
    assert args.ycolumn is not None, 'must supply --ycolumn with csvpaths'
    columns = args.xcolumn, args.ycolumn

if not os.path.exists(args.output_dir):
    os.makedirs(args.output_dir)

if args.tag:
    args.tag = "_"+args.tag

if not args.figtype:
    args.figtype = plot.DEFAULT_FIGTYPES

if not args.level:
    args.level = plot.DEFAULT_LEVELS

args.gpr_color = dict(args.gpr_color)
args.gpr_alpha = dict((a,float(b)) for a, b in args.gpr_alpha)

#-------------------------------------------------

### read in process from pkl
figtup = None
for hdf5path in args.__dict__['label,hdf5path']: ### access it in this way because I'm stubborn and want a comma in my variable name
    label, hdf5path = hdf5path.split(',')
    if args.verbose:
        print('reading process from: '+hdf5path)
    model = gp.hdf5load(hdf5path)

    # actually plot the process
    if args.verbose:
        print('plotting process')
    figtup = plot.overlay_model(
        model,
        color=args.gpr_color.get(label, plot.DEFAULT_COLOR1),
        alpha=args.gpr_alpha.get(label, plot.DEFAULT_ALPHA),
        levels=args.level,
        xlabel=args.xlabel,
        ylabel=args.ylabel,
        label=label,
        figwidth=args.figwidth,
        figheight=args.figheight,
        figtup=figtup,
    )

#------------------------

### read in CSV data
if args.csvpaths:
    curves = []
    for path in args.csvpaths:
        if args.verbose:
            print('loading csv from: '+path)
        data, _ = utils.load(path, columns, logcolumns=args.logcolumn)
        x = data[:,0]
        y = data[:,1]
        curves.append((x, y, os.path.basename(path)[:-4]))

    # actually plot the curves
    if args.verbose:
        print('plotting csv data')
    figtup = plot.overlay(
        curves,
        figtup=figtup,
        xlabel=args.xlabel,
        ylabel=args.ylabel,
        colors=[args.csv_color]*len(curves),
        alphas=[args.csv_alpha]*len(curves),
    )

#------------------------

### decorate 
fig = figtup[0]
if args.title:
    fig.suptitle(args.title)

for ax in figtup[1:]:
    ax.grid(args.grid, which='both')

    if args.min_x!=None:
        ax.set_xlim(xmin=args.min_x)
    if args.max_x!=None:
        ax.set_xlim(xmax=args.max_x)

ax = figtup[1]
if args.min_y!=None:
    ax.set_ylim(ymin=args.min_y)
if args.max_y!=None:
    ax.set_ylim(ymax=args.max_y)

if args.legend:
    ax.legend(loc='best')

### save
plot.save('plot_gpr%s'%args.tag, fig, directory=args.output_dir, figtypes=args.figtype, dpi=args.dpi, verbose=args.verbose)
plot.close(fig)
