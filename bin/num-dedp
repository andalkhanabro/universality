#!/usr/bin/env python

__doc__ = 'use basic numerical differentiation to infer the values of the derivatives at the evaulation points'
__author__ = 'reed.essick@ligo.org'

#-------------------------------------------------

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality import utils
from universality import gaussianprocess as gp

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('eospath', type=str)
parser.add_argument('outpath', type=str, default=None)

parser.add_argument('-v', '--verbose', default=False, action='store_true')

opts, args = parser.parse_args()

if args.outpath is None:
    args.outpath = args.eospath

#-------------------------------------------------

### read in existing data
if opts.verbose:
    print('reading: '+args.eospath)
data, columns = utils.load(args.eospath)

e = data[:,columns.index('energy_densityc2')]
p = data[:,columns.index('pressurec2')]

#------------------------

### numerically approx the derivative
if opts.verbose:
    print('computing the numerical derivative')
dedp = gp.num_dfdx(p, e) # delegate for convenience

#------------------------

### write out the result
if opts.verbose:
    print('writing: '+args.outpath)
with open(args.outpath, 'w') as obj:
    print >> obj, ','.join(columns+['denergy_densitydpressure'])
    for i in xrange(N):
        print >> obj, ','.join('%9e'%_ for _ in list(data[i,:])+[dedp[i]])
