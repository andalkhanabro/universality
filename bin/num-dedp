#!/usr/bin/env python

"""use basic numerical differentiation to infer the values of the derivatives at the evaulation points
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality.utils import io
from universality import gaussianprocess as gp

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('eospath', type=str)
parser.add_argument('outpath', type=str, default=None)

parser.add_argument('-v', '--verbose', default=False, action='store_true')

opts, args = parser.parse_args()

if args.outpath is None:
    args.outpath = args.eospath

#-------------------------------------------------

### read in existing data
if opts.verbose:
    print('reading: '+args.eospath)
data, columns = io.load(args.eospath)

e = data[:,columns.index('energy_densityc2')]
p = data[:,columns.index('pressurec2')]

#------------------------

### numerically approx the derivative
if opts.verbose:
    print('computing the numerical derivative')
dedp = gp.num_dfdx(p, e) # delegate for convenience

#------------------------

### write out the result
if opts.verbose:
    print('writing: '+args.outpath)
atad = np.empty((len(data), len(columns)+1), dtype=float)
atad[:,:-1] = data
atad[:,-1] = dedp
io.write(args.outpath, atad, columns+['denergy_densitydpressure'])
