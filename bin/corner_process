#!/usr/bin/env python

__doc__ = "generate plots of processes from CSV files which refer to EOS tables (other csv files) as a corner plot at a few reference points"
__usage__ = "corner_process [--options] samples.csv reference_column column [column column ...]"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os
import numpy as np

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt

from optparse import OptionParser

### non-standard libraries
from universality import utils

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__doc__)

parser.add_option('-v', '--verbose', default=False, action='store_true')

parser.add_option('', '--logcolumn', default=[], type='string', action='append',
    help='convert the values read in for this column to natural log. \
Can be repeated to specify multiple columns. \
DEFAULT=[]')

parser.add_option('', '--weight-column', default=None, type='string',
    help='if provided, thie numerical values from this column will be used as weights in the KDE')
parser.add_option('', '--weight-column-is-log', default=False, action='store_true',
    help='if supplied, interpret the values in weight_column as log(weight), meaning we exponentiate them before using them in the KDE')

parser.add_option('', '--reference-value', default=[], type='float', action='append',
    help='the reference values at which we extract values from the EOS parameters. \
DEFAULT=[]')

parser.add_option('', '--eos-column', default='eos', type='string')
parser.add_option('', '--eos-dir', default='.', type='string')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

opts, args = parser.parse_args()

assert len(opts.reference_value), 'please supply at least one --reference-value\n%s'%__usage__
opts.reference_value.sort()

assert len(args)>2, 'please supply at least 3 input argument\n%s'%__usage__
inpath, reference = args[:2]
columns = args[2:]

if opts.tag:
    opts.tag = "_"+opts.tag

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)


#-------------------------------------------------

if opts.verbose:
    print('reading samples from: '+inpath)
data, cols = utils.load(inpath, [opts.eos_column])
N = len(data)

if opts.weight_column!=None:
    if opts.verbose:
        print('reading in non-trivial weights from: '+inpath)
    weights, _ = utils.load(inpath, [opts.weight_column])
    weights = weights.reshape((len(weights)))

    if opts.weight_column_is_log:
        weights = np.exp(weights-np.max(weights))
    weights /= np.sum(weights)

else:
    weights = np.ones(N, dtype='float')/N

#------------------------

if opts.verbose:
    print('extacting data at reference values')
Ncol = len(columns)
Nref = len(reference_value)
data = np.empty((N, Nref*Ncol), dtype='float')

loadcolumns = set([reference]+columns)
for i, eos in enumerate(data[opts.eos_columns]):
    path = os.path.join(opts.eos_dir, 'draw_foo-%s.csv'%eos)
    if opts.verbose:
        print('    '+path)
    d, c = utils.load(path, loadcolumns, logcolumns=opts.logcolumn)

    for j, column in enumerate(c[1:]):
        data[i,j*Ncol:(j+1)*Ncol] = np.interp(opts.reference_value, d[opts.reference_value], d[column])

#-----------------------

if opts.verbose:
    print('plotting')

labels = []
for column in enumerate(cols):
    labels += [column+'(%s=%.3e)'%(reference, value) for value in opts.reference_value]

fig = corner.corner(
    data,
    labels=labels,
    weights=weights,
)

figname = os.path.join(opts.output_dir, 'corner_process%s.png'%opts.tag)
if opts.verbose:
    print('saving: '+figname)
fig.savefig(figname)
plt.close(fig)
