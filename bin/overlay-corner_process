#!/usr/bin/env python

__doc__ = "generate plots of processes from CSV files which refer to EOS tables (other csv files) as a corner plot at a few reference points"
__usage__ = "corner_process [--options] label1,samples1.csv label2,samples2.csv reference_column column [column column ...]"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os
import numpy as np

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt

import corner

from optparse import OptionParser

### non-standard libraries
from universality import utils

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__doc__)

parser.add_option('-v', '--verbose', default=False, action='store_true')
parser.add_option('-V', '--Verbose', default=False, action='store_true')

parser.add_option('', '--logcolumn', default=[], type='string', action='append',
    help='convert the values read in for this column to natural log. \
Can be repeated to specify multiple columns. \
DEFAULT=[]')

parser.add_option('', '--weight1-column', default=None, type='string',
    help='if provided, thie numerical values from this column will be used as weights in the KDE')
parser.add_option('', '--weight1-column-is-log', default=False, action='store_true',
    help='if supplied, interpret the values in weight_column as log(weight), meaning we exponentiate them before using them in the KDE')

parser.add_option('', '--weight2-column', default=None, type='string',
    help='if provided, thie numerical values from this column will be used as weights in the KDE')
parser.add_option('', '--weight2-column-is-log', default=False, action='store_true',
    help='if supplied, interpret the values in weight_column as log(weight), meaning we exponentiate them before using them in the KDE')

parser.add_option('-r', '--reference-value', default=[], type='float', action='append',
    help='the reference values at which we extract values from the EOS parameters. \
DEFAULT=[]')

parser.add_option('', '--eos1-column', default='eos', type='string')
parser.add_option('', '--eos1-dir', default='.', type='string')

parser.add_option('', '--eos2-column', default='eos', type='string')
parser.add_option('', '--eos2-dir', default='.', type='string')

parser.add_option('', '--color1', default='b', type='string')
parser.add_option('', '--color2', default='r', type='string')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

opts, args = parser.parse_args()

assert len(opts.reference_value), 'please supply at least one --reference-value\n%s'%__usage__
opts.reference_value.sort()

assert len(args)>3, 'please supply at least 4 input argument\n%s'%__usage__
inpath1, inpath2, reference = args[:3]
label1, inpath1 = inpath1.split(',')
label2, inpath2 = inpath2.split(',')
columns = args[3:]

if opts.tag:
    opts.tag = "_"+opts.tag

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

opts.verbose |= opts.Verbose

#-------------------------------------------------

if opts.verbose:
    print('reading samples for %s from: %s'%(label1, inpath1))
data1, _ = utils.load(inpath1, [opts.eos1_column])
data1 = data1[:,0]
N1 = len(data1)

if opts.weight1_column!=None:
    if opts.verbose:
        print('reading in non-trivial weights for %s from: %s'%(label1, inpath1))
    weights1, _ = utils.load(inpath1, [opts.weight1_column])
    weights1 = weights1.reshape((len(weights1)))

    if opts.weight1_column_is_log:
        weights1 = np.exp(weights1-np.max(weights1))
    weights1 /= np.sum(weights1)

else:
    weights1 = np.ones(N1, dtype='float')/N1

truth = weights1 > 0
Neff1 = np.exp(-np.sum(weights1[truth]*np.log(weights1[truth])))

if opts.verbose:
    print('reading samples for %s from: %s'%(label2, inpath2))
data2, _ = utils.load(inpath2, [opts.eos2_column])
data2 = data2[:,0]
N2 = len(data2)

if opts.weight2_column!=None:
    if opts.verbose:
        print('reading in non-trivial weights for %s from: %s'%(label2, inpath2))
    weights2, _ = utils.load(inpath2, [opts.weight2_column])
    weights2 = weights2.reshape((len(weights2)))

    if opts.weight2_column_is_log:
        weights2 = np.exp(weights2-np.max(weights2))
    weights2 /= np.sum(weights2)

else:
    weights2 = np.ones(N2, dtype='float')/N2

truth = weights2 > 0
Neff2 = np.exp(-np.sum(weights2[truth]*np.log(weights2[truth])))

#------------------------

if opts.verbose:
    print('extacting data at reference values for '+label1)
Ncol = len(columns)
Nref = len(opts.reference_value)

loadcolumns = [reference]+columns
refind = loadcolumns.index(reference)

ans1 = np.empty((N1, Nref*Ncol), dtype='float')
for i, eos in enumerate(data1):
    path = os.path.join(opts.eos1_dir, 'draw_foo-%d.csv'%eos)
    if opts.Verbose:
        print('    '+path)
    d, c = utils.load(path, loadcolumns)

    for j, column in enumerate(c[1:]):
        ans1[i,j*Nref:(j+1)*Nref] = np.interp(opts.reference_value, d[:,refind], d[:,loadcolumns.index(column)])

ans2 = np.empty((N2, Nref*Ncol), dtype='float')
for i, eos in enumerate(data2):
    path = os.path.join(opts.eos2_dir, 'draw_foo-%d.csv'%eos)
    if opts.Verbose:
        print('    '+path)
    d, c = utils.load(path, loadcolumns)

    for j, column in enumerate(c[1:]):
        ans2[i,j*Nref:(j+1)*Nref] = np.interp(opts.reference_value, d[:,refind], d[:,loadcolumns.index(column)])

#-----------------------

if opts.verbose:
    print('plotting')

### build labels and take logs as needed
labels = []
for i, column in enumerate(columns):
    if column in opts.logcolumn:
        labels += ['log('+column+')\n(%s=%.3e)'%(reference, value) for value in opts.reference_value]
        ans1[:,i*Nref:(i+1)*Nref] = np.log(ans1[:,i*Nref:(i+1)*Nref])
        ans2[:,i*Nref:(i+1)*Nref] = np.log(ans2[:,i*Nref:(i+1)*Nref])

    else:
        labels += [column+'\n(%s=%.3e)'%(reference, value) for value in opts.reference_value]

fig = corner.corner(
    ans1,
    labels=labels,
    weights=weights1,
    color=opts.color1,
)

fig = corner.corner(
    ans2,
    labels=labels,
    weights=weights2,
    color=opts.color2,
    fig=fig,
)

fig.text(0.75, 0.80, label1+'\n$N_\mathrm{eff} = %.1f$'%Neff1, color=opts.color1, ha='center', va='center')
fig.text(0.75, 0.75, label2+'\n$N_\mathrm{eff} = %.1f$'%Neff2, color=opts.color2, ha='center', va='center')

figname = os.path.join(opts.output_dir, 'overlay-corner_process%s.png'%opts.tag)
if opts.verbose:
    print('saving: '+figname)
fig.savefig(figname)
plt.close(fig)
