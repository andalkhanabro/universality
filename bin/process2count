#!/usr/bin/env python3

"""a script that manages I/O and other lookup to count the number of stable branches and/or features associated with EoS
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality.utils import io
from universality.properties import count

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

# required arguments
rgroup = parser.add_argument_group('required arguments')
rgroup.add_argument('inpath', type=str)
rgroup.add_argument('outpath', type=str)

rgroup.add_argument('reference', type=str,
    help='the reference column in the file for which we want to count the rows')

parser.add_argument('--equals', nargs=2, type=str, action='append', default=[],
    help='require the the value in a column to be equal to something. Can be repeated. \
eg: --equals column_name value')
parser.add_argument('--equals-column', nargs=2, default=[], type=str, action='append',
    help='look up the value from this column in the input data and required the associated \
column in each EoS file to equal it. Can be repeated. eg --reference-equals-column inpath_column reference_column')

parser.add_argument('--greater-than', nargs=2, type=str, action='append', default=[],
    help='require the value in a column to be greater than a threshold. Can be repeated. \
eg: --greater-than column_name threshold')
parser.add_argument('--greater-than-column', nargs=2, type=str, action='append', default=[],
    help='read the threshold from a separate column in the input data. Can be repeated. \
eg: --greater-than-column input_column reference_column')

parser.add_argument('--less-than', nargs=2, type=str, action='append', default=[],
    help='required the value in a column to be less than a threshold. Can be repeated. \
eg: --less-than column_name threshold')
parser.add_argument('--less-than-column', nargs=2, type=str, action='append', default=[],
    help='required the value in a column to be less than a threshold. Can be repeated. \
eg: --less-than-column input_column reference_column')

parser.add_argument('--overlaps', nargs=4, type=str, action='append', default=[],
    help='require the span of a feature to overlap a particular range. Can be repeated. \
eg: --overlaps start_column end_column low high')
parser.add_argument('--overlaps-columns', nargs=4, type=str, action='append', default=[],
    help='read the boundaries for overlaps from input data. Can be repeated. \
eg: --overlaps-columns input_start_column input_end_column reference_start_column reference_end_column')

rgroup.add_argument('-c', '--copy-column', default=[], type=str, action='append',
    help='copy over the values from this column')

# verbosity arguments
vgroup = parser.add_argument_group('verbosity arguments')
vgroup.add_argument('-v', '--verbose', default=False, action='store_true')
vgroup.add_argument('-V', '--Verbose', default=False, action='store_true')

# samples arguments
sgroup = parser.add_argument_group('samples-specific argument')
sgroup.add_argument('--max-num-samples', default=io.DEFAULT_MAX_NUM_SAMPLES, type=int)

# lookup arguments
lgroup = parser.add_argument_group('look-up arguments')
lgroup.add_argument('--eos-column', default='EoS', type=str)
lgroup.add_argument('--eos-dir', default='.', type=str)
lgroup.add_argument('--eos-num-per-dir', default=1000, type=int,
    help='the number of samples per directory')
lgroup.add_argument('--eos-basename', default='draw-foo-%d.csv', type=str,
    help='a string into which the EOS number can be substituted when building filenames.')

args = parser.parse_args()

args.verbose |= args.Verbose

equals = [(k, float(v)) for k, v in args.equals]
greater_than = [(k, float(v)) for k, v in args.greater_than]
less_than = [(k, float(v)) for k, v in args.less_than]
overlaps = [(k, K, float(v), float(V)) for k, K, v, V in args.overlaps]

# figure out which columns are required by dynamic logic
reference_columns = [col for col, _ in args.dynamic_equals + args.dynamic_less_than + args.dynamic_greater_than]
for overlap in args.dynamic_overlaps:
    reference_columns += list(overlap[:2])

#-------------------------------------------------

if args.verbose:
    print('reading samples from: '+args.inpath)

if not args.copy_column: ### copy everything
    data, cols = io.load(args.inpath, max_num_samples=args.max_num_samples)
    args.copy_column = [col for col in cols if (col != args.eos_column)]

    # make sure we have the columns we need
    io.check_columns(cols, reference_columns)

    # now format output
    ind = cols.index(args.eos_column)
    atad = np.empty_like(data, dtype=float)
    atad[:,0] = data[:,ind]
    for i, col in enumerate(args.copy_column, 1):
        atad[:,i] = data[:,cols.index(col)]
    data = atad

else:

    data, cols = io.load(
        args.inpath,
        [args.eos_column]+args.copy_column+reference_columns,
        max_num_samples=args.max_num_samples,
    )

Nkeep = len(args.copy_column)
N = len(data)

#------------------------

# read in values for dynamic thresholds

if args.dynamic_equals:
    dynamic_equals = [(new, data[:,cols.index(ref)]) for ref, new in args.dynamic_equals]
else:
    dynamic_equals = []

if args.dynamic_less_than:
    dynamic_less_than = [(new, data[:,cols.index(ref)]) for ref, new in args.dynamic_less_than]
else:
    dynamic_less_than = []

if args.dynamic_greater_than:
    dynamic_greater_than = [(new, data[:,cols.index(ref)]) for ref, new in args.dynamic_greater_than]
else:
    dynamic_greater_than = []

if args.dynamic_overlaps:
    dynamic_overlaps = [(new1, new2, data[:,cols.index(ref1)], data[:,cols.index(ref2)]) \
        for ref1, ref2, new1, new2 in dynamic_cols]
else:
    dynamic_overlaps = []

#------------------------

if args.verbose:
    print('extacting counts')

ans = np.empty((N, Nkeep+2), dtype=float)
ans[:,:-1] = data[:,:Nkeep+1] ### fill in existing data

path_template = os.path.join(args.eos_dir, 'DRAWmod%d'%args.eos_num_per_dir+'-%(moddraw)06d', args.eos_basename)

ans[:,-1], col = count.process2count(
    data[:,0],
    path_template,
    args.eos_num_per_dir,
    args.reference,
    static_greater_than=greater_than,
    dynamic_greater_than=dynamic_greater_than,
    static_less_than=less_than,
    dynamic_less_than=less_than,
    static_overlaps=overlaps,
    dynamic_overlaps=overlaps,
    static_equals=equals,
    dynamic_equals=dynamic_equals,
    verbose=args.Verbose,
)

### set up output columns
outcols = [args.eos_column] + args.copy_column + [col]

#------------------------

if args.verbose:
    print('writing samples to: '+args.outpath)
io.write(args.outpath, ans, outcols)
