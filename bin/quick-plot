#!/usr/bin/env python

"""a script that generates a non-frills plot from a CSV file
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality.utils import io
from universality import plot

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('xcolumn', type=str)
parser.add_argument('ycolumn', type=str)
parser.add_argument('paths', nargs='+', type=str)

parser.add_argument('-v', '--verbose', default=False, action='store_true')

parser.add_argument('--linestyle', default='solid', type=str)

parser.add_argument('--alpha', default=1.0, type=float)

parser.add_argument('--log-x', default=False, action='store_true')
parser.add_argument('--log-y', default=False, action='store_true')

parser.add_argument('--min-x', default=None, type=float)
parser.add_argument('--max-x', default=None, type=float)
parser.add_argument('--min-y', default=None, type=float)
parser.add_argument('--max-y', default=None, type=float)

parser.add_argument('--unit-x', default=None, type=str)
parser.add_argument('--unit-y', default=None, type=str)

parser.add_argument('--legend', default=False, action='store_true',
    help='include a legend in the plot')

parser.add_argument('--emphasize', default=[], type=str, action='append',
    help='plot these EOS with a heavier weight on top of everything else')
parser.add_argument('--emphasize-linewidth', default=4.0, type=float)
parser.add_argument('--emphasize-color', default='k', type=str)

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-t', '--tag', default='', type=str)

args = parser.parse_args()
columns = [args.xcolumn, args.ycolumn]

if args.output_dir and (not os.path.exists(args.output_dir)):
    os.makedirs(args.output_dir)

if args.tag:
    args.tag = "_"+args.tag

#-------------------------------------------------

fig = plot.plt.figure()
ax = fig.gca()

for inpath in args.inpaths:
    if args.verbose:
        print('reading: '+inpath)
    data, _ = io.load(inpath, columns)

    truth = np.ones(len(data), dtype=bool)
    if args.min_x!=None:
        truth *= (args.min_x<=data[:,0])
    if args.max_y!=None:
        truth *= (data[:,0]<=args.max_x)
    if args.min_y!=None:
        truth *= (args.min_y<=data[:,1])
    if args.max_y!=None:
        truth *= (data[:,1]<=args.max_y)

    data = data[truth,:]

    ax.plot(
        data[:,0],
        data[:,1],
        linestyle=args.linestyle,
        alpha=args.alpha,
        label=os.path.basename(inpath)[:-4],
    )

if args.verbose and args.emphasize:
    print('plotting emphasized data')
for inpath in args.emphasize:
    if args.verbose:
        print('reading: '+inpath)
    data, _ = io.load(inpath, columns)

    truth = np.ones(len(data), dtype=bool)
    if args.min_x!=None:
        truth *= (args.min_x<=data[:,0])
    if args.max_y!=None:
        truth *= (data[:,0]<=args.max_x)
    if args.min_y!=None:
        truth *= (args.min_y<=data[:,1])
    if args.max_y!=None:
        truth *= (data[:,1]<=args.max_y)

    data = data[truth,:]

    ax.plot(
        data[:,0],
        data[:,1],
        linestyle='-',
        alpha=1.0,
        color=args.emphasize_color,
        linewidth=args.emphasize_linewidth,
        label=os.path.basename(inpath)[:-4],
    )

if args.log_x:
    ax.set_xscale('log')
if args.log_y:
    ax.set_yscale('log')

if args.unit_x!=None:
    args.xcolumn = args.xcolumn+' [%s]'%args.unit_x
if args.unit_y!=None:
    args.ycolumn = args.ycolumn+' [%s]'%args.unit_y

ax.set_xlabel(args.xcolumn)
ax.set_ylabel(args.ycolumn)

if args.min_x!=None:
    ax.set_xlim(xmin=args.min_x)

if args.max_x!=None:
    ax.set_xlim(xmax=args.max_x)

if args.min_y!=None:
    ax.set_ylim(ymin=args.min_y)

if args.max_y!=None:
    ax.set_ylim(ymax=args.max_y)

ax.grid(True, which='both')
if args.legend:
    ax.legend(loc='best')

figname = os.path.join(args.output_dir, 'quick_plot%s.png'%args.tag)
if args.verbose:
    print('saving: '+figname)
fig.savefig(figname)
plot.close(fig)
