#!/usr/bin/env python

"""a script to integrate an EoS to compute a sequence of macroscopic parameters
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

from argparse import ArgumentParser

### non-standard libraries
from universality.tov import sequences
from universality.utils import io

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('eospath', type=str)
parser.add_argument('central_pressurec2_range', nargs=2, type=float)

parser.add_argument('--pressurec2-column', default='pressurec2', type=str)
parser.add_argument('--energy_densityc2-column', default='pressurec2', type=str)

parser.add_argument('--central-eos-column', default=[], type=str, action='append',
    help='record the values of these eos columns at the center of each stellar model')
parser.add_argument('--central-column-template', default='central_%s', type=str,
    help='the template used to define column names associated with eos columns')

parser.add_argument('--formalism', default=sequences.DEFAULT_FORMALISM, type=str)
parser.add_argument('--min-num-models', default=sequences.DEFAULT_MIN_NUM_MODELS, type=int)
parser.add_argument('--interpolator-rtol', default=sequences.DEFAULT_INTERPOLATOR_RTOL, type=float)
parser.add_argument('--integration-rtol', default=sequences.DEFAULT_INTEGRATION_RTOL, type=float)

parser.add_argument('--outpath', default=None, type=str)

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('-V', '--Verbose', default=False, action='store_true')

args = parser.parse_args()

assert args.formalism in sequenes.KNOWN_FORMALISMS, '--formalism=%s not understood; must be one of %s'%(args.formalism, ', '.join(sequences.KNOWN_FORMALISMS))

if parser.outpath is None:
    args.outpath = args.eospath + '-macro'

min_central_pressurec2, max_central_pressurec2 = args.central_pressurec2_range

if args.pressurec2_column not in args.central_eos_column:
    args.central_eos_column.append(args.pressurec2_column)

if args.energy_densityc2_column not in args.central_eos_column:
    args.central_eos_column.append(args.energy_densityc2_column)

args.verbose |= args.Verbose

#-------------------------------------------------

### load EoS data from disk
if args.verbose:
    print('print loading EoS data from: '+args.eospath)
data, cols = io.load(args.eospath, args.central_eos_column)

energy_densityc2 = data[:,cols.index(args.energy_densityc2_column)]
pressurec2 = data[:,cols.index(args.pressurec2_column)]

### now compute the stellar sequence
if args.verbose:
    print('solving for sequence of stellar models')
central_pressurec2, macro, macro_cols = sequences.stellar_sequence(
    min_central_pressurec2,
    max_central_pressurec2,
    (pressurec2, energy_densityc2),
    min_num_models=args.min_num_models,
    interpolator_rtol=args.interpolator_rtol,
    integration_rtol=args.integration_rtol,
    formalism=args.formalism,
    verbose=args.Verbose,
)

### figure out the central values of all the EoS columns
if args.verbose:
    print('extracting central values of all EoS parameters')
Neos = len(args.central_eos_column)
Nmac = len(macro_columns)

sequence = np.empty((len(central_pressurec2), Neos+Nmac), dtype=float)
columns = []

# extract the central EoS parameters 
for i in range(Neos):
    sequence[:,i] = np.interp(central_pressurec2, pressurec2, data[:,i])
    columns.append(args.column_template%cols[i])

# add in the macro properties
sequence[:,Neos:] = macro
columns += macr_cols

### write the output
if args.verbose:
    print('writing stellar sequence to: '+args.outpath)
io.write(args.outpath, sequence, columns)
