#!/usr/bin/env python3

"""a script that estimates the evidence based on the samples within inpath.csv
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality.utils import (utils, io)
from universality import stats

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('inpath', type=str)
parser.add_argument('weightcolumn', type=str, nargs='+')

parser.add_argument('-v', '--verbose', default=False, action='store_true')

parser.add_argument('--max-num-samples', default=io.DEFAULT_MAX_NUM_SAMPLES, type=int)
parser.add_argument('--weight-column-is-log', default=[], type=str, action='append',
    help='if supplied, interpret the values in weight_column as log(weight), meaning we exponentiate them before using them in the KDE')

parser.add_argument('--prior-column', default=[], type=str, action='append')
parser.add_argument('--prior-column-is-log', default=[], type=str, action='append')

args = parser.parse_args()

#-------------------------------------------------

### read in source samples
if args.verbose:
    print('reading samples from: '+args.inpath)
weights = io.load_weights(
    args.inpath,
    args.weightcolumn,
    logweightcolumns=args.weight_column_is_log,
    max_num_samples=args.max_num_samples,
    normalize=False,
)
N = len(weights)

if args.prior_column:
    if args.verbose:
        print('loading nontrivial prior from: '+args.inpath)
    prior = io.load_weights(
        args.inpath,
        args.prior_column,
        logweightcolumns=args.prior_column_is_log,
        max_num_samples=args.max_num_samples,
        normalize=True, ### we wnat the prior to be normalized
    )
else:
    prior = np.ones(N, dtype=float)/N

if args.verbose:
    print('N    = %5d'%N)
    print('Neff = %9.3f'%stats.neff(weights*prior/np.sum(weights*prior)))

#------------------------

print('  Z = +%.6e +/- %.6e'%utils.estimate_evidence(weights, prior=prior))
