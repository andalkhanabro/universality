#!/usr/bin/env python

"""read in a file and report the maximum likelihood
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality import utils

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('source', type=str)
parser.add_argument("weight_column", nargs='+', type=str)
parser.add_argument('--weight-column-is-log', default=[], type=str, action='append')

parser.add_argument('--column-range', default=[], nargs=3, type=str, action='append',
    help='if supplied, prune the samples based on this column range. Can be repeated.')

parser.add_argument('-v', '--verbose', default=False, action='store_true')

args = parser.parse_args()

#-------------------------------------------------

if args.verbose:
    print('loading weights from: '+args.source)
weights = utils.load_weights(args.source, args.weight_column, logweightcolumns=args.weight_column_is_log, normalize=False)

if args.column_range: ### need to determine which samples to keep
    columns = []
    bounds = []
    for c, m, M in args.column_range:
        columns.append(c)
        bounds.append((float(m), float(M)))

    if args.verbose:
        print('loading data from: '+args.source)
    d, c = utils.load(source, columns)
    if args.verbose:
        print('pruning data based on:')
        for c, tup in zip(columns, bounds):
            print('    %s : [%.3e, %.3e)'%((c,)+tup))

    m = np.max(logweights)
    _, weights = utils.prune(data, bounds, weights=weights)

### now report the maximum likelihood
print('maxLikelihood = %.6e'%np.max(weights))
