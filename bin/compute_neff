#!/usr/bin/env python

__usage__ = "compute_neff [--options] weight_column samples.csv [samples.csv ...]"
__doc__ = "a quick little script to compute the effective number of samples"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

from optparse import OptionParser

### non-standard libraries
from universality import utils

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__doc__)

parser.add_option('--weight-column-is-log', default=False, action='store_true')

parser.add_option('--range', nargs=3, default=[], action='append', type='string',
    help='specify the ranges used in corner.corner (eg.: "--range column minimum maximum"). \
Can specify ranges for multiple columns by repeating this option. \
DEFAULT will use the minimum and maximum observed sample points.')
parser.add_option('--prune', default=False, action='store_true')

opts, args = parser.parse_args()
assert len(args)>=2, 'please supply at least 2 input arguments\n%s'%__usage__
weight_column = args[0]
inpaths = args[1:]

rangesdict = dict((column,(float(_min), float(_max))) for column, _min, _max in opts.range)
columns = rangesdict.keys()+[weight_column]
rangesdict[weight_column] = (0, 1)

#-------------------------------------------------

print('total number | effective number | path')
template = '%12d | %16d | %s'
for inpath in inpaths:
    data, columns = utils.load(inpath, columns, logcolumns=opts.logcolumn)

    weights = data[:,-1]
    if opts.weight_column_is_log:
        weights = np.exp(weights-np.max(weights))
    weights /= np.sum(weights)

    if opts.prune:### throw away data that's outside the bounds
        data, weights = utils.prune(data, ranges, weights=weights)

    print(template%(len(data), utils.neff(weights), inpath))
