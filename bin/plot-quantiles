#!/usr/bin/env python

"""generate plots of quantiles extracted via process2quantiles
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os
import numpy as np

from collections import defaultdict

from argparse import ArgumentParser

### non-standard libraries
from universality.utils import (utils, io)
from universality import plot
from universality import stats
from universality.properties import samples

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

# required arguments
rgroup = parser.add_argument_group('required arguments')
rgroup.add_argument('-s', '--samples', required=True, nargs=2, default=[], type=str, action='append',
    help='e.g.: "--samples label path/to/samples.csv"')

rgroup.add_argument('ycolumn', type=str)
rgroup.add_argument('xcolumn', type=str)

rgroup.add_argument('xmin', type=float)
rgroup.add_argument('xmax', type=float)

rgroup.add_argument('--y-multiplier', default=1, type=float,
    help='multiply all y-values by this before plotting. y-limits are applied after multiplying.')
rgroup.add_argument('--x-multiplier', default=1, type=float,
    help='multiply all x-values by this before plotting. x-limits are applied after multiplying.')

# verbosity arguments
vgroup = parser.add_argument_group('verbosity arguments')
vgroup.add_argument('-v', '--verbose', default=False, action='store_true')
vgroup.add_argument('-V', '--Verbose', default=False, action='store_true')

# column arguments
cgroup = parser.add_argument_group('column-specific arguments')
cgroup.add_argument('-l', '--logcolumn', default=[], type=str, action='append',
    help='convert the values read in for this column to natural log. \
Can be repeated to specify multiple columns. \
DEFAULT=[]')
cgroup.add_argument('-L', '--column-label', nargs=2, default=[], type=str, action='append',
    help='replace the column name with this label in the corner plot. e.g.: \'xcol $x$\'. \
DEFAULT=[]')

# workflow argumnets
wgroup = parser.add_argument_group('workflow arguments')
wgroup.add_argument('--num-points', default=101, type=int,
    help='the number of interpolation points used when plotting')

# plotting options
pgroup = parser.add_argument_group('plotting options')

pgroup.add_argument('--reference', default=[], nargs=2, type=str, action='append',
    help='e.g.: "--reference name path". path to a reference CSV that will be plotted on top of the process plot. Can be repeated to specify multiple reference curves. \
The columns must be the same as those supplied in the input arguments. \
DEFAULT=[]')

pgroup.add_argument('--color', nargs=2, action='append', default=[], type=str,
    help='e.g. "--color label c"')
pgroup.add_argument('--truth-color', default=plot.DEFAULT_TRUTH_COLOR, type=str)
pgroup.add_argument('--reference-color', nargs=2, type=str, default=[], action='append',
    help='e.g.: "--reference-color name b"')

parser.add_argument('--quantile', default=[], type=float, action='append',
    help='plot these quantiles. \
DEFAULT=[0.9]')
parser.add_argument('--quantile-type', default='sym', type=str,
    help='the type of quantiles desired. Can be either "sym" or "hpd". \
If "sym", plots symmetric quantiles between (q, 1-q) for every quantile specified via --quantile. \
If "hpd", plots the highest-probability-density region for every quantile specified via --quantile, each of which may not be contiguous. \
DEFAULT="sym".')

parser.add_argument('--filled', default=False, action='store_true',
    help='fill in the region between quantiles')
parser.add_argument('--alpha', default=0.25, type=float,
    help='DEFAULT=0.25')

parser.add_argument('--residuals', default=False, action='store_true',
    help='if True, plot the residuals between the median of the process and the reference curves. Cannot be supplied simultanesoulsy with --ratios')
parser.add_argument('--ratios', default=False, action='store_true',
    help='if supplied, plot the ratio of the values instead of the difference (--residuals). Cannot be supplied simulaneously with --residuals')

parser.add_argument('--ymin', default=None, type=float)
parser.add_argument('--ymax', default=None, type=float)
parser.add_argument('--res-ymin', default=None, type=float)
parser.add_argument('--res-ymax', default=None, type=float)

pgroup.add_argument('--legend', default=False, action='store_true')
pgroup.add_argument('--include-neff', default=False, action='store_true',
    help='include an estimate of the effective number of samples as a title')

pgroup.add_argument('--reference-legend', default=False, action='store_true')

pgroup.add_argument('--figwidth', default=plot.DEFAULT_FIGWIDTH, type=float)
pgroup.add_argument('--figheight', default=plot.DEFAULT_FIGHEIGHT, type=float)

pgroup.add_argument('--grid', default=False, action='store_true')

# annotation options
agroup = parser.add_argument_group('annotation options')
agroup.add_argument('--signpost', nargs=2, default=[], type=str, action='append',
    help='add markers (vertical/horizontal lines) to denote specific values. e.g.: "baryon_density 2.7e14". Can be repeated')
agroup.add_argument('--signpost-color', default=plot.DEFAULT_TRUTH_COLOR, type=str)

# ouptut options
ogroup = parser.add_argument_group('output options')
ogroup.add_argument('-o', '--output-dir', default='.', type=str)
ogroup.add_argument('-t', '--tag', default='', type=str)
ogroup.add_argument('--figtype', default=[], type=str, action='append')
ogroup.add_argument('--dpi', default=plot.DEFAULT_DPI, type=float)

args = parser.parse_args()

### finish parsing
columns = [args.xcolumn, args.ycolumn]
names = [label for label, path in args.samples]
reference_names = [label for label, path in args.reference]
Nsamples = len(names)

# verbosity options
args.verbose |= args.Verbose

# column options
labels = dict((col, '$'+col+'$') for col in columns)
for column, label in args.column_label:
    assert column in columns, 'specifying --column-label for unknown column: '+column
    labels[column] = label

# plotting options
colors = dict((label, plot.DEFAULT_COLOR1) for label in names)
for label, color in args.color:
    assert label in names, 'specifying --color for uknown sample set: '+label
    colors[label] = color

reference_colors = dict((label, plot.DEFAULT_TRUTH_COLOR) for label in reference_names)
for label, color in args.reference_color:
    assert label in reference_names, 'specifying --reference-color for unknown reference set: '+label
    reference_colors[label] = color

if args.residuals and args.ratios:
    raise ValueError('please only supply either --residuals or --ratios')

if args.quantile_type not in ['sym', 'hpd']:
    raise ValueError('could not understand --quantile-type="%s", please specify either "sym" or "hpd".'%args.quantile_type)

if not args.quantile:
    args.quantile = [0.9]
args.quantile.sort()

if args.quantile_type=='sym':
    quantiles = []
    for q in args.quantile:
        quantiles += [q, (1-q)]
else:
    quantiles = args.quantile

Nquantiles = len(quantiles)
if args.quantile_type=="hpd":
    Nquantiles *= 2 ### we need twice as many as are in the list

# annotation options
signposts = defaultdict(list)
for column, value in args.signpost:
    assert column in columns, 'specifying --signpost for unknown column: '+column
    signposts[column].append(float(value))

# output options
if args.tag:
    args.tag = "_"+args.tag

if args.output_dir and (not os.path.exists(args.output_dir)):
    os.makedirs(args.output_dir)

if not args.figtype:
    args.figtype = plot.DEFAULT_FIGTYPES

#-------------------------------------------------

# set up data
if args.xcolumn in args.logcolumn:
    x_test = np.logspace(np.log10(args.xmin), np.log10(args.xmax), args.num_points)
else:
    x_test = np.linspace(args.xmin, args.xmax, args.num_points)

y = np.empty((Nsamples, Nquantiles, args.num_points), dtype='float')
y_median = np.empty((Nsamples, args.num_points), dtype='float')

### iterate and plot
if args.legend and args.include_neff:
    neff = []
    nkde = []

for ind, (label, path) in enumerate(args.samples):
    if args.verbose:
        print('reading quantiles for %s from: %s'%(label, path))
    quantiles, cols = io.load(path)

    #--------------------

    ### compute confidence regions
    if args.verbose:
        print('computing confidence intervals')

    raise NotImplementedError('compute confidence regions from quantiles')

    y[ind,:,:] = qs
    y_median[ind,:] = med


### load in reference curves
reference = [] # define this out here so other loops can iterate over it even if we don't have any reference curves...
if args.reference:
    for label, path in args.reference:
        if args.verbose:
            print('reading reference curve from: '+path)
        d, _ = io.load(path, columns)
        d[:,0] *= args.x_multiplier
        d[:,1] *= args.y_multiplier
        reference.append((label, d)) ### just grab the data, not the column names

### set up reference curves
if args.residuals or args.ratios:
    if len(reference)==1: ### use the one reference curve a the baseline
        y_reference = np.interp(x_test, reference[0][1][:,0], reference[0][1][:,1])
        y_reference_label = 'reference'
    else:
        y_reference = y_median[0,:]
        y_reference_label = 'median'

#-------------------------------------------------

if args.verbose:
    print('plotting')

fig, ax = plot.envelope(
        x_tst,
        y,
        y_median,
        names,
        colors,
        labels[args.xcolumn],
        labels[args.ycolumn],
        [args.xmin, args.xmax],
        legend=args.legend,
        neff_nkde=(neff, nkde) if args.include_neff else None,
        logxcolumn=args.xcolumn in args.logcolumn,
        logycolumn=args.ycolumn in args.logcolumn,
        grid=args.grid,
        ymin=args.ymin,
        ymax=args.ymax,
        res_ymin=args.res_ymin,
        res_ymax=args.res_ymax,
        xsignposts=signposts[args.xcolumn],
        ysignposts=signposts[args.ycolumn],
        signpost_color=args.signpost_color,
        reference=reference,
        reference_colors=reference_colors,
        residuals=args.residuals,
        ratios=args.ratios,
        y_reference=y_reference if args.residuals or args.ratios else None,
        filled=args.filled,
        alpha=args.alpha,
        figwidth=args.figwidth,
        figheight=args.figheight,
)

plot.save('plot-quantiles%s'%args.tag, fig, directory=args.output_dir, figtypes=args.figtype, dpi=args.dpi, verbose=args.verbose)
plot.close(fig)
