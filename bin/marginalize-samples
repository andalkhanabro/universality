#!/usr/bin/env python3

"""marginalize over all weights associated with combinations of columns, creating a new file with marginalized weights within it
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os
import sys
import numpy as np

from collections import defaultdict
from argparse import ArgumentParser

### non-standard libraries
from universality.utils import (utils, io)

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('samples', type=str)
parser.add_argument('columns', nargs="+", type=str,
    help='columns used to define unique sets. We will marginalize over anything not specified here')

parser.add_argument('--weight-column', default=[], type=str, action='append')
parser.add_argument('--weight-column-is-log', default=[], type=str, action='append')
parser.add_argument('--max-num-samples', default=io.DEFAULT_MAX_NUM_SAMPLES, type=int)

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('-o', '--output-path', default=None, type=str,
    help='print to this file if specified. Otherwise we print to STDOUT.')

args = parser.parse_args()

#-------------------------------------------------

if args.verbose:
    print('reading samples from: '+args.samples)
data, columns = io.load(args.samples, args.columns, max_num_samples=args.max_num_samples)

if args.weight_column:
    if args.verbose:
        print('reading in non-trivial weights from: '+args.samples)
    logweights = io.load_logweights(
        args.samples,
        args.weight_column,
        logweightcolumns=args.weight_column_is_log,
        max_num_samples=args.max_num_samples,
    )

else:
    N = len(data)
    logweights = np.zeros(N, dtype='float')

# now need to marginalize over samples
if args.verbose:
    print('marginalizing over weights to determine effective weights for unique combinations of (%s)'%(', '.join(args.columns)))
results, columns = utils.marginalize(data, logweights, columns)

# write output CSV file
if args.output_path is not None:
    if args.verbose:
        print('writing marginalized results to: '+args.output_path)

    outdir = os.path.dirname(args.output_path)
    if outdir and (not os.path.exists(outdir)):
        os.makedirs(outdir)

else:
    args.output_path = sys.stdout ### write to STDOUT

io.write(args.output_path, results, columns)
