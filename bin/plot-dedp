#!/usr/bin/env python

__doc__ = "generate some simple plots of the EOS to make sure they're reasonable. Assumes all columns are in g/cm^3, and converts to more standard units as appropriate"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality import utils
from universality import plot

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('inpaths', nargs='+', type=str)

parser.add_argument('-v', '--verbose', default=False, action='store_true')

parser.add_argument('--min-pressure', default=None, type=float)
parser.add_argument('--max-pressure', default=None, type=float)

parser.add_argument('--linestyle', default='-', type=str)
parser.add_argument('--show-errors', default=False, action='store_true')

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-t', '--tag', default='', type=str)
parser.add_argument('--figtype', default=[], type=str, action='append')
parser.add_argument('--dpi', default=plot.DEFAULT_DPI, type=float)

args = parser.parse_args()

if not os.path.exists(args.output_dir):
    os.makedirs(args.output_dir)

if args.tag:
    args.tag = "_"+args.tag

if not args.figtype:
    args.figtype = plot.DEFAULT_FIGTYPES

alpha = 0.5

#-------------------------------------------------

### instantiate figure
fig = plot.plt.figure()
ax_pe = plot.plt.subplot(3,1,1)
ax_pdedp = plot.plt.subplot(3,1,2)
ax_pv = plot.plt.subplot(3,1,3)

### iterate and plot
for path in args.inpaths:
    if args.verbose:
        print('reading EOS data from: '+path)
    d = np.genfromtxt(path, names=True, delimiter=',')

    if args.verbose:
        print('plotting')

    label = os.path.basename(path)[:-4]
    p = d['pressurec2']*utils.c2
    e = d['energy_densityc2']*utils.c2
    dedp = d['denergy_densitydpressure']

    truth = np.ones_like(p, dtype=bool)
    if argss.min_pressure!=None:
        truth *= p>=args.min_pressure
    if args.max_pressure!=None:
        truth *= p<=args.max_pressure

    p = p[truth]
    e = e[truth]
    dedp = dedp[truth]

    color = ax_pe.plot(p, e, args.linestyle, label=label)[0].get_color()
    ax_pdedp.plot(p, p/e * dedp, args.linestyle, label=label, color=color)
    ax_pv.plot(p, 1./dedp, args.linestyle, label=label, color=color)

    ### check for error estimates on dedp
    if d.dtype.fields.has_key('sigma_denergy_densitydpressure') and args.show_errors:
        s = 3*d['sigma_denergy_densitydpressure'] ### plot 3-sigma confidence regions
        s = s[truth]
        high = (dedp + s)
        low = (dedp - s)

        ax_pdedp.plot(p, p/e*high, color=color, alpha=alpha)
        ax_pdedp.plot(p, p/e*low, color=color, alpha=alpha)

        ax_pv.plot(p, 1./high, color=color, alpha=alpha)
        ax_pv.plot(p, 1./low, color=color, alpha=alpha)

### decorate figure
e_label = r'$\epsilon$ [erg/cm$^3$]'
p_label = r'$p$ [erg/cm$^3$]'
dedp_label = r'$d\log \epsilon/d\log p$'
v_label = r'$v^2/c^2 = (d\epsilon/dp)^{-1}$'
plot.plt.setp(ax_pe.get_xticklabels(), visible=False)
ax_pe.set_ylabel(e_label)

plot.plt.setp(ax_pdedp.get_xticklabels(), visible=False)
ax_pdedp.set_ylabel(dedp_label)

ax_pv.set_xlabel(p_label)
ax_pv.set_ylabel(v_label)

for ax in [ax_pe, ax_pdedp, ax_pv]:
    ax.grid(True, which='both')
    ax.set_xscale('log')
    ax.set_yscale('log')

if args.min_pressure!=None:
    ax_pe.set_xlim(xmin=args.min_pressure)
if args.max_pressure!=None:
    ax_pe.set_xlim(xmax=args.max_pressure)
xlim = ax_pe.get_xlim()
ax_pdedp.set_xlim(xlim)
ax_pv.set_xlim(xlim)

plot.plt.subplots_adjust(hspace=0.1, wspace=0.1)

### save
plot.save('plot_dedp%s'%args.tag, fig, directory=args.output_dir, figtypes=args.figtype, dpi=args.dpi, verbose=args.verbose)
plot.close(fig)
