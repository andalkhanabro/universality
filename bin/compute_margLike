#!/usr/bin/env python

__doc__ = "a script that computes the associated weights samples from a prior distribution. Assumes hdf5 posterior samples generated by lalinference"
__author__ = "reed.essick@ligo.org"
__usage__ = "compute_margLike [--options] posterior_samples.hdf5 prior_samples.hdf5"

#-------------------------------------------------

import os

import numpy as np
import hdf5

from optparse import OptionParser

### non-standard libraries
from universality import utils

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__doc__)

parser.add_option('-v', '--verbose', default=False, action='store_true')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

opts, args = parser.parse_args()
assert len(args)==2, 'please supply exactly 2 input arguments\n%s'%__usage__
post_path, prior_path = args

if opts.tag:
    opts.tag = "_"+opts.tag

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

#-------------------------------------------------

### read in posterior samples
if opts.verbose:
    print('reading posterior samples from: '+post_path)

with h5py.File(post_path, 'r') as file_obj:
    post_data = file_obj['lalinference']
    post_data = post_data[post_data.keys()[0]]['posterior_samples']
    post_attrs = post_data.attrs.items()
    post_data = post_data[:]

Npost = len(post_data)
if opts.verbose:
    print('    found %d samples'%Npost)

#------------------------

### read in prior samples
if opts.verbose:
    print('reading prior samples from: '+prior_path)

with h5py.File(prior_path, 'r') as file_obj:
    prior_data = file_obj['prior_samples']
    prior_attrs = prior_data.attrs.items()
    prior_data = prior_data[:]
    
Nprior = len(prior_data)
if opts.verbose:
    print('    found %d samples'%Nprior)

#-------------------------------------------------

### need to compute estimate of the marginal likelihood for each point in prior_samples using post_samples
weights = utils.compute_weights(post_data, prior_data) ### should return a 1D array with lenght=len(prior_data)

raise NotImplementedError, '''
we need to report the cross-validation logLikelihood for post_data given this bandwidth

