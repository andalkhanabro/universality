#!/usr/bin/env python

__doc__ = "a one-stop shop for the full GPR regression for phi = log(denergy_density/dpressure -1) as a function of pressurec2."
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os

import numpy as np
import h5py

from argparse import ArgumentParser

### non-standard
from universality import utils
from universality import gaussianprocess as gp
from universality import plot

#-------------------------------------------------

DEFAULT_MIN_PRESSURE = 1e30 ### g/cm^3
DEFAULT_MAX_PRESSURE = 1e38

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

### required arguments
rgroup = parser.add_argument_group('required arguments')
rgroup.add_argument('eospaths', nargs='+', type=str)

### verbosity arguments
vgroup = parser.add_argument_group('verbosity options')
vgroup.add_argument('-v', '--verbose', default=False, action='store_true')
vgroup.add_argument('-V', '--Verbose', default=False, action='store_true')

### options for resampling
ggroup = parser.add_argument_group('Gaussian Process resampling options')
ggroup.add_argument('--pressure-bounds', default=(DEFAULT_MIN_PRESSURE, DEFAULT_MAX_PRESSURE), nargs=2, type=float,
    help='min max values for resample-pressure. Specified in g/cm^3. \
DEFAULT=%.3e %.3e'%(DEFAULT_MIN_PRESSURE, DEFAULT_MAX_PRESSURE))
ggroup.add_argument('-n', '--num-points', default=gp.DEFAULT_NUM, type=int,
    help='resample to this number of points. \
DEFAULT=%d'%gp.DEFAULT_NUM)
ggroup.add_argument('--truncate', default=False, action='store_true',
    help='truncate the range of the resampling to match what is in the csv')

ggroup.add_argument('--hyperparampath', default=None, type=str,
    help='a path to a csv with the following columns: "polydeg", "sigma", "l", "sigma_obs", "loglike" such as is produced by investigate-hyperparams. \
If supplied, we ignore values of --sigma, --length-scale, --sigma-obs and build a mixture-model hdf5 file based on the weights contained in the csv.')
ggroup.add_argument('--max-num-models', default=None, type=int,
    help='if supplied, only include up to this many models in the mixture, selecting those with the largest weights first')

ggroup.add_argument('--poly-degree', default=gp.DEFAULT_POLY_DEGREE, type=int,
    help='the degree of the polynomial used to model eos before GPR as part of resampling. \
DEFAULT=%d'%gp.DEFAULT_POLY_DEGREE)

ggroup.add_argument('-s', '--sigma', default=gp.DEFAULT_SIGMA, type=float,
    help='used as a guess for the optimizer. \
DEFAULT=%.3e'%gp.DEFAULT_SIGMA)
ggroup.add_argument('-l', '--length-scale', dest='l', default=gp.DEFAULT_L, type=float,
    help='used as a guess for the optimizer. \
DEFAULT=%.3e'%gp.DEFAULT_L)
ggroup.add_argument('-S', '--sigma-obs', default=gp.DEFAULT_SIGMA, type=float,
    help='used as a guess for the optimizer. \
DEFAULT=%.3e'%gp.DEFAULT_SIGMA)

ggroup.add_argument('--check-for-nan', default=False, action='store_true',
    help='look for nans during resampling step. If they are found, raise a ValueError')

### plotting options
pgroup = parser.add_argument_group('plotting options')
pgroup.add_argument('-p', '--plot-all', default=False, action='store_true')
pgroup.add_argument('--plot-energy_densityc2', default=False, action='store_true')
pgroup.add_argument('--plot-phi', default=False, action='store_true')

pgroup.add_argument('--figwidth', default=plot.DEFAULT_FIGWIDTH, type=float)
pgroup.add_argument('--figheight', default=plot.DEFAULT_FIGHEIGHT, type=float)

pgroup.add_argument('--grid', default=False, action='store_true')

### output options
ogroup = parser.add_argument_group('output options')
ogroup.add_argument('-o', '--output-dir', default='.', type=str)
ogroup.add_argument('-t', '--tag', default='', type=str)
ogroup.add_argument('--figtype', default=[], type=str, action='append')
ogroup.add_argument('--dpi', default=plot.DEFAULT_DPI, type=float)

args = parser.parse_args()
Neos = len(args.eospaths)

if not os.path.exists(args.output_dir):
    os.makedirs(args.output_dir)

if args.tag:
    args.tag = "_"+args.tag

if not args.figtype:
    args.figtype = plot.DEFAULT_FIGTYPES

args.plot_energy_densityc2 |= args.plot_all
args.plot_phi |= args.plot_all

args.verbose |= args.Verbose

#-------------------------------------------------

# figure out the hyperparameters we'll use
if args.hyperparampath:
    polydeg, sigma, length_scale, sigma_obs, weights = utils.load(args.hyperparampath, ['poly_degree', 'sigma', 'l', 'sigma_obs', 'logLike'])[0].transpose()
    polydeg = polydeg.astype(int)

    if args.max_num_models is not None: ### truncate the number of models considered
        truth = weights.argsort()[::-1][:args.max_num_models]
        polydeg = polydeg[truth]
        sigma = sigma[truth]
        length_scale = length_scale[truth]
        sigma_obs = sigma_obs[truth]
        weights = weights[truth]

    weights = np.exp(weights-np.max(weights))
    weights /= np.sum(weights)

    truth = weights > 0 ### throw away anything that won't ever matter
    polydeg = polydeg[truth]
    sigma = sigma[truth]
    length_scale = length_scale[truth]
    sigma_obs = sigma_obs[truth]
    weights = weights[truth]

else:
    polydeg = [args.poly_degree]
    sigma = [args.sigma]
    length_scale = [args.l]
    sigma_obs = [args.sigma_obs]
    weights = [1.]

### resample eos into a big matrix
### generate all data structures we'll need here
if args.verbose:
    print('resampling to %d points within [%.3e, %.3e] g/cm^3'%((args.num_points,)+tuple(args.pressure_bounds)))
logp_resample = np.linspace(
    np.log(args.pressure_bounds[0]),
    np.log(args.pressure_bounds[1]),
    args.num_points,
)
logp_resample -= 2*np.log(utils.c)

for ind, path in enumerate(args.eospaths): ### iterate over supplied EOS, resample, and fill in data structures
    if args.verbose:
        print('reading: '+path)
    data, _ = utils.load(path, ['pressurec2', 'energy_densityc2'])
    logp_obs = np.log(data[:,0])
    loge_obs = np.log(data[:,1])

    if args.truncate:
        truth = (np.min(logp_obs)<=logp_resample)*(logp_resample<=np.max(logp_obs)) ### only keep samples below the max tabulated value
    else:
        truth = np.ones_like(logp_resample, dtype=bool)
    if not np.any(truth):
        raise Warning, 'no samples found with requested range. Skipping this EOS'
        continue

    ### run gpr to resample this eos
    if args.plot_energy_densityc2 or args.plot_phi:
        fmodel = [] ### holders for plotting
        dfmodel = []
        pmodel = []

    fpath = os.path.join(args.output_dir, 'gpr_f-%s%s.hdf5'%(os.path.basename(path)[:-4], args.tag))
    ppath = os.path.join(args.output_dir, 'gpr_phi-%s%s.hdf5'%(os.path.basename(path)[:-4], args.tag))
    with h5py.File(fpath, 'w') as fobj:
        with h5py.File(ppath, 'w') as pobj:
            for ind, (p, s, l, S, w) in enumerate(zip(polydeg, sigma, length_scale, sigma_obs, weights)):
                if args.Verbose:
                    print('resampling %d observations to %d+%d points with (s=%.3e, l=%.3f, S=%.3e, p=%d) and weight=%.3e'%(len(loge_obs), args.num_points, args.num_points, s, l, S, p, w))

                mean_f, mean_dfdx, cov_f_f, cov_f_dfdx, cov_dfdx_f, cov_dfdx_dfdx, logweight = gp.gpr_resample_f_dfdx(
                    logp_resample[truth],
                    loge_obs,
                    logp_obs,
                    degree=p,
                    guess_sigma2=s**2,
                    guess_l2=l**2,
                    guess_sigma2_obs=S**2,
                )

                if args.Verbose:
                    print('computing process for phi')
                mean_phi, truth_phi = gp.mean_phi(logp_resample[truth], mean_f, mean_dfdx)
                mean_phi = mean_phi[truth_phi] ### prune bad (acausal?) samples from the data set!

                TRUTH = np.zeros_like(truth, dtype=bool) ### make a copy
                TRUTH[truth] = truth_phi

                cov_phi_phi = gp.cov_phi_phi(
                    logp_resample[TRUTH],
                    mean_f[truth_phi],
                    mean_dfdx[truth_phi],
                    cov_f_f[truth_phi,:][:,truth_phi],
                    cov_f_dfdx[truth_phi,:][:,truth_phi],
                    cov_dfdx_f[truth_phi,:][:,truth_phi],
                    cov_dfdx_dfdx[truth_phi,:][:,truth_phi],
                )

                ### run basic sanity checks to make sure we don't break anything downstream...
                if args.check_for_nan:
                    if np.any(mean_phi!=mean_phi):
                        raise ValueError, path+' produces nans for mean_phi when resampled!'
                    if np.any(cov_phi_phi!=cov_phi_phi):
                        raise ValueError, path+' producds nans for cov_phi_phi when resampled!'

                ### save the process for this resample to file
                ### NOTE: we do not actually record the full covariance matrix between f and df/dx. That's probably not needed, so this is probably ok

                # just f
                gp.create_process_group(
                    fobj.create_group(str(ind)),
                    p,
                    s,
                    l,
                    S,
                    logp_resample[truth],
                    mean_f,
                    cov_f_f,
                    xlabel='log(pressurec2)',
                    flabel='log(energy_densityc2',
                    weight=w,
                )
                
                # just phi
                gp.create_process_group(
                    pobj.create_group(str(ind)),
                    p,
                    s,
                    l,
                    S,
                    logp_resample[TRUTH],
                    mean_phi,
                    cov_phi_phi,
                    xlabel='log(pressurec2)',
                    flabel='phi',
                    weight=w,
                )

                if args.plot_energy_densityc2 or args.plot_phi:
                    x = np.exp(logp_resample[truth])
                    fmodel.append({
                        'x':x,
                        'f':np.exp(mean_f),
                        'cov':cov_f_f,
                        'weight':w,
                        'labels':{'xlabel':'pressurec2', 'flabel':'energy_densityc2'}
                    })
                    dfmodel.append({
                        'x':x,
                        'f':mean_dfdx,
                        'cov':cov_dfdx_dfdx,
                        'weight':w,
                        'labels':{'xlabel':'pressurec2', 'flabel':'denergy_densityc2dpressurec2'}
                    })
                    pmodel.append({
                        'x':np.exp(logp_resample[TRUTH]),
                        'f':mean_phi,
                        'cov':cov_phi_phi,
                        'weight':w,
                        'labels':{'xlabel':'log(pressurec2)', 'flabel':'phi'}
                    })

    if args.verbose:
        print('saved mixture models of processes to:\n    %s\n    %s'%(fpath, ppath))

    ### plot the result
    if args.plot_energy_densityc2 or args.plot_phi:
        if args.truncate:
            truth = (np.min(logp_resample)<=logp_obs)*(logp_obs<=np.max(logp_resample)) ### truncate to only plot data that covers resample window
        else:
            truth = np.ones_like(logp_obs, dtype=bool)

        p_obs = np.exp(logp_obs)
        label = os.path.basename(path)[:-3]

        if args.plot_energy_densityc2:
            ### plot EOS
            fig, ax = plot.overlay_model(fmodel)
            ylim = ax.get_ylim()
            plot.overlay(
                [(p_obs[truth], np.exp(loge_obs[truth]), label)],
                xlabel='$p/c^2$',
                ylabel='$\\varepsilon/c^2$',
                markers=['.'],
                alphas=[0.5],
                figwidth=args.figwidth,
                figheight=args.figheight,
                grid=args.grid,
                logx=True,
                logy=True,
                figtup=(fig, ax),
            )
            ax.set_ylim(ylim)
            plot.save('gpr-resample-energy_densityc2%s'%args.tag, fig, figtypes=args.figtype, directory=args.output_dir, verbose=args.verbose, dpi=args.dpi)
            plot.close(fig)

            ### plot derivative
            fig, ax = plot.overlay_model(dfmodel)
            ylim = ax.get_ylim()
            plot.overlay(
                [(p_obs[truth], gp.num_dfdx(logp_obs, loge_obs)[truth], label)],
                xlabel='$p/c^2$',
                ylabel='$d\log\\varepsilon/d\log p$',
                markers=['.'],
                alphas=[0.5],
                figwidth=args.figwidth,
                figheight=args.figheight,
                grid=args.grid,
                logx=True,
                logy=False,
                figtup=(fig, ax),
            )
            ax.set_ylim(ylim)
            plot.save('gpr-resample-dedp%s'%args.tag, fig, figtypes=args.figtype, directory=args.output_dir, verbose=args.verbose, dpi=args.dpi)
            plot.close(fig)

        if args.plot_phi:
            ### plot aux variable
            fig, ax = plot.overlay_model(pmodel)
            ylim = ax.get_ylim()
            plot.overlay(
                [(p_obs[truth], np.log(np.exp(loge_obs)/p_obs * gp.num_dfdx(logp_obs, loge_obs) - 1)[truth], label)],
                xlabel='$p/c^2$',
                ylabel='$\phi$',
                markers=['.'],
                alphas=[0.5],
                figwidth=args.figwidth,
                figheight=args.figheight,
                grid=args.grid,
                logx=True,
                logy=False,
                figtup=(fig, ax),
            )
            ax.set_ylim(ylim)
            plot.save('gpr-resample-phi%s'%args.tag, fig, figtypes=args.figtype, directory=args.output_dir, verbose=args.verbose, dpi=args.dpi)
            plot.close(fig)
