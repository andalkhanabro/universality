#!/usr/bin/env python

__doc__ = "a script that estimates the evidence based on the samples within inpath.csv"
__author__ = "reed.essick@ligo.org"
__usage__ = "estimate_evidence [--options] inpath.csv weightcolumn"

#-------------------------------------------------

import os

import numpy as np

from optparse import OptionParser

### non-standard libraries
from universality import utils

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__doc__)

parser.add_option('-v', '--verbose', default=False, action='store_true')

parser.add_option('--max-num-samples', default=utils.DEFAULT_MAX_NUM_SAMPLES, type='int')
parser.add_option('', '--weight-column-is-log', default=False, action='store_true',
    help='if supplied, interpret the values in weight_column as log(weight), meaning we exponentiate them before using them in the KDE')

opts, args = parser.parse_args()
assert len(args)==2, 'please supply exactly 2 input arguments\n%s'%__usage__
inpath, weightcolumn = args

#-------------------------------------------------

### read in source samples
if opts.verbose:
    print('reading samples from: '+inpath)
weights = utils.load(inpath, [weightcolumn], max_num_samples=opts.max_num_samples)[0][:,0]
N = len(weights)
sqrtN = N**0.5
weights.reshape(N)

if opts.weight_column_is_log:
    logweights = weights
    weights = np.exp(weights)

else:
    logweights = np.log(weights)

if opts.verbose:
    print('N    = %6d'%N)
    print('Neff = %9.3f'%utils.neff(weights/np.sum(weights)))

#------------------------

print('  Z = +%.6e +/- %.6e'%(np.mean(weights), np.std(weights)/sqrtN))
print('lnZ = %.6e +/- %.6e'%(np.mean(logweights), np.std(logweights)/sqrtN))
