#!/usr/bin/env python

__doc__ = "determine the locations at which a value is first reached in each direction from some set of bound within a set of EOS (a process)"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os
import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality import utils

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

# required arguments
rgroup = parser.add_argument_group('required arguments')
rgroup.add_argument('inpath', type=str)
rgroup.add_argument('outpath', type=str)
rgroup.add_argument('reference_column', type=str)
rgroup.add_argument('reference_column_value', type=str,
    help='either supply a float or the name of a column (for dynamic lookup) along with --reference-column-value-is-column')
rgroup.add_argument('--reference-column-value-is-column', default=False, action='store_true')

rgroup.add_argument('columns', nargs='+', type=str,
    help='columns to extract')

rgroup.add_argument('-c', '--copy-column', default=[], type=str, action='append',
    help='copy over the values from this column')

rgroup.add_argument('--new-column', type=str, default=[], action='append', nargs=3,
    help='the name of the new column that will be added to each file. \
Supply the name of the column original and then the names of the new columns for max and min. \
eg, "--new-column old_column max_old_column min_old_column"')

rgroup.add_argument('--column-range', nargs=3, type=str, default=[], action='append',
    help='restrict the extremization to within this range for this column. \
e.g.: "--column-range baryon_density 2.8e14 2.8e15". Can be repeated to specify multiple ranges')

rgroup.add_argument('--dynamic-minimum', nargs=2, type=str, default=[], action='append',
    help='restrict the extremization to above a dynamic value. e.g. "--dynamic-minimum reference_column lookup_column" will restrict the extremization to everywhere that reference_column is larger than the associated value in lookup_column')
rgroup.add_argument('--dynamic-maximum', nargs=2, type=str, default=[], action='append',
    help='restrict the extremization to below a dynamic value. e.g. "--dynamic-maximum reference_column lookup_column" will restrict the extremization to everywhere that reference_column is smaller than the associated value in lookup_column')

# verbosity arguments
vgroup = parser.add_argument_group('verbosity arguments')
vgroup.add_argument('-v', '--verbose', default=False, action='store_true')
vgroup.add_argument('-V', '--Verbose', default=False, action='store_true')

# samples arguments
sgroup = parser.add_argument_group('samples-specific argument')
sgroup.add_argument('--max-num-samples', default=utils.DEFAULT_MAX_NUM_SAMPLES, type=int)

# lookup arguments
lgroup = parser.add_argument_group('look-up arguments')
lgroup.add_argument('--eos-column', default='EoS', type=str)
lgroup.add_argument('--eos-dir', default='.', type=str)
lgroup.add_argument('--eos-num-per-dir', default=1000, type=int,
    help='the number of samples per directory')
lgroup.add_argument('--eos-basename', default='draw-foo-%d.csv', type=str,
    help='a string into which the EOS number can be substituted when building filenames.')

args = parser.parse_args()

### finish parsing
Ncol = len(args.columns)
Nkeep = len(args.copy_column)

new_columns = dict((a, [b, c]) for a, b, c in args.new_column)

if os.path.dirname(args.outpath) and (not os.path.exists(os.path.dirname(args.outpath))):
    os.makedirs(os.path.dirname(args.outpath))

ranges = dict((column, (float(m), float(M))) for column, m, M in args.column_range)

args.verbose |= args.Verbose

if not args.reference_column_value_is_column:
    args.reference_column_value = float(args.reference_column_value)

#-------------------------------------------------

if args.verbose:
    print('reading samples from: '+args.inpath)

dynamic_columns = [col for _, col in args.dynamic_minimum + args.dynamic_maximum]
Ndyn = len(dynamic_columns)

data, _ = utils.load(args.inpath, [args.eos_column]+args.copy_column+dynamic_columns, max_num_samples=args.max_num_samples)

N = 1+len(args.copy_column)
keep = data[:,1:N] ### the stuff we want to transfer over to the final file

dynamic_minima = dict((col, data[:,N+i]) for i, (col, _) in enumerate(args.dynamic_minimum)) ### the values defining the dynamic minima

N += len(args.dynamic_minimum)
dynamic_maxima = dict((col, data[:,N+i]) for i, (col, _) in enumerate(args.dynamic_maximum)) ### the values defining the dynamic maxima

data = data[:,0]
N = len(data)

#------------------------

if args.verbose:
    print('extacting maxima and minima')

ans = np.empty((N, Nkeep+2*Ncol), dtype=float)
ans[:,:Nkeep] = keep ### fill in existing data

path_template = os.path.join(args.eos_dir, 'DRAWmod%d'%args.eos_num_per_dir+'-%(moddraw)06d', args.eos_basename)

ans[:,Nkeep:] = utils.process2crossing(
    data,
    path_template,
    args.eos_num_per_dir,
    args.reference_column,
    args.reference_column_value,
    args.columns,
    static_ranges=ranges,
    dynamic_minima=dynamic_minima,
    dynamic_maxima=dynamic_maxima,
    verbose=args.Verbose,
)

if args.reference_column_value_is_column:
    col_first = '(first_%s@%s)'
    col_last = '(last_%s@%s)'
else:
    col_first = '(first_%s=%s)'
    col_last = '(last_%s=%s)'

col_first = col_max%(args.referene_column, args.reference_column_value)
col_last = col_min%(args.referene_column, args.reference_column_value)

outcols = [col for col in args.copy_column]
for column in args.columns:
    outcols += new_columns.get(column, [column+col_first, column+col_last])

#------------------------

if args.verbose:
    print('writing samples to: '+args.outpath)
np.savetxt(args.outpath, ans, comments='', delimiter=',', header=','.join(outcols))
