#!/usr/bin/env python

__doc__ = "a quick script to KDE some samples and generate conditioned probabilities"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os
import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality import utils
from universality import plot
from universality import stats

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

# required arguments
rgroup = parser.add_argument_group('required arguments')
rgroup.add_argument('-s', '--samples', required=True, nargs=2, default=[], type=str, action='append',
    help='e.g.: "--samples label path/to/samples.csv"')
rgroup.add_argument('column', type=str,
    help='the column over which we generate a 1D conditioned KDE')

# verbosity arguments
vgroup = parser.add_argument_group('verbosity arguments')
vgroup.add_argument('-v', '--verbose', default=False, action='store_true')
vgroup.add_argument('-V', '--Verbose', default=False, action='store_true')

# samples arguments
sgroup = parser.add_argument_group('samples-specific argument')
sgroup.add_argument('-m', '--max-num-samples', nargs=2, default=[], type=str, action='append',
    help='label max-num-samples pairs')
sgroup.add_argument('-w', '--weight-column', nargs=2, default=[], type=str, action='append',
    help='label column pairs. if provided, thie numerical values from this column will be used as weights in the KDE')
sgroup.add_argument('-W', '--weight-column-is-log', nargs=1, default=[], type=str,
    help='the label for samples for which this is true')

# column arguments
cgroup = parser.add_argument_group('column-specific arguments')
cgroup.add_argument('-c', '--condition', nargs=2, type=str, default=[], action='append',
    help='condition the KDE at these values')

cgroup.add_argument('-r', '--column-range', nargs=3, default=[], action='append', type=str,
    help='specify the ranges used in corner.corner (eg.: "--column-range column minimum maximum"). \
Can specify ranges for multiple columns by repeating this option. \
DEFAULT will use the minimum and maximum observed sample points.')

cgroup.add_argument('-b', '--column-bandwidth', nargs=2, default=[], type=str, action='append',
    help='the bandwidths used for each column specified. We assume diagonal covariance matricies in the Gaussian kernel. \
If you do not specify a bandwidth for a column, the default value (%.3f) will be used.'%utils.DEFAULT_BANDWIDTH)

cgroup.add_argument('-l', '--logcolumn', default=[], type=str, action='append',
    help='convert the values read in for this column to natural log. \
Can be repeated to specify multiple columns. \
DEFAULT=[]')
cgroup.add_argument('-L', '--column-label', type=str, default=None,
    help='replace the column name with this label in the corner plot.')
cgroup.add_argument('-T', '--column-truth', type=float, default=None,
    help='include this as an injected value for this column.')

# workflow options
wgroup = parser.add_argument_group('workflow options')
wgroup.add_argument('--num-points', default=plot.DEFAULT_NUM_POINTS, type=int,
    help='DEFAULT=%d'%plot.DEFAULT_NUM_POINTS)
wgroup.add_argument('--reflect', default=False, action='store_true',
    help='reflect the points about their boundaries within the KDE')
wgroup.add_argument('--prune', default=False, action='store_true',
    help='throw away samples that live outside the specified ranges')

# plotting options
pgroup = parser.add_argument_group('plotting options')
pgroup.add_argument('--color', nargs=2, action='append', default=[], type=str,
    help='e.g. "--color label c"')
pgroup.add_argument('--truth-color', default=plot.DEFAULT_TRUTH_COLOR, type=str)

pgroup.add_argument('--level', default=[], type=float, action='append',
    help='confidence level for the contour plots. Can be repeated to specify multiple levels.')

pgroup.add_argument('--figwidth', default=plot.DEFAULT_FIGWIDTH, type=float)
pgroup.add_argument('--figheight', default=plot.DEFAULT_FIGHEIGHT, type=float)

# ouptut options
ogroup = parser.add_argument_group('output options')

ogroup.add_argument('-o', '--output-dir', default='.', type=str)
ogroup.add_argument('-t', '--tag', default='', type=str)
ogroup.add_argument('--figtype', default=[], type=str, action='append')
ogroup.add_argument('--dpi', default=plot.DEFAULT_DPI, type=float)

args = parser.parse_args()

### finish parsing
names = [label for label, path in args.samples]

conditions = dict((column, float(val)) for column, val in args.condition)
columns = [args.column]+conditions.keys()
Ncol = len(columns)

# verbosity arguments
args.verbose |= args.Verbose

# samples arguments
max_num_samples = dict((label, np.infty) for label in names)
for label, num in args.max_num_samples:
    assert label in names, 'specifying --max-num-sample for unknown sample set: '+label
    max_num_samples[label] = int(num)

for label in args.weight_column_is_log:
    assert label in names, 'specifying --weight-column-is-log for unknown sample set: '+label
weight_columns = dict((label, (None, False)) for label in names)
for label, column in args.weight_column:
    assert label in names, 'specifying --weight-column for unknown sample set: '+label
    weight_columns[label] = (column, label in args.weight_column_is_log)

# column arguments
rangesdict = dict()
for column, _min, _max in args.column_range:
    assert column in columns, 'specifying --column-range for unknown column: '+column
    rangesdict[column] = (float(_min), float(_max))

bandwidthdict = dict()
for column, b in args.column_bandwidth:
    assert column in columns, 'specifying --column-bandwidth for unknown column: '+column
    bandwidthdict[column] = float(b)
variances = np.array([bandwidthdict.get(col, utils.DEFAULT_BANDWIDTH) for col in columns])**2

if args.column_label is None:
    args.column_label = '$'+args.column+'$'

# plotting options
colors = dict((label, plot.DEFAULT_COLOR1) for label in names)
for label, color in args.color:
    assert label in names, 'specifying --color for uknown sample set: '+label
    colors[label] = color

args.level.sort()

# output options
if args.tag:
    args.tag = "_"+args.tag

if not os.path.exists(args.output_dir):
    os.makedirs(args.output_dir)

if not args.figtype:
    args.figtype = plot.DEFAULT_FIGTYPES

#-------------------------------------------------

fig = plot.plt.figure(figsize=(args.figwidth, args.figheight))
ax = fig.gca()

samples = np.empty((args.num_points, Ncol), dtype=float) ### re-use this array repeatedly...
lines = dict((label, []) for label in names)

global_range = (np.infty, -np.infty)
for ind, (label, path) in enumerate(args.samples):
    if args.verbose:
        print('reading samples for %s from: %s'%(label, path))
    data, _ = utils.load(path, columns, logcolumns=args.logcolumn, max_num_samples=args.max_num_samples)

    ranges = []
    for i, col in enumerate(columns):
        if rangesdict.has_key(col):
            ranges.append(rangesdict[col])
        else:
            ranges.append((np.min(data[:,i]), np.max(data[:,i])))
    global_range = (min(global_range[0], ranges[0][0]), max(global_range[1], ranges[0][1]))

    weight_column, is_log = weight_columns[label]
    if weight_column is not None:
        if args.verbose:
            print('reading in non-trivial weights from: '+path)
        weights, _ = utils.load(path, [weight_column], max_num_samples=max_num_samples[label])
        weights = weights.reshape((len(weights)))

        if is_log:
            weights = np.exp(weights-np.max(weights))
        weights /= np.sum(weights)

    else:
        N = len(data)
        weights = np.ones(N, dtype='float')/N

    if args.prune:### throw away data that's outside the bounds
        data, weights = utils.prune(data, ranges, weights=weights)

    if args.reflect:
        data, weights = utils.reflect(data, ranges, weights=weights)

    #--------------------

    samples[:,0] = np.linspace(ranges[0][0], ranges[0][1], args.num_points) ### make the vector along which we sample
    dvect = samples[1,0]-samples[0,0]
    for i, column in enumerate(columns[1:]):
        samples[:,i+1] = conditions[column] # set everything else to be the conditioned value

    if args.Verbose:
        print('computing kde for '+label)
    logkde = utils.logkde(
        samples,
        data,
        variances,
        weights=weights,
    )
    kde = np.exp(logkde-np.max(logkde))
    kde /= np.sum(kde)*dvect

    ax.plot(samples[:,0], kde, color=colors[label])

    if args.level:
        for level, (m, M) in zip(args.level, stats.logkde2crbounds(samples[:,0], logkde, args.level)):
            if args.verbose:
                print('    @%.3f : [%.3e, %.3e]'%(level, m, M))
            lines[label].append((m, M))

# decorate

# now plot all the lines
ylim = ax.get_ylim()
for label, lines in lines.items():
    for m, M in lines:
        ax.plot([m]*2, ylim, color=colors[label], alpha=0.5)
        ax.plot([M]*2, ylim, color=colors[label], alpha=0.5)

if args.column_truth is not None:
    ax.plot([args.column_truth]*2, ylim, color=args.truth_color)

ax.set_ylim(ylim)
ax.set_xlim(global_range)

ax.set_xlabel(args.column_label)

ax.grid(True, which='both')

# save
plot.save('kde-conditioned-samples%s'%args.tag, fig, directory=args.output_dir, figtypes=args.figtype, dpi=args.dpi, verbose=args.verbose)
plot.plt.close(fig)
