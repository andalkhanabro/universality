#!/usr/bin/env python

"""integrate all EoS listed in a process. This is essentially a "batch" version of integrate-tov
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os

from argparse import ArgumentParser

### non-standard libraries
from universality.tov import sequences
from universality.utils import io

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('inpath', type=str)
parser.add_argument('central_pressurec2_range', nargs=2, type=float)

parser.add_argument('--pressurec2-column', default=sequences.DEFAULT_PRESSUREC2_COLUMN, type=str)
parser.add_argument('--energy_densityc2-column', default=sequences.DEFAULT_ENERGY_DENSITYC2_COLUMN, type=str)
parser.add_argument('--baryon_density-column', default=sequences.DEFAULT_BARYON_DENSITY_COLUMN, type=str)
parser.add_argument('--cs2c2-column', default=None, type=str)

parser.add_argument('--central-eos-column', default=[], type=str, action='append',
    help='record the values of these eos columns at the center of each stellar model')
parser.add_argument('--central-column-template', default=sequences.DEFAULT_CENTRAL_COLUMN_TEMPLATE, type=str,
    help='the template used to define column names associated with eos columns')

parser.add_argument('--formalism', default=sequences.DEFAULT_FORMALISM, type=str,
    help='must be one of: %s. DEFAULT=%s'%(', '.join(sequences.KNOWN_FORMALISMS), sequences.DEFAULT_FORMALISM))

parser.add_argument('--min-num-models', default=sequences.DEFAULT_MIN_NUM_MODELS, type=int)
parser.add_argument('--interpolator-rtol', default=sequences.DEFAULT_INTERPOLATOR_RTOL, type=float)
parser.add_argument('--integration-rtol', default=sequences.DEFAULT_INTEGRATION_RTOL, type=float)

parser.add_argument('--eos-column', default='EoS', type=str)
parser.add_argument('--eos-dir', default='.', type=str)
parser.add_argument('--eos-num-per-dir', default=1000, type=int)
parser.add_argument('--eos-basename', default='eos-draw-%(draw)06d.csv')
parser.add_argument('--macro-basename', default='macro-draw-%(draw)06d.csv', type=str)

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('-V', '--Verbose', default=False, action='store_true')

args = parser.parse_args()

assert args.formalism in sequences.KNOWN_FORMALISMS, '--formalism=%s not understood; must be one of %s'%(args.formalism, ', '.join(sequences.KNOWN_FORMALISMS))

min_central_pressurec2, max_central_pressurec2 = args.central_pressurec2_range

args.verbose |= args.Verbose

#-------------------------------------------------

### load process
if args.verbose:
    print('loading data from: '+args.inpath)
data, _ = io.load(args.inpath, [args.eos_column])
data = data[:,0]

### set up templates
dirtmp = os.path.join(args.eos_dir, 'DRAWmod%d'%args.eos_num_per_dir + '-%(moddraw)06d')
eostmp = os.path.join(dirtmp, args.eos_basename)
mactmp = os.path.join(dirtmp, args.macro_basename)

### iterate over process and solve for each EoS in turn
sequences.process2sequences(
    data,
    eostmp,
    mactmp,
    min_central_pressurec2,
    max_central_pressurec2,
    mod=args.eos_num_per_dir,
    pressurec2_column=args.pressurec2_column,
    energy_densityc2_column=args.energy_densityc2_column,
    baryon_density_column=args.baryon_density_column,
    cs2c2_column=args.cs2c2_column,
    central_eos_column=args.central_eos_column,
    central_column_template=args.central_column_template,
    formalism=args.formalism,
    min_num_models=args.min_num_models,
    interpolator_rtol=args.interpolator_rtol,
    integration_rtol=args.integration_rtol,
    verbose=args.verbose,
    Verbose=args.Verbose,
)
