#!/usr/bin/env python

__doc__ = "compute the mutual information distance between all pairs of sampled variables and rank them in terms of independence"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os
import sys
import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality import utils
from universality import plot

#-------------------------------------------------

DEFAULT_NUM_POINTS = 50

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('samples', type=str)
parser.add_argument('--weight-column', default=None, type=str)
parser.add_argument('--weight-column-is-log', default=False, action='store_true')

parser.add_argument("-v", '--verbose', default=False, action='store_true')
parser.add_argument("-V", '--Verbose', default=False, action='store_true')

parser.add_argument('--field', default=[], action='append')
parser.add_argument('--ignore', default=[], action='append')

parser.add_argument('-b', '--bandwidth', default=utils.DEFAULT_BANDWIDTH, type=float,
    help='DEFAULT=%f'%utils.DEFAULT_BANDWIDTH)
parser.add_argument('-n', '--num-points', default=DEFAULT_NUM_POINTS, type=int,
    help='DEFAULT=%d'%DEFAULT_NUM_POINTS)

parser.add_argument('-p', '--plot', default=False, action='store_true')
parser.add_argument('--plot-distribs', default=False, action='store_true')
parser.add_argument('--plot-stats', default=False, action='store_true')

parser.add_argument('--no-scatter', default=False, action='store_true')
parser.add_argument('--grid', default=False, action='store_true')

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-t', '--tag', default='', type=str)
parser.add_argument('--figtype', default=[], type=str, action='append')
parser.add_argument('--dpi', default=plot.DEFAULT_DPI, type=float)

args = parser.parse_args()

args.verbose |= args.Verbose

if not os.path.exists(args.output_dir):
    os.makedirs(args.output_dir)

if args.tag:
    args.tag = "_"+args.tag

args.plot_distribs |= args.plot
args.plot_stats |= args.plot

if not args.figtype:
    args.figtype = plot.DEFAULT_FIGTYPES

#-------------------------------------------------

### load data
if args.verbose:
    print('reading: '+args.samples)
data, columns = utils.load(args.samples)
Nsamp = len(data)
if args.verbose:
    print('found %d samples for %d columns'%(Nsamp, len(columns)))

if args.weight_column is not None:
    weights = utils.load(args.samples, [args.weight_column])[0][:,0]

    if args.weight_column_is_log:
        weights = np.exp(weights-np.max(weights))
    weights /= np.sum(weights)

    truth = weights>0
    data = data[:,truth]
    weights = weights[truth]
    Nsamp = len(data)
    if args.verbose:
        print('retained %d samples with non-zero weights'%Nsamp)

else:
    weights = np.ones(Nsamp, dtype=float)/Nsamp

if args.field:
    data = data[:,np.array([col in args.field for col in columns])]
    columns = [col for col in columns if col in args.field]

if args.ignore:
    truth = []
    for key in columns:
        for ignore in args.ignore: # check for partial matches in all ignores
            if ignore in key: # if you find one, do not add this key
                truth.append(False)
                break
        else:
            truth.append(True)
    data = data[:,np.array(truth)]
    columns = [col for col, indicator in zip(columns, truth) if indicator]

N = len(columns)
if args.verbose:
    print('retained %d columns'%N)

#-------------------------------------------------

### whiten and define ranges
data, means, std = utils.whiten(data, verbose=args.Verbose)
vect = [np.linspace(*utils.data2range(data[:,i]), num=args.num_points) for i in xrange(len(columns))]
variance = args.bandwidth**2
variances = np.array([variance, variance], dtype=float)

#-------------------------------------------------

### iterate and compute MID for each pair
truth = np.zeros(N, dtype=bool)

if args.verbose:
    print('computing KDEs for all %d pairs'%(N*(N-1)))

stats = []
kde1 = np.empty(args.num_points, dtype=float)
kde2 = np.empty(args.num_points, dtype=float)
kdej = np.empty(args.num_points*args.num_points, dtype=float)
kdei = np.empty(args.num_points*args.num_points, dtype=float)
bigvect = np.empty((args.num_points*args.num_points, 2), dtype=float)
TRUTH = np.empty(args.num_points*args.num_points, dtype=bool)

if args.plot_distribs:
    labels = [key.replace('_','\_') for key in columns]
    color = plot.weights2color(weights, 'k')

tmp = '    %6d /'+'%d'%(N*(N-1)/2)+': %s + %s'
i = 1
for ind in xrange(1, N):
    key1 = columns[ind]
    for jnd in xrange(ind):

        if i > 100: break

        key2 = columns[jnd]

        if args.verbose:
            print(tmp%(i, key1, key2))

        kde1[:] = utils.logkde(vect[ind], data[:,ind], variance, weights=weights)
        kde2[:] = utils.logkde(vect[jnd], data[:,jnd], variance, weights=weights)

        X1, X2 = np.meshgrid(vect[ind], vect[jnd], indexing='ij')
        truth[:] = False
        truth[ind] = truth[jnd] = True
        bigvect[:] = zip(X2.flatten(), X1.flatten())
        kdej[:] = utils.logkde(bigvect, data[:,truth], variances, weights=weights)

        # compute MID, approximating KDE as a discrete distribution on the grid
        kde1[:] = np.exp(kde1-np.max(kde1))
        kde1 /= np.sum(kde1)

        kde2[:] = np.exp(kde2-np.max(kde2))
        kde2 /= np.sum(kde2)

        kdej = np.exp(kdej-np.max(kdej))
        kdej /= np.sum(kdej)

        kdei[:] = np.outer(kde1, kde2).flatten() ### to get meshgrid right
        kdei /= np.sum(kdei) ### just to be safe...

        ### plot for visual inspection
        if args.plot_distribs:
            fig = plot.plt.figure()
            ax = fig.gca()

            if not args.no_scatter:
                ax.scatter(
                    data[:,ind]*std[ind] + means[ind],
                    data[:,jnd]*std[jnd] + means[jnd],
                    marker='o',
                    s=2,
                    color=color,
                )

            ax.contour( ### joint distribution
                vect[ind]*std[ind] + means[ind],
                vect[jnd]*std[jnd] + means[jnd],
                kdej.reshape((args.num_points, args.num_points)).transpose(),
                colors='b',
                levels=sorted(np.exp(plot.logkde2levels(np.log(kdej), [0.5, 0.9])), reverse=True),
            )
            ax.contour( ### product of marginals
                vect[ind]*std[ind] + means[ind],
                vect[jnd]*std[jnd] + means[jnd],
                kdei.reshape((args.num_points, args.num_points)).transpose(),
                colors='r',
                levels=sorted(np.exp(plot.logkde2levels(np.log(kdei), [0.5, 0.9])), reverse=True),
            )

            ax.set_xlim(xmin=min(vect[ind])*std[ind]+means[ind], xmax=max(vect[ind])*std[ind]+means[ind])
            ax.set_ylim(ymin=min(vect[jnd])*std[jnd]+means[jnd], ymax=max(vect[jnd])*std[jnd]+means[jnd])

            ax.set_xlabel(labels[ind])
            ax.set_ylabel(labels[jnd])

            fig.text(0.15, 0.95, 'joint distribution', color='b', ha='left', va='center')
            fig.text(0.90, 0.95, 'product of marginals', color='r', ha='right', va='center')

            ax.grid(args.grid, which='both')

            plot.save('mid_%s-%s%s'%(key1, key2, args.tag), fig, figtypes=args.figtype, directory=args.output_dir, verbose=args.Verbose, dpi=args.dpi)
            plot.plt.close(fig)

        ### compute statistics
        TRUTH[:] = kdej > 0

        mi = +np.sum(kdej[TRUTH]*np.log(kdej[TRUTH]/kdei[TRUTH]))
        hj = -np.sum(kdej[TRUTH]*np.log(kdej[TRUTH]))

        # sanity check the results with known bounds
        if mi > hj:
            raise ValueError('unphysical mutual information:\n    mi=%.6e\n    hj=%.6e'%(mi, hj))

        stats.append( ((key1, key2), (mi, hj, mi/hj)) )

        i += 1 ### increment counter for print statement

stats.sort(key=lambda l: l[1][2], reverse=True) # smaller MID first --> more correlated pairs first

#-------------------------------------------------

### write stats to disk
path = os.path.join(args.output_dir, "mid%s.txt"%args.tag)
if args.verbose:
    print('writing: '+path)
template='''\
%s vs %s
    mutual information:   %.6e
    joint entropy:        %.6e
    mutual info distance: %.6e'''
with open(path, 'w') as obj:
    for (key1, key2), (mi, hj, mid) in stats:
        print >> obj, template%(key1, key2, mi, hj, mid)

#-------------------------------------------------
### plot a histogram of the observed mids
if args.plot_stats:
    if args.verbose:
        print('plotting')

    fig = plot.plt.figure()
    ax = fig.gca()
    AX = ax.twinx()

    vals = [_[1][2] for _ in stats] ### plot log10(MID)

    # basic histogram
    bins = np.logspace(*np.log10(utils.data2range(vals, pad=0)), num=max(10, (N*(N-1)/2)**0.5))

    ax.hist(vals, bins=bins, histtype='step', normed=True, color='b')
    AX.hist(vals, bins=bins, histtype='step', normed=True, cumulative=1, color='r')

    ax.set_xlim(xmin=np.min(bins), xmax=np.max(bins))
    ax.set_xscale('log')
    AX.set_xlim(ax.get_xlim())
    AX.set_xscale(ax.get_xscale())

    AX.grid(args.grid, which='both')

    # decorate
    ax.set_xlabel('mutual information distance')
    ax.set_ylabel('pdf', color='b')
    AX.set_ylabel('cdf', color='r')

    # save
    plot.save('mid'+args.tag, fig, figtypes=args.figtype, directory=args.output_dir, verbose=args.verbose, dpi=args.dpi)
    plot.plt.close(fig)
