#!/usr/bin/env python

__doc__ = "a script that lets users investigate hyperparameters and different optimization/marginalization techniques"
__usage__ = "investigate_hyperparams [--options] xcolumn ycolumn eos.csv"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os

import numpy as np

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt

import corner

from optparse import OptionParser

### non-standard libraries
from universality import hyperparams as hp
from universality import utils

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__doc__)

parser.add_option('-v', '--verbose', default=False, action='store_true')

parser.add_option('', '--poly-degree', default=1, type='int')

parser.add_option('', '--log-xcolumn', default=False, action='store_true')
parser.add_option('', '--log-ycolumn', default=False, action='store_true')

parser.add_option('', '--min-sigma', default=1.e-4, type='float',
    help='DEFAULT=1e-4')
parser.add_option('', '--max-sigma', default=1., type='float',
    help='DEFAULT=1')

parser.add_option('', '--min-l', default=0.1, type='float',
    help='DEFAULT=0.1')
parser.add_option('', '--max-l', default=5.0, type='float',
    help='DEFAULT=5.0')

parser.add_option('', '--min-sigma_obs', default=1.e-4, type='float',
    help='DEFAULT=1e-4')
parser.add_option('', '--max-sigma_obs', default=1., type='float',
    help='DEFAULT=1')

parser.add_option('', '--num-grid', default=hp.__default_num__, type='int',
    help='the number of grid points in each dimension. \
DEFAULT=%d'%hp.__default_num__)

parser.add_option('', '--num-mcmc', default=hp.__default_num__, type='int',
    help='the number of samples to draw in mcmc. \
DEFAULT=%d'%hp.__default_num__)

parser.add_option('', '--num-walkers', default=hp.__default_num_walkers__, type='int',
    help='DEFAULT=%d'%hp.__default_num_walkers__)

parser.add_option('', '--maxL-method', default=hp.__default_method__, type='string',
    help='DEFAULT='+hp.__default_method__)

parser.add_option('', '--maxL-tol', default=hp.__default_tol__, type='float',
    help='DEFAULT=%s'%hp.__default_tol__)

parser.add_option('', '--l-prior', default='lin', type='string')
parser.add_option('', '--sigma-prior', default='log', type='string')
parser.add_option('', '--sigma_obs-prior', default='log', type='string')

parser.add_option('', '--grid', default=False, action='store_true')
parser.add_option('', '--mcmc', default=False, action='store_true')
parser.add_option('', '--maxL', default=False, action='store_true')

parser.add_option('', '--log-sigmas', default=False, action='store_true')
parser.add_option('', '--include-logL', default=False, action='store_true')
parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

opts, args = parser.parse_args()

assert len(args)>2, 'please supply at least 2 input arguments\n%s'%__usage__
assert np.any((opts.grid, opts.mcmc, opts.maxL)), 'please specify at least one of --grid, --mcmc, --maxL'

xcolumn, ycolumn = columns = args[:2]
inpath = args[2]

logcolumns = []
if opts.log_xcolumn:
    logcolumns.append(xcolumn)
if opts.log_ycolumn:
    logcolumns.append(ycolumn)

if opts.tag:
    opts.tag = "_"+opts.tag

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

#-------------------------------------------------

if opts.verbose:
    print('reading: '+inpath)
data, cols = utils.load(inpath, columns, logcolumns=logcolumns)
x_obs = data[:,0]
f_obs = data[:,1]

#--- now do some logLikelihood stuff!

overlayfig = None

if opts.log_sigmas:
    labels = ['$\log_{10}\sigma$', '$l$', '$\log_{10}\sigma_\mathrm{obs}$']
else:
    labels = ['$\sigma$', '$l$', '$\sigma_\mathrm{obs}$']
if opts.include_logL:
    labels.append('$\log\mathcal{L}$')

if opts.maxL:
    if opts.verbose:
        print('finding maxLikelihood')

    maxL = hp.logLike_maxL(
        f_obs,
        x_obs,
        (opts.min_sigma, opts.max_sigma),
        (opts.min_l, opts.max_l),
        (opts.min_sigma_obs, opts.max_sigma_obs),
        method=opts.maxL_method,
        tol=opts.maxL_tol,
        degree=opts.poly_degree,
    )
    print '''\
sigma = %.3e
l     = %.3f
sigma_obs = %.3e
logL = %.3e'''%tuple(maxL[0])

    ### add to overlay plot
    if opts.log_sigmas:
        truths = [np.log10(maxL['sigma'][0]), maxL['l'][0], np.log10(maxL['sigma_obs'][0])]
    else:
        truths = [maxL['sigma'][0], maxL['l'][0], maxL['sigma_obs'][0]]

    if opts.include_logL:
        truths.append(maxL['logLike'][0])

else:
    truths = None

#---

if opts.grid:
    if opts.verbose:
        print('evaluating on a grid')

    grid = hp.logLike_grid(
        f_obs,
        x_obs,
        (opts.min_sigma, opts.max_sigma),
        (opts.min_l, opts.max_l),
        (opts.min_sigma_obs, opts.max_sigma_obs),
        num_sigma=opts.num_grid,
        num_l=opts.num_grid,
        num_sigma_obs=opts.num_grid,
        l_prior=opts.l_prior,
        sigma_prior=opts.sigma_prior,
        sigma_obs_prior=opts.sigma_obs_prior,
        degree=opts.poly_degree,
    )

    if opts.include_logL:
        if opts.log_sigmas:
            data = np.transpose([np.log10(grid['sigma']), grid['l'], np.log10(grid['sigma_obs']), grid['logLike']])
        else:
            data = np.transpose([grid['sigma'], grid['l'], grid['sigma_obs'], grid['logLike']])
    else:
        if opts.log_sigmas:
            data = np.transpose([np.log10(grid['sigma']), grid['l'], np.log10(grid['sigma_obs'])])
        else:
            data = np.transpose([grid['sigma'], grid['l'], grid['sigma_obs']])

    weights = np.exp(grid['logLike']-np.max(grid['logLike']))
    weights /= np.sum(weights)

    if opts.verbose:
        print('    plotting')
    fig = corner.corner(
        data,
        labels=labels,
        weights=weights,
        truths=truths,
        color='b',
    )
    figname = '%s/investigate_hyperparams-grid%s.png'%(opts.output_dir, opts.tag)
    if opts.verbose:
        print('    saving: '+figname)
    fig.savefig(figname)
    plt.close(fig)

    ### add to overlay plot
    overlayfig = corner.corner(
        data,
        labels=labels,
        weights=weights,
        color='b',
        truths=truths,
        fig=overlayfig,
    )

#---

if opts.mcmc:
    if opts.verbose:
        print('running mcmc')

    mcmc = hp.logLike_mcmc(
        f_obs,
        x_obs,
        (opts.min_sigma, opts.max_sigma),
        (opts.min_l, opts.max_l),
        (opts.min_sigma_obs, opts.max_sigma_obs),
        num_samples=opts.num_mcmc,
        num_walkers=opts.num_walkers,
        l_prior=opts.l_prior,
        sigma_prior=opts.sigma_prior,
        sigma_obs_prior=opts.sigma_obs_prior,
        degree=opts.poly_degree,
    )

    if opts.include_logL:
        if opts.log_sigmas:
            data = np.transpose([np.log10(mcmc['sigma']), mcmc['l'], np.log10(mcmc['sigma_obs']), mcmc['logLike']])
        else:
            data = np.transpose([mcmc['sigma'], mcmc['l'], mcmc['sigma_obs'], mcmc['logLike']])
    else:
        if opts.log_sigmas:
            data = np.transpose([np.log10(mcmc['sigma']), mcmc['l'], np.log10(mcmc['sigma_obs'])])
        else:
            data = np.transpose([mcmc['sigma'], mcmc['l'], mcmc['sigma_obs']])

    if opts.verbose:
        print('    plotting')
    fig = corner.corner(
        data,
        labels=labels,
        truths=truths,
        color='r',
    )
    figname = '%s/investigate_hyperparams-mcmc%s.png'%(opts.output_dir, opts.tag)
    if opts.verbose:
        print('    saving: '+figname)
    fig.savefig(figname)
    plt.close(fig)

    N = opts.num_walkers*opts.num_mcmc
    weights = np.ones(N, dtype='float')/N

    ### add to overlay plot
    overlayfig = corner.corner(
        data,
        labels=labels,
        weights=weights,
        color='r',
        truths=truths,
        fig=overlayfig,
    )

#--- wrap up overlay plot

if overlayfig:
    figname = '%s/investigate_hyperparams%s.png'%(opts.output_dir, opts.tag)
    if opts.verbose:
        print('saving: '+figname)
    overlayfig.savefig(figname)
    plt.close(overlayfig)
