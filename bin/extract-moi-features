#!/usr/bin/env python

"""a script that processes macroscipic relations between the mass and moment of inertia (MoI) in order to identify and characterize phase transitoins"""
__author__ = "reed.essick@gmail.com"

#-------------------------------------------------

import os
import sys
import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality.utils import io
from universality.properties import features
from universality.gaussianprocess import gaussianprocess as gp
from universality import plot as plt

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('eospath', type=str)
parser.add_argument("macropath", type=str)

parser.add_argument('--outpath', default=None,
    help='if specified, write to this file. Otherwise, print to stdout')

parser.add_argument('--macro2eos-central-baryon-density', nargs=2, default=('rhoc', 'baryon_density'), type=str,
    help='the mapping between a column name in the macro file to a column name in the eos file. \
This is used to look up EoS parameters associated with the central densities of interesting stellar configurations. \
e.g., "--macro2eos-central-baryon-density rhoc baryon_density"')

parser.add_argument("--eos-sound-speed-column", default="cs2c2", type=str)
parser.add_argument('--eos-reference-column', default=[], type=str, action='append')

parser.add_argument("--macro-mass-column", default='M', type=str)
parser.add_argument("--macro-moi-column", default='I', type=str)
parser.add_argument("--macro-reference-column", default=[], action='append', type=str,
    help='Columns for which we report the values at identified points. Can be used to identify different stellar models. \
For example, the central baryon density (rhoc) may be easier to connect to the EoS than just the mass and/or MoI')

parser.add_argument('--flatten-thr', default=0.0, type=float,
    help='the threshold on |dlnX/dlnrho| below which we set this to zero')
parser.add_argument('--smoothing-width', default=None, type=float,
    help='the std of a Gaussian kernel used to smooth our estimate of the absolute curvature. \
The kernel is defined over log(rhoc), and 0.02 seems to work well.')
parser.add_argument('--diff-thr', type=float, default=0.0,
    help='a threshold on how big the "dip" in arctan(dlnI/dlnM) must be for us to record the possible phase transition. \
This is useful for removing small numerical noise (likely from the somewhat "coarse grained" TOV solutions)')
parser.add_argument('--cs2c2-cofactor', type=float, default=1.0,
    help='a threshold on how big the ratio of sound speeds can be between the local minimum in arctan(dlnI/dlnM) and the preceeding running maximum in cs2c2. \
There are cases in which this helps reject things that stall the final collapse to a BH but do not look like obvious "classic" phase transitions in the sound speed.')

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('-V', '--Verbose', default=False, action='store_true')

parser.add_argument('-p', '--plot', default=False, action='store_true')
parser.add_argument('--energy-densityc2-column', default='energy_densityc2', type=str,
    help='only used if plotting')
parser.add_argument('--pressurec2-column', default='pressurec2', type=str,
    help='only used if plotting')
parser.add_argument('--figtype', default=[], type=str, action='append')

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-t', '--tag', default='', type=str)

args = parser.parse_args()

if args.tag:
    args.tag = "_"+args.tag

if not args.figtype:
    args.figtype.append('png')

args.verbose |= args.Verbose

macro_baryon_density_column, eos_baryon_density_column = args.macro2eos_central_baryon_density ### assign these to handy names

if args.plot:
    args.eos_reference_column += [args.energy_densityc2_column, args.pressurec2_column]

#-------------------------------------------------

if args.verbose:
    print('loading eos data from: '+args.eospath)
eos_data, eos_cols = io.load(args.eospath, [eos_baryon_density_column, args.eos_sound_speed_column]+args.eos_reference_column)
baryon_density = eos_data[:,eos_cols.index(eos_baryon_density_column)]
eos_data = eos_data[np.argsort(baryon_density)] ### sort so we increase in baryon density

# separate things in a way that's convenient
baryon_density = eos_data[:,eos_cols.index(eos_baryon_density_column)]
cs2c2 = eos_data[:,eos_cols.index(args.eos_sound_speed_column)]

#------------------------

if args.verbose:
    print('loading macro data from: '+args.macropath)
macro_data, macro_cols = io.load(args.macropath, [args.macro_mass_column, args.macro_moi_column, macro_baryon_density_column]+args.macro_reference_column)

### make sure we order the result by increasing rhoc (which should be the default, but we need to check)
rhoc = macro_data[:,macro_cols.index(macro_baryon_density_column)]
macro_data = macro_data[np.argsort(rhoc)]

# separate things in a way that's convenient
M = macro_data[:,macro_cols.index(args.macro_mass_column)]
I = macro_data[:,marco_cols.index(args.macro_moi_column)]
rhoc = macro_data[:,macro_cols.index(macro_baryon_density_column)]

#------------------------

if args.verbose:
    print('extracting features of possible phase transitions')
params, names = features.data2moi_features(
    rhoc,
    M,
    I,
    baryon_density,
    cs2c2,
    macro_data,
    macro_cols,
    eos_data,
    eos_cols,
    flatten_thr=args.flatten_thr,
    smoothing_width=args.smoothing_width,
    diff_thr=args.diff_thr,
    cs2c2_cofactor=args.cs2c2_cofactor,
    verbose=args.Verbose,
)

if args.outpath is not None:
    if args.verbose:
        print('saving parameters of %d identified phase transitions to: %s'%(len(params), args.outpath))
else:
    args.outpath = sys.stdout
io.write(args.outpath, params, names)

#-------------------------------------------------

if args.plot: ### make a big ol' plot
    if args.verbose:
        print('plotting the identified phase transitions')

    TEMPLATES = [
        (features.MAX_CS2C2_TEMPLATE, 'm'),
        (features.MIN_CS2C2_TEMPLATE, 'r'),
        (features.MIN_ARCTAN_DLNI_DLNM_TEMPLATE, 'b'),
    ]

    ### things that will be plotted against rhoc

    ### compute basis of indicator variable
    arctan_dlnI_dlnM, (spurious, dlnM_drhoc, dlnI_drhoc) = features.arctan_transform(rhoc, M, I, flatten_thr=args.flatten_thr, smoothing_width=args.smoothing_width)

    macro_y = [
        ('M', r'$M\ [M_\odot]$', M, 'linear'),
        ('dlnM_dlnrhoc', r'$d\ln M/d\ln \rho_c$', dlnM_drhoc*rhoc, 'linear'),
        ('I', r'$I\ [\mathrm{some units}]$', I, 'linear'),
        ('dlnI_dlnrhoc', r'$d\ln I/d\ln \rho_c$', dlnI_drhoc*rhoc, 'linear'),
        ('arctan_dlnI_dlnM', r'$\mathrm{arctan}(d\ln I/d\ln M)$', arctan_dlnI_dlnM, 'linear'),
    ]

    ### things that will be plotted against baryon_density
    pressurec2 = eos_data[:,eos_cols.index(args.pressurec2_column)]

    dcs2c2_deps = gp.num_dfdx(energy_densityc2, cs2c2)
    dcs2c2_dp = gp.num_dfdx(pressurec2, cs2c2)

    d2cs2c2_dp2 = gp.num_dfdx(pressurec2, dcs2c2_dp) * pressurec2**2

    d2cs2c2_deps2 = gp.num_dfdx(energy_densityc2, dcs2c2_deps) * energy_densityc2**2
    d2cs2c2_dlneps2 = gp.num_dfdx(energy_densityc2, dcs2c2_deps * energy_densityc2) * energy_densityc2

    micro_y = [
        ('pressurec2', '$p/c^2\ [\mathrm{g}/\mathrm{cm}^2]$', pressurec2, 'log', (1e11, 1e16)),
        ('cs2c2', '$c_s^2/c^2$', cs2c2, 'log', (1e-3, 1.0)),
#        ('d(cs2c2_d(lnenergy_densityc2)', '$dc_s^2/d\ln\epsilon$', dcs2c2_deps * energy_densityc2, 'linear', (-2, +2)),
#        ('d(cs2c2_d(lnenergy_densityc2)', '$dc_s^2/d\ln p $', dcs2c2_dp * pressurec2, 'linear', (-2, +2)),
        ('d(cs2c2_d(lnenergy_densityc2)', '$dc_s^2/d\epsilon$', dcs2c2_deps, 'linear', (-1e-14, +1e-14)),
        ('d(cs2c2_d(lnenergy_densityc2)', '$dc_s^2/dp $', dcs2c2_dp, 'linear', (-1e-13, +1e-13)),
        ('does not matter', r'$\left|d^2c_s^2/d\epsilon^2\right|\epsilon^2$', np.abs(d2cs2c2_deps2), 'log', (1e-2, 1e+2)), 
        ('not applicable', r'$\left|d^2c_s^2/dp^2\right|p^2$', np.abs(d2cs2c2_dp2), 'log', (1e-2, 1e+1)),
#        ('d(d(cs2c2)_d(lnenergy_densityc2))_d(lnenergy_densityc2)', r'$\left|d^2c_s^2/d\ln\epsilon^2\right|$', np.abs(d2cs2c2_dlneps2), 'log', (1e-2, 1e+1)),
#        ('does not matter', r'$\left(d^2c_s^2/d\epsilon^2\right)\epsilon^2$', d2cs2c2_deps2, 'linear', None), 
#        ('d(d(cs2c2)_d(lnenergy_densityc2))_d(lnenergy_densityc2)', '$d^2c_s^2/d\ln\epsilon^2$', d2cs2c2_dlneps2, 'linear', None),
    ]

    ### actually make the figure
    Nrow = max(len(macro_y), len(micro_y))

    fig = plt.figure(figsize=(10, 3*Nrow))

    line_kwargs = dict(linestyle='solid', marker='o', markersize=2, color='k', alpha=0.75)
    marker_kwargs = dict(marker='o', markerfacecolor='none', linestyle='none', markersize=4, markeredgewidth=1)

    ### plot the things that go vs rhoc
    row = 1

    for name, label, vec, scale in macro_y:
        ax = plt.plt.subplot(Nrow, 2, row)

        ### plot the main curve
        ax.plot(rhoc, vec, **line_kwargs)

        ### decorate
        ax.set_ylabel(label)
        plt.setp(ax.get_xticklabels(), visible=False)

        ax.set_xscale('log')
        ax.set_xlim(xmin=2.0e14, xmax=4.0e15) ### FIXME: don't hard-code this?

        ax.set_yscale(scale)

        ax.grid(True, which='both')

        # annotate points corresponding to params!
        ylim = ax.get_ylim()
        for tmp, color in TEMPLATES:
            start = params[:,names.index(tmp%macro_baryon_density_column)] ### NOTE: using the macro value here instead of the eos value
            y = np.interp(start, rhoc, vec)
            ax.plot(start, y, markeredgecolor=color, **marker_kwargs)
            for X in start:
                ax.plot([X]*2, ylim, color=color)

        # shade unstable regions
        if (name == 'dlnM_dlnrhoc') and (ylim[0] < 0):
            xlim = ax.get_xlim()
            ax.fill_between(xlim, [ylim[0]]*2, [0]*2, color='grey', alpha=0.25)
            ax.set_xlim(xlim)

        elif (name == 'arctan_dlnI_dlnM') and (ylim[0] < -np.pi/2):
            xlim = ax.get_xlim()
            ax.fill_between(xlim, [ylim[0]]*2, [-np.pi/2]*2, color='grey', alpha=0.25)
            ax.set_xlim(xlim)
            
        ax.set_ylim(ylim)

        # increment the row number
        row += 2 

    ### finish decoration
    ax.set_xlabel(r'$\rho_c\ [\mathrm{g}/\mathrm{cm}^3]$')
    plt.setp(ax.get_xticklabels(), visible=True)

    ### plot the things that go vs baryon_density
    row = 2
    for name, label, vec, scale, ylim in micro_y:
        ax = plt.plt.subplot(Nrow, 2, row)

        ### plot the main curve
        ax.plot(baryon_density, vec, **line_kwargs)

        ### decorate
        ax.set_ylabel(label)
        plt.setp(ax.get_xticklabels(), visible=False)

        ax.set_xscale('log')
        ax.set_xlim(xmin=3e13, xmax=1e16) ### FIXME: don't hard-code this?

        ax.set_yscale(scale)
        ax.yaxis.tick_right()
        ax.yaxis.set_label_position('right')

        ax.grid(True, which='both')

        # annotate points corresponding to params!
        if ylim is None:
            ylim = ax.get_ylim()

        for tmp, color in TEMPLATES:
            start = params[:,names.index(tmp%eos_baryon_density_column)] ### NOTE: using the eos value here instead of the macro value
            y = np.interp(start, baryon_density, vec)
            ax.plot(start, y, markeredgecolor=color, **marker_kwargs)
            for X in start:
                ax.plot([X]*2, ylim, color=color)

        ax.set_ylim(ylim)

        # increment the row number
        row += 2

    ### finish decoration
    ax.set_xlabel(r'$\rho_c\ [\mathrm{g}/\mathrm{cm}^3]$')
    plt.setp(ax.get_xticklabels(), visible=True)

    plt.plt.subplots_adjust(top=0.98, bottom=0.05, left=0.10, right=0.90, hspace=0.02, wspace=0.02)
    
    ### save
    plt.save('extract-moi-features%s'%args.tag, fig, figtypes=args.figtype, directory=args.output_dir, verbose=args.verbose)
    plt.close(fig)
