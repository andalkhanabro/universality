#!/usr/bin/env python

__description__ = "draw realizations of the process stored in process.pkl and write them into separate CSV files"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os
import sys
import pickle

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality import utils
from universality import gaussianprocess as gp
from universality import plot
from universality import stats

#-------------------------------------------------

DEFAULT_NUM_DRAWS = 1
DEFAULT_NUM_PER_DIRECTORY = 1000

#-------------------------------------------------

HEADER = '%s,%s'

FOOTER = '''\
# poly_degree = %(poly_degree)d
# sigma = %(sigma).9f
# length_scale = %(length_scale).9f
# sigma_obs = %(sigma_obs).9f)'''
EXTRA_FOOTER = '''
# model_multiplier = %(model_multiplier).9f'''

def footer(hyperparams):
    ans = FOOTER%hyperparams
    if hyperparams['model_multiplier'] is not None:
        ans += EXTRA_FOOTER%hyperparams
    return ans
    
#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

### required arguments
rgroup = parser.add_argument_group('required arguments')
rgroup.add_argument('hdf5path', type=str)

### verbosity options
vgroup = parser.add_argument_group('verbosity options')
vgroup.add_argument('-v', '--verbose', default=False, action='store_true')

### workflow options
wgroup = parser.add_argument_group('workflow options')
wgroup.add_argument('-n', '--num-draws', default=DEFAULT_NUM_DRAWS, type=int,
    help='DEFAULT=%d'%DEFAULT_NUM_DRAWS)
wgroup.add_argument('-N', '--num-per-directory', default=DEFAULT_NUM_PER_DIRECTORY, type=int,
    help='DEFAULT=%d'%DEFAULT_NUM_PER_DIRECTORY)

wgroup.add_argument('-p', '--plot', default=False, action='store_true')

### output options
ogroup = parser.add_argument_group('output options')
ogroup.add_argument('-o', '--output-dir', default='.', type=str)
ogroup.add_argument('-t', '--tag', default='', type=str)
ogroup.add_argument('--figtype', default=[], type=str, action='append')
ogroup.add_argument('--dpi', default=plot.DEFAULT_DPI, type=float)

args = parser.parse_args()

if not os.path.exists(args.output_dir):
    os.makedirs(args.output_dir)

if args.tag:
    args.tag = "_"+args.tag

if not args.figtype:
    args.figtype = plot.DEFAULT_FIGTYPES

#-------------------------------------------------

### read in the process
if args.verbose:
    print('reading process from: '+args.hdf5path)
model = gp.hdf5load(args.hdf5path)
assert len(model), 'mixture model must have at least 1 element!'
weights = np.array([m['weight'] for m in model])
max_weight = np.max(weights)

if args.plot:
    fig, ax = plot.overlay_model(model)
    ax.grid(True, which='both')

### draw a bunch of realizations of the process
directory = os.path.join(args.output_dir, 'DRAWmod%d'%args.num_per_directory+'-%(moddraw)06d')
path = os.path.join(directory, 'draw-gpr'+args.tag+'-%(draw)06d.csv') # for generating filenames

header = HEADER%(model[0]['labels']['xlabel'], model[0]['labels']['flabel']) ### assume the mixture model is sane... 

if args.verbose:
    tmp = '\r[ %6d / '+'%6d ] '%(args.num_draws)+' saving: %s'            # for reporting progress
for i, (ind, color) in enumerate(zip(utils.draw_from_weights(weights, size=args.num_draws), plot.weights2color(np.ones(args.num_draws, dtype=float)/args.num_draws, 'b', prefact=10., minimum=0.))):
    fmt = {'draw':i, 'moddraw':i//args.num_per_directory} ### only allow a certain number of EoSs within each subdirectory

    csvdir = directory%fmt
    csvpath = path%fmt
    if not os.path.exists(csvdir):
        os.makedirs(csvdir)
    if args.verbose:
        sys.stdout.write(tmp%(i+1, csvpath))
        sys.stdout.flush()

    # draw the realization
    m = model[ind]
    x_tst = m['x']
    y_tst = np.random.multivariate_normal(m['f'], m['cov'])

    # write the realization to disk
    np.savetxt(
        csvpath,
        zip(x_tst, y_tst),
        header=header,
        footer=footer(m['hyperparams']),
        comments='',
        delimiter=',',
    )

    # add to plot
    if args.plot:
        plot.overlay([(x_tst, y_tst, str(i))], color=color, figtup=(fig, ax))

if args.verbose:
    sys.stdout.write('\n')

if args.plot:
    ax.set_xlim(xmin=xmin, xmax=xmax)
    plot.save('draw-gpr%s'%args.tag, fig, figtypes=args.figtype, directory=args.output_dir, verbose=args.verbose, dpi=args.dpi)
    plot.close(fig)
