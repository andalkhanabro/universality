#!/usr/bin/env python

__description__ = "draw realizations of the process stored in process.pkl and write them into separate CSV files"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os
import sys
import pickle

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality import utils
from universality import gaussianprocess as gp
from universality import plot

#-------------------------------------------------

DEFAULT_NUM_DRAWS = 1

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

### required arguments
rgroup = parser.add_argument_group('required arguments')
rgroup.add_argument('hdf5path', type=str)

### verbosity options
vgroup = parser.add_argument_group('verbosity options')
vgroup.add_argument('-v', '--verbose', default=False, action='store_true')

### workflow options
wgroup = parser.add_argument_group('workflow options')
wgroup.add_argument('-n', '--num-draws', default=DEFAULT_NUM_DRAWS, type=int,
    help='DEFAULT=%d'%DEFAULT_NUM_DRAWS)
wgroup.add_argument('-p', '--plot', default=False, action='store_true')

### output options
ogroup = parser.add_argument_group('output options')
ogroup.add_argument('-o', '--output-dir', default='.', type=str)
ogroup.add_argument('-t', '--tag', default='', type=str)
ogroup.add_argument('--figtype', default=[], type=str, action='append')
ogroup.add_argument('--dpi', default=plot.DEFAULT_DPI, type=float)

args = parser.parse_args()

if not os.path.exists(args.output_dir):
    os.makedirs(args.output_dir)

if args.tag:
    args.tag = "_"+args.tag

if not args.figtype:
    args.figtype = plot.DEFAULT_FIGTYPES

#-------------------------------------------------

### read in the process
if args.verbose:
    print('reading process from: '+args.hdf5path)
model = gp.hdf5load(args.hdf5path)
assert len(model), 'mixture model must have at least 1 element!'
weights = np.array([m['weight'] for m in model])
max_weight = np.max(weights)

if args.plot:
    fig = plot.plt.figure()
    ax = fig.gca()

    xmin = np.infty
    xmax = -np.infty
    for m in model:
        x_tst = m['x']
        mean = m['f']
        s = np.diag(m['cov'])**0.5 ### plot 1-sigma regions
        ax.fill_between(x_tst, mean+s, mean-s, color='grey', alpha=0.25*m['weight']/max_weight)
        ax.plot(x_tst, mean, color='k', alpha=m['weight']/max_weight)

        xmin = min(xmin, np.min(x_tst))
        xmax = max(xmax, np.max(x_tst))

    xlabel = m['labels']['xlabel'] ### assume everything here has the same xlabel and flabel
    flabel = m['labels']['flabel']

    ax.set_xlabel(xlabel)
    ax.set_ylabel(flabel)

    ax.grid(True, which='both')

### draw a bunch of realizations of the process
path = os.path.join(args.output_dir, 'draw-gpr'+args.tag+'-%06d.csv') # for generating filenames
tmp = '\r[ %6d / '+'%6d ] '%(args.num_draws)+' saving: %s'            # for reporting progress
header = '%s,%s'%(xlabel, flabel)                                     # for writing file contents
row = '%.9e,%.9e'

for i, ind in enumerate(utils.draw_from_weights(weights, size=args.num_draws)):
    csvpath = path%i
    if args.verbose:
        sys.stdout.write(tmp%(i+1, path))
        sys.stdout.flush()

    # draw the realization
    m = model[ind]
    x_txt = m['x']

    y_tst = np.random.multivariate_normal(m['f'], m['cov'])

    # write the realization to disk
    np.savetxt(csvpath, zip(x_tst, y_tst), header=header, comments='', delimiter=',')
#    with open(csvpath, 'w') as file_obj:
#        print >> file_obj, header
#        for sample in zip(x_tst, y_tst):
#            print >> file_obj, row%sample

    # add to plot
    if args.plot:
        ax.plot(x_tst, y_tst, color='b', alpha=min(0.25, 10./args.num_draws))

if args.verbose:
    sys.stdout.write('\n')

if args.plot:
    ax.set_xlim(xmin=xmin, xmax=xmax)
    plot.save('draw-gpr%s'%args.tag, fig, figtypes=args.figtype, directory=args.output_dir, verbose=args.verbose, dpi=args.dpi)
    plot.plt.close(fig)
