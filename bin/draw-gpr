#!/usr/bin/env python3

"""draw realizations of the process stored in process.pkl and write them into separate CSV files.
If requested, can also integrate these processes to get "final EoS CSVs" by numerically integrating phi=log(de/dp - 1) to obtain e(p). This is done in a profoundly naive way via a simple trapazoidal approximation. Increased acccuracy can be gained by increasing the number of sample points in phi.csv. 
NOTE: 
  reference_pressurec2 should be specified in g/cm^3. The integral is performed over all samples in phi.csv (we assign one value for energy_density for each pressure). Furthermore, we require phi.csv to have logpressurec2 and phi as columns.

Stitching to set the initial condition is done by matching to a known crust from Douchin+Haensel, arXiv:0111092. The value of the energy density is matched to the crust's prediction at log(pressurec2) = N(log(reference_pressurec2), sigma_logpressurec2).
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os
import sys
import pickle

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality.utils import (io, utils)

from universality import eos
from universality.utils import (io, units, utils)
from universality.gaussianprocess import gaussianprocess as gp
from universality.gaussianprocess.utils import (integrate_phi, DEFAULT_SIGMA_LOGPRESSUREC2)

from universality import plot
from universality import stats

#-------------------------------------------------

DEFAULT_NUM_DRAWS = 1
DEFAULT_NUM_PER_DIRECTORY = 1000

#-------------------------------------------------

FOOTER = '''\
# poly_degree = %(poly_degree)d
# sigma = %(sigma).9f
# length_scale = %(length_scale).9f
# sigma_obs = %(sigma_obs).9f'''
EXTRA_FOOTER = '''
# model_multiplier = %(model_multiplier).9f'''

def footer(hyperparams):
    ans = FOOTER%hyperparams
    if hyperparams['model_multiplier'] is not None:
        ans += EXTRA_FOOTER%hyperparams
    return ans
    
#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

### required arguments
rgroup = parser.add_argument_group('required arguments')
rgroup.add_argument('hdf5path', type=str)

### verbosity options
vgroup = parser.add_argument_group('verbosity options')
vgroup.add_argument('-v', '--verbose', default=False, action='store_true')

### workflow options
wgroup = parser.add_argument_group('workflow options')
wgroup.add_argument('-s', '--start', default=0, type=int,
    help='the index at which we start counting. Specifying this can help avoid conflicts if \
we parallelize the draws across multiple processes. \
DEFAULT=0')
wgroup.add_argument('-n', '--num-draws', default=DEFAULT_NUM_DRAWS, type=int,
    help='DEFAULT=%d'%DEFAULT_NUM_DRAWS)
wgroup.add_argument('-N', '--num-per-directory', default=DEFAULT_NUM_PER_DIRECTORY, type=int,
    help='DEFAULT=%d'%DEFAULT_NUM_PER_DIRECTORY)

wgroup.add_argument('-p', '--plot', default=False, action='store_true')

### integrate options
igroup = parser.add_argument_group('integration options')

igroup.add_argument('--integrate-phi', default=False, action='store_true',
    help='integrate phi to get the EoS after drawing a realization.')

igroup.add_argument('--reference-pressurec2', default=3e11, type=float,
    help='DEFAULT=3e11')

igroup.add_argument('--exclude-baryon-density', default=False, action='store_true')
igroup.add_argument('--include-cs2c2', default=False, action='store_true')
igroup.add_argument('--include-baryon-chemical-potential', default=False, action='store_true')

igroup.add_argument('--sigma-logpressurec2', default=DEFAULT_SIGMA_LOGPRESSUREC2, type=float,
    help='The reference pressurec2 used is drawn from a log-normal distribution (natural log) with the mean specified as an argument and this option as the standard deviation. NOTE: this is the standard deviation of the log(pressure/c^2) where pressure/c^2 is measured in g/cm^3. The reference pressure, however, is still specified in g/cm^3 and NOT log(pressure/c^2).')
igroup.add_argument('--stitch-below-reference-pressure', default=False, action='store_true',
    help='if supplied, report the values from the piecewise polytropic EOS below reference_pressure rather than continuing the drawn EOS below the stitching point.')
igroup.add_argument('--crust-eos', default=eos.DEFAULT_CRUST_EOS, type=str,
    help='the eos used at the crust when stitching. \
DEFAULT='+eos.DEFAULT_CRUST_EOS)

### output options
ogroup = parser.add_argument_group('output options')
ogroup.add_argument('-o', '--output-dir', default='.', type=str)
ogroup.add_argument('-t', '--tag', default='', type=str)
ogroup.add_argument('--figtype', default=[], type=str, action='append')
ogroup.add_argument('--dpi', default=plot.DEFAULT_DPI, type=float)

args = parser.parse_args()

if args.output_dir and (not os.path.exists(args.output_dir)):
    os.makedirs(args.output_dir)

if args.tag:
    args.tag = "_"+args.tag

if not args.figtype:
    args.figtype = plot.DEFAULT_FIGTYPES

#-------------------------------------------------

if args.integrate_phi:
    if args.verbose:
        print('loading crust from: '+args.crust_eos)
    eos.set_crust(crust_eos=args.crust_eos)

#-------------------------------------------------

### read in the process
if args.verbose:
    print('reading process from: '+args.hdf5path)
model = gp.hdf5load(args.hdf5path)
assert len(model), 'mixture model must have at least 1 element!'
weights = np.array([m['weight'] for m in model])
max_weight = np.max(weights)

if args.plot:
    fig, ax = plot.overlay_model(model)
    ax.grid(True, which='both')

### draw a bunch of realizations of the process
directory = os.path.join(args.output_dir, 'DRAWmod%d'%args.num_per_directory+'-%(moddraw)06d')
path = os.path.join(directory, 'draw-gpr'+args.tag+'-%(draw)06d.csv') # for generating filenames

header = (model[0]['labels']['xlabel'], model[0]['labels']['flabel']) ### assume the mixture model is sane... 

if args.integrate_phi:
    assert (header[0]=='log(pressurec2)') and (header[1]=='phi'), 'unexpected labels for GP ordinate and/or abscissa'
    eospath = os.path.join(directory, 'eos-draw'+args.tag+'-%(draw)06d.csv')

if args.verbose:
    tmp = '\r[ %6d / '+'%6d ] '%(args.num_draws)+' saving: %s'            # for reporting progress

for i, (ind, color) in enumerate(zip(\
        utils.draw_from_weights(weights, size=args.num_draws),
        plot.weights2color(np.ones(args.num_draws, dtype=float)/args.num_draws, 'b', prefact=0.25, minimum=0.)
    )):
    index = i + args.start ### increment by the starting index
    fmt = {'draw':index, 'moddraw':index//args.num_per_directory} ### only allow a certain number of EoSs within each subdirectory

    csvdir = directory%fmt
    csvpath = path%fmt
    if not os.path.exists(csvdir):
        os.makedirs(csvdir)
    if args.verbose:
        sys.stdout.write(tmp%(i+1, csvpath))
        sys.stdout.flush()

    # draw the realization
    m = model[ind]
    x_tst = m['x']
    y_tst = np.random.multivariate_normal(m['f'], m['cov'])

    # write the realization to disk
    io.write(csvpath, np.transpose([x_tst, y_tst]), header, footer=footer(m['hyperparams']))

    # add to plot
    if args.plot:
        plot.overlay([(x_tst, y_tst, str(index))], colors=[color], alphas=[0.25], figtup=(fig, ax))

    # integrate
    if args.integrate_phi:
        csvpath = eospath%fmt
        if args.verbose:
            sys.stdout.write(tmp%(i+1, csvpath))
            sys.stdout.flush()

        data, cols = integrate_phi(
            np.exp(x_tst), ### pressurec2
            y_tst, ### phi
            args.reference_pressurec2,
            sigma_logpressurec2=args.sigma_logpressurec2,
            stitch_below_reference_pressure=args.stitch_below_reference_pressure,
            include_baryon_density=not args.exclude_baryon_density,
            include_cs2c2=args.include_cs2c2,
            include_baryon_chemical_potential=args.include_baryon_chemical_potential,
        )

        io.write(csvpath, data, cols)

if args.verbose:
    sys.stdout.write('\n')

if args.plot:
    plot.save('draw-gpr%s'%args.tag, fig, figtypes=args.figtype, directory=args.output_dir, verbose=args.verbose, dpi=args.dpi)
    plot.close(fig)
