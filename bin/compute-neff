#!/usr/bin/env python

"""a quick little script to compute the effective number of samples
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os
import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality.utils import (utils, io)
from universality import stats

#-------------------------------------------------

HEAD = 'total number | I(base 2) | H(base 2) |     Neff     |     Nkde     | path'
ROW = '%12d | %9.3f | %9.3f | %12.3f | %12.3f | %s'
WARNING = "WARNING: %s does not exist!"

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('samples', nargs='+', type=str)

parser.add_argument('-v', '--verbose', default=False, action='store_true')

parser.add_argument('--max-num-samples', default=io.DEFAULT_MAX_NUM_SAMPLES, type=int)
parser.add_argument('--weight-column', default=[], type=str, action='append')
parser.add_argument('--weight-column-is-log', default=[], type=str, action='append')

parser.add_argument('--logcolumn', default=[], type=str, action='append',
    help='convert the values read in for this column to natural log. \
Can be repeated to specify multiple columns. \
DEFAULT=[]')
parser.add_argument('--range', nargs=3, default=[], action='append', type=str,
    help='specify the ranges used in corner.corner (eg.: "--range column minimum maximum"). \
Can specify ranges for multiple columns by repeating this option. \
DEFAULT will use the minimum and maximum observed sample points.')
parser.add_argument('--prune', default=False, action='store_true')

args = parser.parse_args()

if args.prune:
    rangesdict = dict((column,(float(_min), float(_max))) for column, _min, _max in args.range)
    columns = rangesdict.keys()
    ranges = [rangedict[col] for col in columns]

#-------------------------------------------------

print(HEAD)
for inpath in args.samples:
    if not os.path.exists(inpath):
        if args.verbose:
            print(WARNING%inpath)
        continue ### just skip crap that doesn't exist...

    if args.weight_column:
        weights = io.load_weights(inpath, args.weight_column, logweightcolumns=args.weight_column_is_log, max_num_samples=args.max_num_samples)

    else:
        N = len(io.load(inpath)[0]) ### don't hold onto the data because we don't need it
        weights = np.ones(N, dtype='float')/N

    if args.prune:### throw away data that's outside the bounds
        data, columns = io.load(inpath, columns, logcolumns=args.logcolumn, max_num_samples=args.max_num_samples)
        data, weights = utils.prune(data, ranges, weights=weights)

    print(ROW%(len(weights), stats.information(weights, base=2), stats.entropy(weights, base=2), stats.neff(weights), stats.nkde(weights), inpath))
