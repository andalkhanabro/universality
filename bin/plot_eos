#!/usr/bin/env python

__usage__ = "plot_eos [--options] eos.csv [eos.csv eos.csv ...]"
__doc__ = "generate some simple plots of the EOS to make sure they're reasonable. Assumes all columns are in g/cm^3, and converts to more standard units as appropriate"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os

import numpy as np

from optparse import OptionParser

### non-standard libraries
from universality import plot

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__doc__)

parser.add_option('-v', '--verbose', default=False, action='store_true')

parser.add_option('','--min-baryon_density', default=None, type='float')
parser.add_option('','--max-baryon_density', default=None, type='float')

parser.add_option('','--min-pressure', default=None, type='float')
parser.add_option('','--max-pressure', default=None, type='float')

parser.add_option('','--min-energy_density', default=None, type='float')
parser.add_option('','--max-energy_density', default=None, type='float')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

opts, args = parser.parse_args()
assert len(args), 'please supply at least 1 eos.csv\n%s'%__usage__

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

if opts.tag:
    opts.tag = "_"+opts.tag

#-------------------------------------------------

c = (299792458*100) # speed of light in (cm/s)
c2 = c**2

### instantiate figure
fig = plot.plt.figure()
ax_re = plot.plt.subplot(2,2,1)
ax_rp = plot.plt.subplot(2,2,3)
ax_ep = plot.plt.subplot(2,2,4)

### iterate and plot
for path in args:
    if opts.verbose:
        print('reading EOS data from: '+path)
    d = np.genfromtxt(path, names=True, delimiter=',')

    if opts.verbose:
        print('plotting')

    label = os.path.basename(path)[:-4]
    r = d['baryon_density']
    p = d['pressurec2']*c2
    e = d['energy_densityc2']*c2

    truth = np.ones_like(r, dtype=bool)

    if opts.min_baryon_density!=None:
        truth *= r>=opts.min_baryon_density
    if opts.max_baryon_density!=None:
        truth *= r<=opts.max_baryon_density

    if opts.min_pressure!=None:
        truth *= p>=opts.min_pressure
    if opts.max_pressure!=None:
        truth *= p<=opts.max_pressure

    if opts.min_energy_density!=None:
        truth *= e>=opts.min_energy_density
    if opts.min_energy_density!=None:
        truth *= e<=opts.min_energy_density

    r = r[truth]
    p = p[truth]
    e = e[truth]

    ax_re.plot(r, e, label=label)
    ax_rp.plot(r, p, label=label)
    ax_ep.plot(e, p, label=label)

### decorate figure
e_label = r'$\epsilon$ [erg/cm$^3$]'
r_label = r'$\rho$ [g/cm$^3$]'
p_label = r'$p$ [erg/cm$^3$]'

plot.plt.setp(ax_re.get_xticklabels(), visible=False)
ax_re.set_ylabel(e_label)

ax_rp.set_xlabel(r_label)
ax_rp.set_ylabel(p_label)

ax_ep.set_xlabel(e_label)
plot.plt.setp(ax_ep.get_yticklabels(), visible=False)

for ax in [ax_re, ax_rp, ax_ep]:
    ax.grid(True, which='both')

    ax.set_xscale('log')
    ax.set_yscale('log')

if opts.min_baryon_density!=None:
    ax_re.set_xlim(xmin=opts.min_baryon_density)
if opts.max_baryon_density!=None:
    ax_re.set_xlim(xmax=opts.max_baryon_density)
ax_rp.set_xlim(ax_re.get_xlim())

if opts.min_pressure!=None:
    ax_rp.set_ylim(ymin=opts.min_pressure)
if opts.max_pressure!=None:
    ax_rp.set_ylim(ymax=opts.max_pressure)
ax_ep.set_ylim(ax_rp.get_ylim())

if opts.min_energy_density!=None:
    ax_re.set_ylim(ymin=opts.min_energy_density)
if opts.max_energy_density!=None:
    ax_re.set_ylim(ymax=opts.max_energy_density)
ax_ep.set_xlim(ax_re.get_ylim())

plot.plt.subplots_adjust(hspace=0.1, wspace=0.1)

### save
figname = os.path.join(opts.output_dir, 'plot_eos%s.png'%opts.tag)
if opts.verbose:
    print('saving: '+figname)
fig.savefig(figname)
plot.plt.close(fig)
