#!/usr/bin/env python

__usage__ = "plot_eos [--options] eos.csv [eos.csv eos.csv ...]"
__doc__ = "generate some simple plots of the EOS to make sure they're reasonable. Assumes all eos.csv are in the same system of units (CGS)"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os

import numpy as np

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt

from optparse import OptionParser

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__doc__)

parser.add_option('-v', '--verbose', default=False, action='store_true')

parser.add_option('','--min-density', default=None, type='float')
parser.add_option('','--max-density', default=None, type='float')

parser.add_option('','--min-pressure', default=None, type='float')
parser.add_option('','--max-pressure', default=None, type='float')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

opts, args = parser.parse_args()
assert len(args), 'please supply at least 1 eos.csv\n%s'%__usage__

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

if opts.tag:
    opts.tag = "_"+opts.tag

#-------------------------------------------------

### instantiate figure
fig = plt.figure()
ax = fig.gca()

### iterate and plot
for path in args:
    if opts.verbose:
        print('reading EOS data from: '+path)
    d = np.genfromtxt(path, names=True, delimiter=',')

    if opts.verbose:
        print('plotting')
    ax.plot(d['r'], d['P'], label=os.path.basename(path)[:-4])

### decorate figure
ax.set_xlabel(r'$\rho$ [erg/cm$^3$]')
ax.set_ylabel(r'$p$ [erg/cm$^3$]')

ax.grid(True, which='both')
ax.legend(loc='best')

ax.set_xscale('log')
ax.set_yscale('log')

if opts.min_density!=None:
    ax.set_xlim(xmin=opts.min_density)
if opts.max_density!=None:
    ax.set_xlim(xmax=opts.max_density)
if opts.min_pressure!=None:
    ax.set_ylim(ymin=opts.min_pressure)
if opts.max_pressure!=None:
    ax.set_ylim(ymax=opts.max_pressure)

### save
figname = os.path.join(opts.output_dir, 'plot_eos%s.png'%opts.tag)
if opts.verbose:
    print('saving: '+figname)
fig.savefig(figname)
plt.close(fig)
