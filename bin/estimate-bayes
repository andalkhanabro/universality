#!/usr/bin/env python

__doc__ = "a script that estimates the bayes factor by comparing evidences based on the samples within inpath.csv. Assumes the same likelihood was used to weigh both sets of samples"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality import utils
from universality import stats

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('inpath1', type=str)
parser.add_argument('weight1_column', type=str)
parser.add_argument('inpath2', type=str)
parser.add_argument('weight2_column', type=str)

parser.add_argument('-v', '--verbose', default=False, action='store_true')

parser.add_argument('--max-num-samples1', default=utils.DEFAULT_MAX_NUM_SAMPLES, type=int)
parser.add_argument('--weight1-column-is-log', default=False, action='store_true',
    help='if supplied, interpret the values in weight_column as log(weight), meaning we exponentiate them before using them in the KDE')

parser.add_argument('--max-num-samples2', default=utils.DEFAULT_MAX_NUM_SAMPLES, type=int)
parser.add_argument('--weight2-column-is-log', default=False, action='store_true',
    help='if supplied, interpret the values in weight_column as log(weight), meaning we exponentiate them before using them in the KDE')

args = parser.parse_args()

#-------------------------------------------------

### read in source samples
if args.verbose:
    print('reading samples from: '+args.inpath1)
weights1 = utils.load(args.inpath1, [args.weight1_column], max_num_samples=args.max_num_samples1)[0][:,0]
N1 = len(weights1)
weights1.reshape(N1)

if args.weight1_column_is_log:
    weights1 = np.exp(weights1)

if args.verbose:
    print('N1    = %5d'%N1)
    print('N1eff = %9.3f'%stats.neff(weights1/np.sum(weights1)))

if args.verbose:
    print('reading samples from: '+args.inpath2)
weights2 = utils.load(args.inpath2, [args.weight2_column], max_num_samples=args.max_num_samples2)[0][:,0]
N2 = len(weights2)
weights2.reshape(N2)

if args.weight2_column_is_log:
    weights2 = np.exp(weights2)

if args.verbose:
    print('N2    = %5d'%N2)
    print('N2eff = %9.3f'%stats.neff(weights2/np.sum(weights2)))

#------------------------

Z1 = np.mean(weights1)
V1 = np.var(weights1)/N1

Z2 = np.mean(weights2)
V2 = np.var(weights2)/N2

B = Z1/Z2
V = (1./Z2)**2 * V1 + (Z1/Z2**2) * V2

print('  B = +%.6e +/- %.6e'%(B, V**0.5))
