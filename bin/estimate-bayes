#!/usr/bin/env python

"""a script that estimates the bayes factor by comparing evidences based on the samples within inpath.csv. Assumes the same likelihood was used to weigh both sets of samples
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality.utils import (utils, io)
from universality import stats

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('-s', '--samples', nargs=2, default=[], type=str, action='append')
parser.add_argument('--weight-column', nargs=2, default=[], type=str, action='append')

parser.add_argument('-v', '--verbose', default=False, action='store_true')

parser.add_argument('--max-num-samples', nargs=2, default=[], type=str)
parser.add_argument('--weight-column-is-log', nargs=2, default=[], type=str, action='append',
    help='if supplied, interpret the values in weight_column as log(weight), meaning we exponentiate them before using them in the KDE')

parser.add_argument('--prior-column', nargs=2, default=[], type=str, action='append')
parser.add_argument('--prior-column-is-log', nargs=2, default=[], type=str, action='append')

args = parser.parse_args()

### finish parsing
assert len(args.samples)==2, 'please supply exactly 2 --samples'
label1, inpath1 = args.samples[0]
label2, inpath2 = args.samples[1]

weight1_columns = []
weight2_columns = []
for label, col in args.weight_column:
    if label == label1:
        weight1_columns.append(col)
    elif label == label2:
        weight2_columns.append(col)
    else:
        raise ValueError('specifying --weight-column for unknown samples set %s'%label)

logweight1_columns = []
logweight2_columns = []
for label, col in args.weight_column_is_log:
    if label == label1:
        logweight1_columns.append(col)
    elif label == label2:
        logweight2_columns.append(col)
    else:
        raise ValueError('specifying --weight-column-is-log for unknown samples set %s'%label)

max_num_samples1 = io.DEFAULT_MAX_NUM_SAMPLES
max_num_samples2 = io.DEFAULT_MAX_NUM_SAMPLES
for label, num in args.max_num_samples:
    if label == label1:
        max_num_samples1 = int(num)
    elif label == label2:
        max_num_samples2 = int(num)
    else:
        raise ValueError('specifying --max-num-samples for unknown samples set %s'%label)

prior1_columns = []
prior2_columns = []
for label, col in args.prior_column:
    if label == label1:
        prior1_columns.append(col)
    elif label == label2:
        prior2_columns.append(col)
    else:
        raise ValueError('specifying --prior-column for unknown samples set %s'%label)

logprior1_columns = []
logprior2_columns = []
for label, col in args.weight_column_is_log:
    if label == label1:
        logprior1_columns.append(col)
    elif label == label2:
        logprior2_columns.append(col)
    else:
        raise ValueError('specifying --prior-column-is-log for unknown samples set %s'%label)

#-------------------------------------------------

### read in source samples
if args.verbose:
    print('reading %s samples from: %s'%(label1, inpath1))
weights1 = io.load_weights(inpath1, weight1_columns, logweightcolumns=logweight1_columns, max_num_samples=max_num_samples1, normalize=False)
N1 = len(weights1)

if prior1_columns:
    if args.verbose:
        print('reading nontrivial prior from: '+inpath1)
    prior1 = io.load_weights(inpath1, prior1_columns, logweightcolumns=logprior1_columns, max_num_samples=max_num_samples1, normalize=True)
else:
    prior1 = np.ones(N1, dtype=float)/N1

if args.verbose:
    print('N1    = %5d'%N1)
    print('N1eff = %9.3f'%stats.neff(weights1*prior1/np.sum(weights1*prior1)))

#------------------------

if args.verbose:
    print('reading %s samples from: %s'%(label2, inpath2))
weights2 = io.load_weights(inpath2, weight2_columns, logweightcolumns=logweight2_columns, max_num_samples=max_num_samples2, normalize=False)
N2 = len(weights2)

if prior2_columns:
    if args.verbose:
        print('reading nontrivial prior from: '+inpath2)
    prior2 = io.load_weights(inpath2, prior2_columns, logweightcolumns=logprior2_columns, max_num_samples=max_num_samples2, normalize=True)
else:
    prior2 = np.ones(N2, dtype=float)/N2

if args.verbose:
    print('N2    = %5d'%N2)
    print('N2eff = %9.3f'%stats.neff(weights2*prior2/np.sum(weights2*prior2)))

#-------------------------------------------------

### NOTE!
###     this does not account for the covariance between samples!
B, dB = utils.estimate_bayes(weights1, weights2, prior1=prior1, prior2=prior2)
print('  B^{%s}_{%s} = +%.6e +/- %.6e'%(label1, label2, B, dB))

B, dB = utils.estimate_bayes(weights2, weights1, prior1=prior2, prior2=prior1)
print('  B^{%s}_{%s} = +%.6e +/- %.6e'%(label2, label1, B, dB))
