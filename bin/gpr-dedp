#!/usr/bin/env python

__doc__ = 'use Gaussian Process Regression to infer the values of the derivatives at the evaulation points instead of just numerically differentiating'
__author__ = 'reed.essick@ligo.org'

#-------------------------------------------------

import numpy as np

from argparse import ArgumentParser

### non-standard packages

from universality import utils
from universality import gaussianprocess as gp

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

rgroup = parser.add_argument_group('required arguments')
rgroup.add_argument('eospath', type=str)
rgroup.add_argument('outpath', type=str, default=None,
    help='if not supplied, will write output into the input path')

vgroup = parser.add_argument_group('verbosity options')
vgroup.add_argument('-v', '--verbose', default=False, action='store_true')

ggroup = parser.add_argument_group('Gaussian Process options')
ggroup.add_argument('-s', '--sigma', default=gp.DEFAULT_SIGMA, type=float,
    help='hyperparameter for Gaussian Process. \
DEFAULT=%.3e'%gp.DEFAULT_SIGMA)
ggroup.add_argument('-l', '--length_scale', dest='l', default=gp.DEFAULT_L, type=float,
    help='hyperparameter for Gaussian Process. \
DEFAULT=%.3e'%gp.DEFAULT_L)
ggroup.add_argument('-S', '--sigma_obs', default=gp.DEFAULT_SIGMA, type=float,
    help='hyperparameter for Gaussian Process. \
DEFAULT=%.3e'%gp.DEFAULT_SIGMA)

ggroup.add_argument('-d', '--poly-degree', default=gp.DEFAULT_POLY_DEGREE, type=int)

args = parser.parse_args()

# finish parsing
if args.outpath is None:
    args.outpath = args.eospath

#-------------------------------------------------

### read in existing data
if args.verbose:
    print('reading: '+args.eospath)
data, columns = utils.load(args.eospath)

e = data[:,columns.index('energy_densityc2')]
loge = np.log(e)
p = data[:,columns.index('pressurec2')]
logp = np.log(p)

#------------------------

### gpr for dedp|e,p via delegation
if args.verbose:
    print('computing conditioned distribution for de/dp')
slope, intercept = np.polyfit(logp, loge, args.poly_degree) ### polynomial fit
mean, cov = gp.gpr_dfdx(logp, loge-(intercept+slope*logp), logp, sigma2=args.sigma**2, l2=args.l**2, sigma2_obs=args.sigma_obs**2)
mean += slope ### add back in the slope

### convert back to dedp from dlogedlogp
mean *= e/p
std = (np.diag(cov))**0.5 * e/p ### retain only the diagonal components

#------------------------

### write out the result
if args.verbose:
    print('writing: '+args.outpath)
with open(args.outpath, 'w') as obj:
    print >> obj, ','.join(columns + ['denergy_densitydpressure', 'sigma_denergy_densitydpressure'])
    for i in xrange(len(p)):
        print >> obj, ','.join('%.9e'%_ for _ in list(data[i,:])+[mean[i], std[i]])
