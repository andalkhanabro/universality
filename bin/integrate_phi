#!/usr/bin/env python

__usage__ = "integrate_phi [--options] phi.csv reference_pressurec2 reference_energy_densityc2 [out.csv]"
__doc__ = """\
numerically integrate phi=log(de/dp - 1) to obtain e(p). This is done in a profoundly naive way via a simple trapazoidal approximation. Increased acccuracy can be gained by increasing the number of sample points in phi.csv. 
NOTE: 
  reference_pressurec2 and reference_energy_densityc2 should be specified in g/cm^3. The integral is performed over all samples in phi.csv (we assign one value for energy_density for each pressure) and adjust the curve so that it passes through reference_energy_densityc2 at reference_pressurec2
Furthermore, we require phi.csv to have logpressurec2 and phi as columns"""
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import numpy as np

from optparse import OptionParser

### non-standard libraries
from universality import utils

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__doc__)

parser.add_option('-v', '--verbose', default=False, action='store_true')

parser.add_option('', '--sigma-energy_densityc2', default=0, type='float',
    help='The reference energy_densityc2 used is drawn from a Gaussian distribution with the mean specified as an argument and this option as the standard deviation. \
DEFAULT=0.') ### FIXME: may want this to be a log-normal distribution instead of a normal distribution?

parser.add_option('', '--sigma-pressurec2', default=0, type='float',
    help='The reference pressurec2 used is drawn from a Gaussian distribution with the mean specified as an argument and this option as the standard deviation. \
DEFAULT=0.') ### FIXME: may want this to be a log-normal distribution instead of a normal distribution?

opts, args = parser.parse_args()
N = len(args)
assert N in [3, 4], 'please supply either 3 or 4 input arguments\n%s'%__usage__
inpath = args[0]
ref_pc2, ref_ec2 = [float(_) for _ in args[1:3]]
if N==4:
    outpath = args[3]
else:
    outpath = inpath

#-------------------------------------------------

# read in data
if opts.verbose:
    print('reading: '+inpath)
data, columns = utils.load(inpath)

pressurec2 = np.exp(data[:,columns.index('logpressurec2')])
denergy_densitydpressure = 1 + np.exp(data[:,columns.index('phi')]) ### this is the definition of phi=log(de/dp - 1)

#------------------------

# perform numeric integration with trapazoidal approximation
# NOTE: this could probably be improved...
if opts.verbose:
    print('performing numeric integration for energy_density via trapazoidal approximation')
energy_densityc2 = np.empty_like(pressurec2, dtype='float')
energy_densityc2[0] = 0 # we start at 0, so handle this as a special case

# integrate in the bulk via trapazoidal approximation
energy_densityc2[1:] = np.cumsum(0.5*(denergy_densitydpressure[1:]+denergy_densitydpressure[:-1])*(pressurec2[1:] - pressurec2[:-1]))

# scale the result to match reference energy at reference pressure
ec2 = ref_ec2 + np.random.randn()*opts.sigma_energy_densityc2
pc2 = ref_pc2 + np.random.randn()*opts.sigma_pressurec2
energy_densityc2 += ec2 - np.interp(pc2, pressurec2, energy_densityc2)

### throw away pressures corresponding to negative energy densities!
truth = energy_densityc2 >= 0

data = data[truth,:]
pressurec2 = pressurec2[truth]
energy_densityc2 = energy_densityc2[truth]

#------------------------

# perform numeric integration to obtain baryon density along with energy_density and pressure
# NOTE: this could probably be improved as well...
if opts.verbose:
    print('performing numeric integration for baryon_density via trapazoidal approximation')
baryon_density = np.ones_like(pressurec2, dtype='float')

integrand = 1./(energy_densityc2+pressurec2)
baryon_density[1:] *= np.exp(np.cumsum(0.5*(integrand[1:]+integrand[:-1])*(energy_densityc2[1:]-energy_densityc2[:-1]))) ### multiply by this factor

### FIXME: match baryon density to energy density at reference pressure
#baryon_density *= ec2 / np.interp(ref_pc2, pressurec2, baryon_density)

### match at the lowest allowed energy density
baryon_density *= energy_densityc2[0]

### NOTE: we now assume 
# write output
if opts.verbose:
    print('writing: '+outpath)
with open(outpath, 'w') as file_obj:
    print >> file_obj, ','.join(columns+['pressurec2', 'energy_densityc2', 'baryon_density'])
    for sample, p, e, rho in zip(data, pressurec2, energy_densityc2, baryon_density):
        print >> file_obj, ','.join('%.9e'%_ for _ in list(sample)+[p, e, rho])
