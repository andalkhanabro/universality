#!/usr/bin/env python

__usage__ = "plot_dedp [--options] eos.csv [eos.csv eos.csv ...]"
__doc__ = "generate some simple plots of the EOS to make sure they're reasonable. Assumes all columns are in g/cm^3, and converts to more standard units as appropriate"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os

import numpy as np

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt

from optparse import OptionParser

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__doc__)

parser.add_option('-v', '--verbose', default=False, action='store_true')

parser.add_option('','--min-pressure', default=None, type='float')
parser.add_option('','--max-pressure', default=None, type='float')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

opts, args = parser.parse_args()
assert len(args), 'please supply at least 1 eos.csv\n%s'%__usage__

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

if opts.tag:
    opts.tag = "_"+opts.tag

#-------------------------------------------------

c = (299792458*100) # speed of light in (cm/s)
c2 = c**2

### instantiate figure
fig = plt.figure()
ax_pe = plt.subplot(3,1,1)
ax_pdedp = plt.subplot(3,1,2)
ax_pv = plt.subplot(3,1,3)

### iterate and plot
for path in args:
    if opts.verbose:
        print('reading EOS data from: '+path)
    d = np.genfromtxt(path, names=True, delimiter=',')

    if opts.verbose:
        print('plotting')

    label = os.path.basename(path)[:-4]
    p = d['pressurec2']*c2
    e = d['energy_densityc2']*c2
    dedp = d['denergy_densitydpressure']

    ax_pe.plot(p, e, label=label)
    ax_pdedp.plot(p, p/e * dedp, label=label)
    ax_pv.plot(p, 1./dedp, label=label)

### decorate figure
e_label = r'$\epsilon$ [erg/cm$^3$]'
p_label = r'$p$ [erg/cm$^3$]'
dedp_label = r'$d\log \epsilon/d\log p$'
v_label = r'$v^2/c^2 = (d\epsilon/dp)^{-1}$'
plt.setp(ax_pe.get_xticklabels(), visible=False)
ax_pe.set_ylabel(e_label)

plt.setp(ax_pdedp.get_xticklabels(), visible=False)
ax_pdedp.set_ylabel(dedp_label)

ax_pv.set_xlabel(p_label)
ax_pv.set_ylabel(v_label)

for ax in [ax_pe, ax_pdedp, ax_pv]:
    ax.grid(True, which='both')
    ax.set_xscale('log')
    ax.set_yscale('log')

if opts.min_pressure!=None:
    ax_pe.set_xlim(xmin=opts.min_pressure)
if opts.max_pressure!=None:
    ax_pe.set_xlim(xmax=opts.max_pressure)
xlim = ax_pe.get_xlim()
ax_pdedp.set_xlim(xlim)
ax_pv.set_xlim(xlim)

plt.subplots_adjust(hspace=0.1, wspace=0.1)

### save
figname = os.path.join(opts.output_dir, 'plot_dedp%s.png'%opts.tag)
if opts.verbose:
    print('saving: '+figname)
fig.savefig(figname)
plt.close(fig)
