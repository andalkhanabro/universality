#!/usr/bin/env python

__doc__ = "generate some simple plots of the EOS to make sure they're reasonable. Assumes all columns are in g/cm^3, and converts to more standard units as appropriate"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality import utils
from universality import plot

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

### required arguments
rgroup = parser.add_argument_group('required arguments')
rgroup.add_argument('xcolumn', type=str)
rgroup.add_argument('ycolumn', type=str)
rgroup.add_argument('-s', '--samples', required=True, nargs=2, default=[], action='append', type=str)

### samples arguments
sgroup = parser.add_argument_group('sgroup')
sgroup.add_argument('--samples-color', nargs=2, default=[], action='append', type=str)
sgroup.add_argument('--samples-alpha', nargs=2, default=[], action='append', type=str)
sgroup.add_argument('--samples-linestyle', nargs=2, default=[], action='append', type=str)

### verbosity options
vgroup = parser.add_argument_group('verbosity options')
vgroup.add_argument('-v', '--verbose', default=False, action='store_true')

### plotting options
pgroup = parser.add_argument_group('plotting options')
pgroup.add_argument('--column-range', nargs=3, default=[], type=str, action='append')
pgroup.add_argument('--column-label', nargs=2, default=[], type=str, action='append')
pgroup.add_argument('--logcolumn', default=[], type=str, action='append')

pgroup.add_argument('--fractions', default=False, action='store_true')
pgroup.add_argument('--residuals', default=False, action='store_true')
pgroup.add_argument('--ratios', default=False, action='store_true')

pgroup.add_argument('--figwidth', default=plot.DEFAULT_FIGWIDTH, type=float)
pgroup.add_argument('--figheight', default=plot.DEFAULT_FIGHEIGHT, type=float)

pgroup.add_argument('--grid', default=False, action='store_true')

### output options
ogroup = parser.add_argument_group('output options')
ogroup.add_argument('-o', '--output-dir', default='.', type=str)
ogroup.add_argument('-t', '--tag', default='', type=str)
ogroup.add_argument('--figtype', default=[], type=str, action='append')
ogroup.add_argument('--dpi', default=plot.DEFAULT_DPI, type=float)

args = parser.parse_args()

### finish parsing
names = [label for label, _ in args.samples]
columns = [args.xcolumn, args.ycolumn]

for col in args.logcolumn:
    assert col in columns, 'specifying --logcolumn for unknown column: '+col

for col, _, _ in args.column_range:
    assert col in columns, 'specifying --column-range for uknown column: '+col
ranges = dict((col, (float(m), float(M))) for col, m, M in args.column_range)

for col, _ in args.column_label:
    assert col in columns, 'specifying --column-label for uknown column: '+col
labels = dict((col, '$'+col+'$') for col in columns)
labels.update(dict(args.column_label))

for label, _ in args.samples_color:
    assert label in names, 'specifying --samples-color for unknown sample set: '+label
colors = dict(args.samples_color)
colors = [colors.get(label, plot.DEFAULT_COLOR1) for label, _ in args.samples]

for label, _ in args.samples_alpha:
    assert label in names, 'specifying --samples-alpha for unknown sample set: '+label
alphas = dict(args.samples_alpha)
alphas = [float(alphas.get(label, 1.0)) for label, _ in args.samples]

for label, _ in args.samples_linestyle:
    assert label in names, 'specifying --samples-label for unknown sample set: '+label
linestyles = dict(args.samples_linestyle)
linestyles = [linestyles.get(label, plot.DEFAULT_LINESTYLE) for label, _ in args.samples]

if not os.path.exists(args.output_dir):
    os.makedirs(args.output_dir)

if args.tag:
    args.tag = "_"+args.tag

if not args.figtype:
    args.figtype = plot.DEFAULT_FIGTYPES

#-------------------------------------------------

### iterate and load data
curves = []
for label, path in args.samples:
    if args.verbose:
        print('reading EOS data from: '+path)
    d, cols = utils.load(path, columns)

    truth = np.ones(len(d), dtype=bool)
    if ranges.has_key(args.xcolumn):
        m, M = ranges[args.xcolumn]
        truth *= (m<=d[:,0])*(d[:,0]<=M)
    if ranges.has_key(args.ycolumn):
        m, M = ranges[args.ycolumn]
        truth *= (m<=d[:,1])*(d[:,1]<=M)

    curves.append((d[truth,0],d[truth,1],label))

fig = plot.overlay(
    curves,
    colors=colors,
    alphas=alphas,
    linestyles=linestyles,
    xlabel=labels[args.xcolumn],
    ylabel=labels[args.ycolumn],
    figwidth=args.figwidth,
    figheight=args.figheight,
    fractions=args.fractions,
    residuals=args.residuals,
    ratios=args.ratios,
    logx=args.xcolumn in args.logcolumn,
    logy=args.ycolumn in args.logcolumn,
    grid=args.grid,
)

### save
plot.save('plot-eos%s'%args.tag, fig[0], directory=args.output_dir, figtypes=args.figtype, dpi=args.dpi, verbose=args.verbose)
plot.close(fig[0])
