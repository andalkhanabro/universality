#!/usr/bin/env python

"""a script that manages I/O and other lookup to count the number of stable branches and/or features associated with EoS.
Counts the number of unique values within the reference column subject to selections on other columns.
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

from argparse import ArgumentParser

### non-standard libraries
from universality.utils import io
from universality.properties import count

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('inpath', type=str)

parser.add_argument('reference', type=str,
    help='the column name we use for lookup (and counting the number of rows)')

parser.add_argument('--greater-than', nargs=2, type=str, action='append', default=[],
    help='require the value in a column to be greater than a threshold. Can be repeated. \
eg: --greater-than column_name threshold')

parser.add_argument('--less-than', nargs=2, type=str, action='append', default=[],
    help='required the value in a column to be less than a threshold. Can be repeated. \
eg: --less-than column_name threshold')

parser.add_argument('--overlaps', nargs=4, type=str, action='append', default=[],
    help='require the span of a feature to overlap a particular range. Can be repeated. \
eg: --overlaps start_column end_column low high')

parser.add_argument('-v', '--verbose', default=False, action='store_true')

args = parser.parse_args()

args.greater_than = [(k, float(v)) for k, v in args.greater_than]
args.less_than = [(k, float(v)) for k, v in args.less_than]
args.overlaps = [(k, K, float(v), float(V)) for k, K, v, V in args.overlaps]

#-------------------------------------------------

columns = required_columns(
    args.reference,
    greater_than=args.greater_than,
    less_than=args.less_than,
    overlaps=args.overlaps,
)

if args.verbose:
    print('reading data from: '+args.inpath)
data, cols = io.load(args.inpath, columns)

c = count.count(
    data,
    cols,
    args.reference,
    greater_than=args.greater_than,
    less_than=args.less_than,
    overlaps=args.overlaps,
)
print('%s = %d'%(count.COUNT_TEMPLATE%args.reference, c))
