#!/usr/bin/env python

__usage__ = "draw_foo [--option] process.pkl"
__description__ = "draw realizations of the process stored in process.pkl and write them into separate CSV files"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os
import sys
import pickle

import numpy as np

from optparse import OptionParser

### non-standard libraries
from universality import gaussianprocess as gp
from universality import plot

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__doc__)

parser.add_option('-v', '--verbose', default=False, action='store_true')

parser.add_option('-n', '--num-draws', default=1, type='int',
    help='DEFAULT=1')

parser.add_option('-p', '--plot', default=False, action='store_true')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

opts, args = parser.parse_args()
assert len(args)==1, 'please supply exactly 1 input argument\n%s'%__usage__
pklpath = args[0]

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

if opts.tag:
    opts.tag = "_"+opts.tag

#-------------------------------------------------

### read in the process
if opts.verbose:
    print('reading process from: '+pklpath)
xlabel, ylabel, x_tst, mean, cov = gp.pklload(pklpath)

if opts.plot:
    fig = plot.plt.figure()
    ax = fig.gca()

    s = 3*np.diag(cov)**0.5 ### plot 3-sigma regions
    ax.fill_between(x_tst, mean+s, mean-s, color='grey', alpha=0.5)
    ax.plot(x_tst, mean, color='k')

    ax.set_xlabel(xlabel)
    ax.set_ylabel(ylabel)

    ax.grid(True, which='both')

### draw a bunch of realizations of the process
path = os.path.join(opts.output_dir, 'draw_foo'+opts.tag+'-%06d.csv') # for generating filenames
tmp = '\r[ %6d / '+'%6d ] '%(opts.num_draws)+' saving: '+path         # for reporting progress
header = '%s,%s'%(xlabel, ylabel)                                     # for writing file contents
row = '%.9e,%.9e'

for i in xrange(opts.num_draws):
    if opts.verbose:
        sys.stdout.write(tmp%(i+1, i))
        sys.stdout.flush()

    # draw the realization
    y_tst = np.random.multivariate_normal(mean, cov)

    # write the realization to disk
    csvpath = path%i
    with open(csvpath, 'w') as file_obj:
        print >> file_obj, header
        for sample in zip(x_tst, y_tst):
            print >> file_obj, row%sample

    # add to plot
    if opts.plot:
        ax.plot(x_tst, y_tst, color='b', alpha=min(0.25, 10./opts.num_draws))

if opts.verbose:
    sys.stdout.write('\n')

if opts.plot:
    ax.set_xlim(np.min(x_tst), np.max(x_tst))
    figname = os.path.join(opts.output_dir, 'draw_foo%s.png'%opts.tag)
    if opts.verbose:
        print('saving: '+figname)
    fig.savefig(figname)
    plot.plt.close(fig)
