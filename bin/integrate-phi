#!/usr/bin/env python

"""numerically integrate phi=log(de/dp - 1) to obtain e(p). This is done in a profoundly naive way via a simple trapazoidal approximation. Increased acccuracy can be gained by increasing the number of sample points in phi.csv. 
NOTE: 
  reference_pressurec2 should be specified in g/cm^3. The integral is performed over all samples in phi.csv (we assign one value for energy_density for each pressure). Furthermore, we require phi.csv to have logpressurec2 and phi as columns.

Stitching to set the initial condition is done by matching to a known crust from Douchin+Haensel, arXiv:0111092. The value of the energy density is matched to the crust's prediction at log(pressurec2) = N(log(reference_pressurec2), sigma_logpressurec2)."""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality import eos
from universality.utils import (io, units, utils)
from universality.gaussianprocess.utils import (dedp2e, stitch_below_reference_pressure, e_p2rho)

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

### required options
rgroup = parser.add_argument_group('required arguments')
rgroup.add_argument('phipath', type=str)
rgroup.add_argument('reference_pressurec2', type=float)
rgroup.add_argument('-o', '--outpath', type=str, default=None)

rgroup.add_argument('--exclude-baryon-density', default=False, action='store_true')
rgroup.add_argument('--include-cs2c2', default=False, action='store_true')
rgroup.add_argument('--include-baryon-chemical-potential', default=False, action='store_true')

### verbosity 
vgroup = parser.add_argument_group('verbosity arguments')
vgroup.add_argument('-v', '--verbose', default=False, action='store_true')

### initial condition options
igroup = parser.add_argument_group('initial condition options')
igroup.add_argument('--sigma-logpressurec2', default=0, type=float,
    help='The reference pressurec2 used is drawn from a log-normal distribution (natural log) with the mean specified as an argument and this option as the standard deviation. NOTE: this is the standard deviation of the log(pressure/c^2) where pressure/c^2 is measured in g/cm^3. The reference pressure, however, is still specified in g/cm^3 and NOT log(pressure/c^2).')
igroup.add_argument('--stitch-below-reference-pressure', default=False, action='store_true',
    help='if supplied, report the values from the piecewise polytropic EOS below reference_pressure rather than continuing the drawn EOS below the stitching point.')
igroup.add_argument('--crust-eos', default=eos.DEFAULT_CRUST_EOS, type=str,
    help='the eos used at the crust when stitching. \
DEFAULT='+eos.DEFAULT_CRUST_EOS)

args = parser.parse_args()

if args.outpath is None:
    args.outpath = args.phipath

eos.set_crust(crust_eos=args.crust_eos)

#-------------------------------------------------

# read in data
if args.verbose:
    print('reading: '+args.phipath)
data, columns = io.load(args.phipath)

pressurec2 = np.exp(data[:,columns.index('log(pressurec2)')])
denergy_densitydpressure = (1 + np.exp(data[:,columns.index('phi')])) ### this is the definition of phi=log(de/dp - 1)

#------------------------

# perform numeric integration with trapazoidal approximation
# NOTE: this could probably be improved...
if args.verbose:
    print('performing numeric integration for energy_density via trapazoidal approximation')
reference_pressurec2 = np.exp(np.log(args.reference_pressurec2) + np.random.randn()*args.sigma_logpressurec2)
energy_densityc2 = dedp2e(denergy_densitydpressure, pressurec2, reference_pressurec2)
if args.stitch_below_reference_pressure:
    energy_densityc2, pressurec2 = stitch_below_reference_pressure(energy_densityc2, pressurec2, reference_pressurec2)

### throw away pressures corresponding to negative energy densities!
truth = energy_densityc2 >= 0

pressurec2 = pressurec2[truth]
energy_densityc2 = energy_densityc2[truth]

data = [pressurec2, energy_densityc2]
cols = ['pressurec2', 'energy_densityc2']

#------------------------

# perform numeric integration to obtain baryon density along with energy_density and pressure
if not args.exclude_baryon_density:
    if args.verbose:
        print('performing numeric integration for baryon_density via trapazoidal approximation')
    baryon_density = e_p2rho(energy_densityc2, pressurec2, reference_pressurec2, verbose=args.verbose)
    if args.stitch_below_reference_pressure:
        ### the following indecies should match up because of the call to utils.stitch_below_reference_pressure made above
        baryon_density[pressurec2<=reference_pressurec2] = eos.CRUST_BARYON_DENSITY[eos.CRUST_PRESSUREC2<=reference_pressurec2] 

    data.append(baryon_density)
    cols.append('baryon_density')

# take numeric derivative to estimate sound speed
if args.include_cs2c2:
    if args.verbose:
        print('computing cs2c2 via numeric differentiation')
    data.append(utils.num_dfdx(energy_densityc2, pressurec2))
    cols.append('cs2c2')

# take numeric derivative to estimate chemical potential
if args.include_baryon_chemical_potential:
    if args.verbose:
        print('computing baryon_chemical_potential via numeric differentiation')
    data.append(utils.num_dfdx(baryon_density, energy_densityc2) * units.Mnuc)
    cols.append('baryon_chemical_potential')

# write output
if args.verbose:
    print('writing: '+args.outpath)
data = np.transpose(np.array(data, dtype=float))
io.write(args.outpath, data, cols)
