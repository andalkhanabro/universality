#!/usr/bin/env python

"""a plotting script that makes a sequence of KDEs to show how constraints change for a 1D distribution with more events or different weights
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os
import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality.utils import (utils, io)
from universality import kde
from universality import stats
from universality import plot

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('column', type=str)
parser.add_argument('--multiplier', type=float, default=1.)

parser.add_argument('--logcolumn', default=False, action='store_true')
parser.add_argument('--column-label', default=None, type=str)
parser.add_argument('--column-range', nargs=2, type=float)
parser.add_argument('--column-bandwidth', default=None, type=float)
parser.add_argument('--column-truth', default=[], type=float, action='append',
    help='can be repeated')

parser.add_argument('--level', default=[], action='append', type=float,
    help='confidence levels for highest-probability-density credible regions')
parser.add_argument('--level-linestyle', default='dashed', type=str)
parser.add_argument('--filled', default=False, action='store_true')
parser.add_argument('--alpha', default=0.25, type=float,
    help='used to when filling between confidence levels')
parser.add_argument('--no-violin', default=False, action='store_true')
parser.add_argument('--only-cr-width', default=False, action='store_true')
parser.add_argument('--cr-width-subplot', default=False, action='store_true')

parser.add_argument('-s', '--samples', nargs=2, type=str, default=[], action='append')
parser.add_argument('--x-value', nargs=2, default=[], type=str, action='append',
    help='specify the x-value at which to center the data for this samples set. \
If this is specified for any sample set, it must be specified for all sample sets.')
parser.add_argument('--dx', nargs=2, default=[], type=str, action='append',
    help='the width to plot the violin plot or credible interval markers for this sapmle set')

parser.add_argument('--x-label', default='', type=str)

parser.add_argument('--natural-xticklabels', default=False, action='store_true',
    help='let python pick the ticklabels for you')
parser.add_argument('--no-xticklabels', default=False, action='store_true')

parser.add_argument('-m', '--max-num-samples', nargs=2, default=[], type=str, action='append')
parser.add_argument('--weight-column', nargs=2, type=str, default=[], action='append')
parser.add_argument('--weight-column-is-log', nargs=2, type=str, default=[], action='append')

parser.add_argument('--color', nargs=2, action='append', default=[], type=str)
parser.add_argument('--truth-color', default=plot.DEFAULT_TRUTH_COLOR, type=str)

parser.add_argument('--prune', default=False, action='store_true')
parser.add_argument('--reflect', default=False, action='store_true')

parser.add_argument('-n', '--num-points', default=plot.DEFAULT_NUM_POINTS, type=int)
parser.add_argument('--num-proc', default=utils.DEFAULT_NUM_PROC, type=int)

parser.add_argument('-v', '--verbose', default=False, action='store_true')

parser.add_argument('--grid', default=False, action='store_true')
parser.add_argument('--rotate-xticklabels', default=0, type=float,
    help='the number of degrees by which to rotate the xticklabels')
parser.add_argument('--xaxis-padding-fraction', default=0.01, type=float)

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-t', '--tag', default='', type=str)
parser.add_argument('--figtype', default=[], type=str, action='append')
parser.add_argument('--dpi', default=plot.DEFAULT_DPI, type=float)
parser.add_argument('--figwidth', default=plot.DEFAULT_FIGWIDTH, type=float)
parser.add_argument('--figheight', default=plot.DEFAULT_FIGHEIGHT, type=float)

args = parser.parse_args()

### finish parsing
if not os.path.exists(args.output_dir):
    os.makedirs(args.output_dir)

if args.tag:
    args.tag = "_"+args.tag

if not args.figtype:
    args.figtype = plot.DEFAULT_FIGTYPES

if args.column_label is None:
    args.column_label = label

names = [label for label, path in args.samples]

max_num_samples = dict((label, np.infty) for label in names)
for label, num in args.max_num_samples:
    assert label in names, 'specifying --max-num-sample for unknown sample set: '+label
    max_num_samples[label] = int(num)

weight_columns = dict((label, ([], [])) for label in names)
for label, column in args.weight_column:
    assert label in names, 'specifying --weight-column for unknown sample set: '+label
    weight_columns[label][0].append(column)
for label, column in args.weight_column_is_log:
    assert label in names, 'specifying --weight-column-is-log for unknown sample set: '+label
    weight_columns[label][1].append(column)

logcolumns = [args.column] if args.logcolumn else []

colors = dict((label, plot.DEFAULT_COLOR1) for label in names)
for label, color in args.color:
    assert label in names, 'specifying --color for uknown sample set: '+label
    colors[label] = color

if args.x_value:
    x_values = dict()
    for label, val in args.x_value:
        assert label in names, 'specifying --x-value for unknown sample set: '+label
        x_values[label] = float(val)
    for label in names:
        assert label in x_values, 'must specify --x-value for samples: '+label
    dx = 0.5*np.min(np.diff(sorted(x_values.values())))
else:
    x_values = dict((label, ind) for ind, label in enumerate(names))
    dx = 0.5

dxs = dict((label, dx) for label in names)
for label, val in args.dx:
    assert label in names, 'specifying --dx for unknown sample set: '+label
    dxs[label] = float(val)

assert (not args.no_violin) or args.level, 'must either plot violins or have at least one confidence level specified!'
if args.only_cr_width:
    assert len(args.level)==1, 'must specify only a single --level with --only-cr-width'
    args.no_violin = True

#-------------------------------------------------

### set up figure, axes
fig = plot.figure(figsize=(args.figwidth, args.figheight))
if args.cr_width_subplot:
    ax = fig.add_axes([0.15, 0.35, 0.8, 0.6])
    subax = fig.add_axes([0.15, 0.10, 0.8, 0.24])
else:
    ax = fig.gca()

### define these once here since they don't change throughout the loop
ones = np.ones(args.num_points, dtype=float)
if args.column_bandwidth is not None:
    variance = args.column_bandwidth**2 

### iterate
xmin = +np.infty
xmax = -np.infty
for ind, (label, path) in enumerate(args.samples):
    if args.verbose:
        print('reading in samples for %s from: %s'%(label, path))
    data, _ = io.load(path, [args.column], logcolumns=logcolumns, max_num_samples=max_num_samples[label])
    data *= args.multiplier ### apply this before pruning and all that jazz...

    if weight_columns[label][0]:
        if args.verbose:
            print('reading in non-trivial weights from: '+path)
        weights = io.load_weights(path, weight_columns[label][0], logweightcolumns=weight_columns[label][1], max_num_samples=max_num_samples[label])

    else:
        N = len(data)
        weights = np.ones(N, dtype='float')/N

    if args.column_range:
        m, M = args.column_range
    else:
        m, M = np.min(data), np.max(data)

    if args.prune:### throw away data that's outside the bounds
        data, weights = utils.prune(data, [(m, M)], weights=weights)

    if args.column_bandwidth is None:
        bandwidth = kde.silverman_bandwidth(data[:,0], weights=weights)
        if args.verbose:
            print('automatically selecting bandwidth=%.6e'%bandwidth)
        variance = bandwidth**2

    if args.reflect:
        data, weights = utils.reflect(data, [(m, M)], weights=weights)

    x_value = x_values[label]
    dx = dxs[label]

    if not args.no_violin:
        samples = np.linspace(m, M, args.num_points)
        _kde = kde.logkde(
            samples,
            data,
            variance,
            weights=weights,
            num_proc=args.num_proc,
        )
        _kde = np.exp(_kde - np.max(_kde))
        _kde *= dx ### normalize to be half the spacing between things

        ax.plot(x_value*ones + _kde, samples, color=colors[label]) ### make a violin plot
        ax.plot(x_value*ones - _kde, samples, color=colors[label])

    if args.level:
        if args.reflect:
            print('WARNING: computing credible regions after reflecting samples can produce nonsensical result!')

        for vals in stats.samples2crbounds(data[:,0], args.level, weights=weights):
            ymin, ymax = vals
            if args.cr_width_subplot:
                if args.filled:
                    subax.fill_between([x_value-dx, x_value+dx], [0, 0], [ymax-ymin]*2, color=colors[label], alpha=args.alpha)
                subax.plot([x_value-dx, x_value+dx], [ymax-ymin]*2, color=colors[label], linestyle=args.level_linestyle)

            if args.only_cr_width:
                ymax = ymax-ymin
                ymin = 0

            if args.filled:
                ax.fill_between([x_value-dx, x_value+dx], [ymin]*2, [ymax]*2, color=colors[label], alpha=args.alpha)
            ax.plot([x_value-dx, x_value+dx], [ymin]*2, color=colors[label], linestyle=args.level_linestyle)
            ax.plot([x_value-dx, x_value+dx], [ymax]*2, color=colors[label], linestyle=args.level_linestyle)

    xmin = min(xmin, x_value-dx)
    xmax = max(xmax, x_value+dx)

# futz the sides of the figures
dx = xmax - xmin
xmin -= args.xaxis_padding_fraction*dx
xmax += args.xaxis_padding_fraction*dx

### decorate

if args.natural_xticklabels: ### override the default tick labeling on the x-axis
    xticks = sorted(set([x_values[label] for label in names]))
else:
    xticks = [x_values[label] for label in names]

ax.set_xticks(xticks)
if args.cr_width_subplot:
    plot.setp(ax.get_xticklabels(), visible=False)
    subax.set_xticks(xticks)

    subax.set_ylim(ymin=0)
    subax.set_ylabel('Credible Region Size')

if args.only_cr_width:
    ax.set_ylim(ymin=0)
    ax.set_ylabel('%s %d%s Credible Region Size'%(args.column_label, 100*args.level[0], '\%')) ### we already checked that there is only a single level
else:
    if args.column_range:
        ax.set_ylim(args.column_range)
    ax.set_ylabel(args.column_label)

xlim = (xmin, xmax)
for column_truth in args.column_truth:
    ax.plot(xlim, [column_truth]*2, color=args.truth_color)
ax.set_xlim(xlim)

if args.cr_width_subplot:
    subax.set_xlim(xlim)

if args.grid:
    ax.grid(True, which='both')

if args.x_label:
    if args.natural_xticklabels:
        if args.cr_width_subplot:
            subax.set_xlabel(args.x_label)
        else:
            ax.set_xlabel(args.x_label)
    else:
        ax.set_xlabel(args.x_label)
        ax.xaxis.set_label_position('top')

if args.no_xticklabels:
    if args.cr_width_subplot:
        plot.setp(subax.get_xticklabels(), visible=False)
    else:
        plot.setp(ax.get_xticklabels(), visible=False)

elif not args.natural_xticklabels:
    if args.cr_width_subplot:
        subax.set_xticklabels(names, rotation=args.rotate_xticklabels)
    else:
        ax.set_xticklabels(names, rotation=args.rotate_xticklabels)

else:
    if args.cr_width_subplot:
        plot.setp(subax.get_xticklabels(), rotation=args.rotate_xticklabels)
    else:
        plot.setp(ax.get_xticklabels(), rotation=args.rotate_xticklabels)

### save
plot.save('kde-violin-sequence%s'%args.tag, fig, figtypes=args.figtype, directory=args.output_dir, verbose=args.verbose, dpi=args.dpi)
plot.close(fig)
