#!/usr/bin/env python

"""perform numeric calculus on every file in a process, adding the result as a new column in each file
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os
import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from universality.utils import (utils, io)
from universality import gaussianprocess as gp

#-------------------------------------------------

DEFAULT_COLUMN_NAME = {
    'add': '(%(fcolumn)s)+(%(xcolumn)s)',
    'subtract': '(%(fcolumn)s)-(%(xcolumn)s)',
    'multiply': '(%(fcolumn)s)*(%(xcolumn)s)',
    'divide': '(%(fcolumn)s)/(%(xcolumn)s)',
    'logarithmic differentiate': 'd(ln_%(fcolumn)s)/d(ln_%(xcolumn)s)',
    'differentiate': 'd(%(fcolumn)s)/d(%(xcolumn)s)',
    'integrate': 'int(%(fcolumn)s)d(%(xcolumn)s)',
}

FUNCTIONS = {
    'add': (lambda x, f : x+f),
    'subtract': (lambda x, f : f-x),
    'multiply': (lambda x, f : x*f),
    'divide': (lambda x, f : f/x),
    'logarithmic differentiate': (lambda x,y : gp.num_dfdx(x,f)*x/f),
    'differentiate': gp.num_dfdx,
    'integrate': gp.num_intfdx,
}

KNOWN_ACTIONS = list(DEFAULT_COLUMN_NAME.keys())

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

# required arguments
rgroup = parser.add_argument_group('required arguments')
rgroup.add_argument('inpath', type=str)

rgroup.add_argument('action', type=str,
    help='must be one of: %s'%(', '.join(KNOWN_ACTIONS)))

rgroup.add_argument('xcolumn', type=str,
    help='the abscissa, such that taking the derivative means computeing "dfcolumn / dxcolum"')
rgroup.add_argument('fcolumn', type=str,
    help='the ordinate, such that taking the derivative means computeing "dfcolumn / dxcolum"')

rgroup.add_argument('--new-column', type=str, default=None,
    help='the name of the new column that will be added to each file')
rgroup.add_argument('--overwrite', default=False, action='store_true',
    help='if specified, will overwrite new-column if it already exists')

# verbosity arguments
vgroup = parser.add_argument_group('verbosity arguments')
vgroup.add_argument('-v', '--verbose', default=False, action='store_true')
vgroup.add_argument('-V', '--Verbose', default=False, action='store_true')

# samples arguments
sgroup = parser.add_argument_group('samples-specific argument')
sgroup.add_argument('--max-num-samples', default=io.DEFAULT_MAX_NUM_SAMPLES, type=int)

# lookup arguments
lgroup = parser.add_argument_group('look-up arguments')
lgroup.add_argument('--eos-column', default='EoS', type=str)
lgroup.add_argument('--eos-dir', default='.', type=str)
lgroup.add_argument('--eos-num-per-dir', default=1000, type=int,
    help='the number of samples per directory')
lgroup.add_argument('--eos-basename', default='draw-foo-%d.csv', type=str,
    help='a string into which the EOS number can be substituted when building filenames.')

# output arguments
ogroup = parser.add_argument_group('output arguments')
ogroup.add_argument('--output-eos-dir', default=None, type=str,
    help='if specified, we will write the updated files into this directory instead of overwriting them')

args = parser.parse_args()

### finish parsing

assert args.action in KNOWN_ACTIONS, 'action must be one of: %s'%(', '.join(KNOWN_ACTIONS))
foo = FUNCTIONS[args.action] ### look up the function handle only once

if args.new_column is None:
    args.new_column = DEFAULT_COLUMN_NAME[args.action]%{'fcolumn':args.fcolumn, 'xcolumn':args.xcolumn}

if args.output_eos_dir is None:
    args.output_eos_dir = args.eos_dir

args.verbose |= args.Verbose

#-------------------------------------------------

if args.verbose:
    print('reading samples from: '+args.inpath)
data, cols = io.load(args.inpath, [args.eos_column], max_num_samples=args.max_num_samples)

### marginalize to avoid reading in the same EOS more than once
if args.verbose:
    print('marginalizing samples to avoid repeated work processing the same EoS multiple times')
data, cols = utils.marginalize(data, np.zeros(len(data), dtype=float), cols)

data = data[:,0]
N = len(data)

#------------------------

if args.verbose:
    print('iterating over files and adding: '+args.new_column)

path_template = os.path.join(args.eos_dir, 'DRAWmod%d'%args.eos_num_per_dir+'-%(moddraw)06d', args.eos_basename)
newdir_template = os.path.join(args.output_eos_dir, 'DRAWmod%d'%args.eos_num_per_dir+'-%(moddraw)06d')
new_template = os.path.join(newdir_template, args.eos_basename)

for eos in data:
    tmp = {'moddraw':eos//args.eos_num_per_dir, 'draw':eos}
    path = path_template%tmp
    if args.Verbose:
        print('    '+path)
    d, c = io.load(path)

    npts, ncol = d.shape
    if args.overwrite:
        if args.new_column in c:
            ans = d
            ind = c.index(args.new_column)
            header = c

        else:
            ans = np.empty((npts, ncol+1), dtype=float)
            ans[:,:-1] = d
            ind = -1
            header = c+[args.new_column]

    else:
        assert args.new_column not in c, "column=%s already exists in %s!"%(args.new_column, path)
        ans = np.empty((npts, ncol+1), dtype=float)
        ans[:,:-1] = d
        ind = -1
        header = c+[args.new_column]
    
    ans[:,ind] = foo(d[:,c.index(args.xcolumn)], d[:,c.index(args.fcolumn)]) ### compute the integral or derivative

    new = new_template%tmp
    if args.Verbose:
        print('        writing: '+new)

    newdir = newdir_template%tmp
    if not os.path.exists(newdir):
        try:
            os.makedirs(newdir)
        except OSError:
            pass ### directory already exists

    io.write(new, ans, header) ### save the result to the same file
