#!/usr/bin/env python

__usage__ = "gpr_energy_density [--options] eos.csv [eos.csv eos.csv ...]"
__doc__ = "a one-stop shop for the full GPR regression for energy_density/c2 as a function of pressurec2. The regression is done directly for loge(logp)."
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os

import numpy as np

from argparse import ArgumentParser

### non-standard
from universality import utils
from universality import gaussianprocess as gp
from universality import plot

#-------------------------------------------------

DEFAULT_MIN_PRESSURE = 1e30 ### g/cm^3
DEFAULT_MAX_PRESSURE = 1e38

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

rgroup = parser.add_argument_group('required arguments')
rgroup.add_argument('eospaths', nargs='+', type=str)

### verbosity options
vgroup = parser.add_argument_group('verbosity options')
vgroup.add_argument('-v', '--verbose', default=False, action='store_true')

### options for resampling
ggroup = parser.add_argument_group('Gaussian Process resampling options')
ggroup.add_argument('--resample-pressure-bounds', default=(DEFAULT_MIN_PRESSURE, DEFAULT_MAX_PRESSURE), nargs=2, type=float,
    help='min max values for resample-pressure. Specified in g/cm^3. \
DEFAULT=%.3e %.3e'%(DEFAULT_MIN_PRESSURE, DEFAULT_MAX_PRESSURE))
ggroup.add_argument('--resample-pressure-num', default=gp.DEFAULT_NUM, type=int,
    help='resample to this number of points. \
DEFAULT=%d'%gp.DEFAULT_NUM)

ggroup.add_argument('--resample-poly-degree', default=gp.DEFAULT_POLY_DEGREE, type=int,
    help='the degree of the polynomial used to model eos before GPR as part of resampling. \
DEFAULT=%d'%gp.DEFAULT_POLY_DEGREE)

ggroup.add_argument('--resample-sigma', default=gp.DEFAULT_SIGMA, type=float,
    help='used as a guess for the optimizer. \
DEFAULT=%.3e'%gp.DEFAULT_SIGMA)
ggroup.add_argument('--resample-l', default=gp.DEFAULT_L, type=float,
    help='used as a guess for the optimizer. \
DEFAULT=%.3e'%gp.DEFAULT_L)
ggroup.add_argument('--resample-sigma_obs', default=gp.DEFAULT_SIGMA, type=float,
    help='used as a guess for the optimizer. \
DEFAULT=%.3e'%gp.DEFAULT_SIGMA)

### options for evaluation
egroup = parser.add_argument_group('Gaussian Process evaluation options')
egroup.add_argument('--evaluate-pressure-bounds', default=(DEFAULT_MIN_PRESSURE, DEFAULT_MAX_PRESSURE), nargs=2, type=float,
    help='min max values for evaluation pressures. Specified in g/cm^3. \
DEFAULT=%.3e %.3e'%(DEFAULT_MIN_PRESSURE, DEFAULT_MAX_PRESSURE))
egroup.add_argument('--evaluate-pressure-num', default=gp.DEFAULT_NUM, type=int,
    help='evaluate at this number of points. \
DEFAULT=%d'%gp.DEFAULT_NUM)

egroup.add_argument('--evaluate-poly-degree', default=gp.DEFAULT_POLY_DEGREE, type=int,
    help='the degree of the polynomial used to model eos before GPR as part of evaluation. \
DEFAULT=%d'%gp.DEFAULT_POLY_DEGREE)

egroup.add_argument('--evaluate-sigma', default=gp.DEFAULT_SIGMA, type=float,
    help='used as a guess for the optimizer. \
DEFAULT=%.3e'%gp.DEFAULT_SIGMA)
egroup.add_argument('--evaluate-l', default=gp.DEFAULT_L, type=float,
    help='used as a guess for the optimizer. \
DEFAULT=%.3e'%gp.DEFAULT_L)
egroup.add_argument('--evaluate-sigma_obs', default=gp.DEFAULT_SIGMA, type=float,
    help='used as a guess for the optimizer. \
DEFAULT=%.3e'%gp.DEFAULT_SIGMA)

egroup.add_argument('--evaluate-model_multiplier', default=gp.DEFAULT_MODEL_MULTIPLIER, type=float,
    help='multiplicative factor for theoretical variance. Larger values increase the "theory noise" from the variance between resampled curves. \
Note, this is applied to the variance, not the standard deviation. \
Default=%d'%gp.DEFAULT_MODEL_MULTIPLIER)

#--- output options
ogroup = parser.add_argument_group('output options')
ogroup.add_argument('--resample-plot', default=False, action='store_true',
    help='generate plots for each resampled eos for sanity checking purposes')
ogroup.add_argument('--evaluate-plot', default=False, action='store_true',
    help='generate plots for altogether regression for sanity checking purposes')

ogroup.add_argument('-o', '--output-dir', default='.', type=str)
ogroup.add_argument('-t', '--tag', default='', type=str)

args = parser.parse_args()

if not os.path.exists(args.output_dir):
    os.makedirs(args.output_dir)

if args.tag:
    args.tag = "_"+args.tag

#-------------------------------------------------

### resample eos into a big matrix
### generate all data structures we'll need here
if args.verbose:
    print('resampling to %d points within [%.3e, %.3e] g/cm^3'%((args.resample_pressure_num,)+args.resample_pressure_bounds))
logp_resample = np.linspace(
    np.log(args.resample_pressure_bounds[0]),
    np.log(args.resample_pressure_bounds[1]),
    args.resample_pressure_num,
)
logp_resample -= 2*np.log(utils.c)

### set up data structures for "altogether" regression
#Nobs = Neos*args.resample_pressure_num ### the total number of observation points we'll end up with after resampling
#means = np.empty(Nobs, dtype='float') ### don't zero this because we overwrite every element
#covs = np.zeros((Nobs, Nobs), dtype='float') ### do zero this because we add to this instead of assigning values
means = []
covs = []
logps = []
truths = []

for ind, path in enumerate(args): ### iterate over supplied EOS, resample, and fill in data structures
    if args.verbose:
        print('reading: '+path)
    data, _ = utils.load(path, ['pressurec2', 'energy_densityc2'])
    logp_obs = np.log(data[:,0])
    loge_obs = np.log(data[:,1])

    ### run gpr to resample this eos
    if args.verbose:
        print('resampling %d observations to %d points'%(len(loge_obs), args.resample_pressure_num))
    truth = (np.min(logp_obs)<=logp_resample)*(logp_resample<=np.max(logp_obs)) ### only keep samples below the max tabulated value
    if not np.any(truth):
        raise Warning, 'no samples found with requested range. Skipping this EOS'
        continue
            
    mean, cov, logweight = gp.gpr_resample(
        logp_resample[truth],
        loge_obs,
        logp_obs,
        degree=args.resample_poly_degree,
        guess_sigma2=args.resample_sigma**2,
        guess_l2=args.resample_l**2,
        guess_sigma2_obs=args.resample_sigma_obs**2,
    )

    ### store these for when we build the big covariance matrix for the "altogether" regression
    means.append(mean)
    covs.append(cov)
    logps.append(logp_resample[truth])
    truths.append(truth)

    ### save the process for this resample to file
    pklpath = os.path.join(args.output_dir, 'gpr_energy_density-%s%s.pkl'%(os.path.basename(path)[:-4], args.tag))
    if args.verbose:
        print('writing process to: '+pklpath)
    gp.pkldump(pklpath, 'logpressurec2', 'logenergy_densityc2', logp_resample[truth], mean, cov)

    ### plot the result
    if args.resample_plot:
        figname = pklpath[:-3]+'png'
        if args.verbose:
            print('saving: '+figname)
        fig = plot.sanity_check(logp_resample[truth], mean, np.diag(cov)**0.5, [logp_obs], [loge_obs])[0]
        fig.suptitle(os.path.basename(path)[:-4])
        fig.savefig(figname)
        plot.plt.close(fig)

if args.verbose:
    print('computing modeling uncertainty at each pressure')
### reference arrays concerning the lengths of each sample
lens = [len(_) for _ in means]
clens = np.cumsum(lens)
slens = [0]+[_ for _ in clens[:-1]]

### reshape resampled vectors into 1D arrays
means_1d = np.concatenate(means)
logps_1d = np.concatenate(logps)
Nobs = len(logps_1d)

### add in "theory model noise" as diagonal components based on variance of means at each pressure
covs_2d = np.zeros((Nobs,Nobs), dtype='float')

### iterate through pressure samples and compute theory variance of each
for i in xrange(args.resample_pressure_num):
    ### variance for this pressure sample
    sample_means = []
    sample_vars = []
    for mean, cov, truth in zip(means, covs, truths):
        if truth[i]:
            ind = np.sum(truth[:i+1])-1
            sample_means.append( mean[ind] )
            sample_vars.append( cov[ind,ind] )
    var = np.var(sample_means) + np.sum(sample_vars) if sample_means else 0. ### only take the variance if there's a non-trivial sample at this pressure

    # multiply this sample by some factor (hyper-parameter)
    var *= args.evaluate_model_multiplier

    # fill in big array as needed
    for j in xrange(Neos):
        if i<lens[j]: # if this EOS goes to high enough pressure, add in this variance
            ind = slens[j]+i
            covs_2d[ind,ind] += var ### variance goes on the diagonal

### iterate over regression covariances and fill in the matrix
### this includes off-diagonal correlations within each resampling
i=0
for ind in xrange(Neos):
    j = clens[ind]
    covs_2d[i:j,i:j] += covs[ind]
    i = j

#------------------------

### perform the "altogether" regression
if args.verbose:
    print('evaluating log(e) at %d points within [%.3e, %.3e] g/cm^3'%((args.evaluate_pressure_num,)+args.evaluate_pressure_bounds))
logp_evaluate = np.linspace(
    np.log(args.evaluate_pressure_bounds[0]),
    np.log(args.evaluate_pressure_bounds[1]),
    args.evaluate_pressure_num,
)
logp_evaluate -= 2*np.log(utils.c)

if args.verbose:
    print('regressing %d values from %d noisy observations'%(args.evaluate_pressure_num, Nobs))
mean, cov, logweight = gp.gpr_altogether(
    logp_evaluate,
    means_1d,
    logps_1d,
    covs_2d,
    degree=args.evaluate_poly_degree,
    guess_sigma2=args.evaluate_sigma**2,
    guess_l2=args.evaluate_l**2,
    guess_sigma2_obs=args.evaluate_sigma_obs**2,
)

### save the result
pklpath = os.path.join(args.output_dir, 'gpr_energy_density%s.pkl'%args.tag)
if args.verbose:
    print('writing process to: '+pklpath)
gp.pkldump(pklpath, 'logpressurec2', 'logenergy_densityc2', pklpath, logp_evaluate, mean, cov)

### plot the result
if args.evaluate_plot:
    figname = pklpath[:-3]+'png'
    if args.verbose:
        print('saving: '+figname)
    fig = plot.sanity_check(logp_evaluate, mean, np.diag(cov)**0.5, logps, means)[0]
    fig.savefig(figname)
    plot.plt.close(fig)
